assessment:
  id: "pre-assessment-fundamentals"
  title: "ByteHot Fundamentals - Pre-Assessment"
  type: "pre_assessment"
  description: |
    This quick assessment helps us understand your current knowledge of Java development
    and hot-swapping concepts. Don't worry if you don't know some answers - this course
    will teach you everything you need to know!
  
  config:
    time_limit: 600  # 10 minutes in seconds
    passing_score: 60
    randomize_questions: true
    show_correct_answers: false  # Only after completion
    allow_retakes: true
    max_attempts: 3
  
  questions:
    - id: "q1"
      type: "multiple_choice"
      difficulty: "basic"
      points: 10
      question: |
        What is the primary benefit of hot-swapping in Java applications?
      options:
        a: "Faster application startup time"
        b: "Reduced memory usage"
        c: "Ability to modify code without restarting the application"
        d: "Better security features"
      correct: "c"
      explanation: |
        Hot-swapping allows developers to modify running Java applications without 
        restarting them, which saves time and preserves application state during development.
      category: "concepts"
    
    - id: "q2"
      type: "multiple_choice"
      difficulty: "basic"
      points: 10
      question: |
        Which Java feature enables hot-swapping at runtime?
      options:
        a: "Garbage Collection"
        b: "JVM Instrumentation API"
        c: "Thread Pools"
        d: "Class Loaders only"
      correct: "b"
      explanation: |
        The JVM Instrumentation API provides the capability to redefine classes at runtime,
        which is the foundation for hot-swapping technology.
      category: "technical"
    
    - id: "q3"
      type: "multiple_choice"
      difficulty: "basic"
      points: 10
      question: |
        What is a JVM agent?
      options:
        a: "A separate application that monitors the JVM"
        b: "A JAR file that gets loaded when the JVM starts"
        c: "A debugging tool built into Java"
        d: "A type of Java class"
      correct: "b"
      explanation: |
        A JVM agent is a JAR file that gets loaded using the -javaagent parameter when
        starting a Java application, allowing it to instrument and modify the JVM behavior.
      category: "technical"
    
    - id: "q4"
      type: "true_false"
      difficulty: "basic"
      points: 10
      question: |
        Hot-swapping can modify any type of change to a Java class, including 
        adding new fields, changing method signatures, and modifying inheritance.
      correct: false
      explanation: |
        Hot-swapping has limitations. While it can modify method implementations,
        it cannot typically add fields, change method signatures, or modify class structure
        without more advanced techniques.
      category: "limitations"
    
    - id: "q5"
      type: "multiple_choice"
      difficulty: "intermediate"
      points: 15
      question: |
        In a typical Java development workflow, when would hot-swapping be most beneficial?
      options:
        a: "During initial application design"
        b: "When debugging and iterating on business logic"
        c: "When setting up project dependencies"
        d: "During application packaging"
      correct: "b"
      explanation: |
        Hot-swapping is most beneficial during active development, especially when 
        debugging issues or iterating on business logic, as it eliminates restart delays.
      category: "workflow"
    
    - id: "q6"
      type: "multiple_choice"
      difficulty: "basic"
      points: 10
      question: |
        What file extension do you typically monitor for hot-swapping in Java?
      options:
        a: ".java"
        b: ".class"
        c: ".jar"
        d: ".properties"
      correct: "b"
      explanation: |
        Hot-swapping monitors .class files (compiled bytecode) rather than .java source files,
        because the JVM works with bytecode, not source code.
      category: "technical"
    
    - id: "q7"
      type: "multiple_choice"
      difficulty: "intermediate"
      points: 15
      question: |
        Which of the following changes would typically be supported by basic hot-swapping?
      options:
        a: "Adding a new public method to a class"
        b: "Changing the logic inside an existing method"
        c: "Adding a new instance variable"
        d: "Changing a class to extend a different parent class"
      correct: "b"
      explanation: |
        Basic hot-swapping typically supports modifying method implementations (changing logic),
        but has limitations with structural changes like new methods, fields, or inheritance.
      category: "limitations"
    
    - id: "q8"
      type: "scenario"
      difficulty: "intermediate"
      points: 20
      question: |
        You're developing a web application and notice a bug in a business logic method.
        The application takes 2 minutes to restart due to initialization time.
        How could hot-swapping help in this situation?
      options:
        a: "It would make the application start faster"
        b: "It would prevent bugs from occurring"
        c: "It would allow fixing the bug without the 2-minute restart delay"
        d: "It would automatically detect and fix the bug"
      correct: "c"
      explanation: |
        Hot-swapping would allow you to fix the business logic bug by modifying the method
        implementation and seeing the changes immediately, avoiding the 2-minute restart delay
        and preserving your debugging session state.
      category: "practical"

  scoring:
    grade_scale:
      A: 90
      B: 80
      C: 70
      D: 60
      F: 0
    
    feedback:
      excellent: "Outstanding! You have a strong foundation in Java development concepts."
      good: "Great job! You understand most concepts and are ready to learn ByteHot."
      adequate: "Good start! This course will help strengthen your understanding."
      needs_improvement: "No worries! This course is designed to teach you everything from the beginning."
  
  recommendations:
    score_90_plus: |
      Excellent foundation! You can move through the course at an accelerated pace.
      Consider focusing on the hands-on labs for practical experience.
      
    score_70_89: |
      Good preparation! You'll do well in this course. Pay special attention to
      the technical concepts and JVM instrumentation topics.
      
    score_50_69: |
      You have the basics covered. Take your time with each module and don't hesitate
      to review the prerequisite materials for Java development.
      
    score_below_50: |
      This course will teach you everything you need to know! Start with the
      fundamentals and work through each module carefully. Consider reviewing
      basic Java concepts alongside the course material.