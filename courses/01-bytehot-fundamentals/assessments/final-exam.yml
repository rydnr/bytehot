exam:
  id: "final-exam-fundamentals"
  title: "ByteHot Fundamentals - Final Certification Exam"
  type: "final_exam"
  description: |
    This comprehensive exam tests your mastery of ByteHot fundamentals including
    installation, configuration, basic hot-swapping, and troubleshooting.
    Passing this exam with 80% or higher earns you the ByteHot Fundamentals Certificate.
  
  config:
    time_limit: 1800  # 30 minutes
    passing_score: 80
    randomize_questions: true
    randomize_options: true
    show_correct_answers: false  # Only after exam completion
    allow_retakes: true
    max_attempts: 3
    require_sequential: true  # Must complete in order
  
  sections:
    - id: "installation"
      title: "Installation & Configuration"
      questions: 6
      points: 30
      
    - id: "concepts"
      title: "Core Concepts & Architecture"
      questions: 5
      points: 25
      
    - id: "practical"
      title: "Practical Application"
      questions: 6
      points: 30
      
    - id: "troubleshooting"
      title: "Troubleshooting & Best Practices"
      questions: 3
      points: 15
  
  questions:
    # Installation & Configuration Section
    - id: "install_1"
      section: "installation"
      type: "multiple_choice"
      difficulty: "basic"
      points: 5
      question: |
        What is the correct command to run a Java application with the ByteHot agent?
      options:
        a: "java -agent:bytehot.jar MyApp"
        b: "java -javaagent:bytehot.jar MyApp"
        c: "java -Xbootclasspath:bytehot.jar MyApp"
        d: "java -cp bytehot.jar MyApp"
      correct: "b"
      explanation: |
        The -javaagent parameter is the standard JVM option for loading Java agents.
        It must be specified before the main class or -jar parameter.
      
    - id: "install_2"
      section: "installation"
      type: "multiple_choice"
      difficulty: "intermediate"
      points: 5
      question: |
        In the ByteHot configuration, what does setting 'pollInterval: 500' accomplish?
      options:
        a: "Sets the hot-swap timeout to 500ms"
        b: "Checks for file changes every 500ms"
        c: "Limits to 500 hot-swaps per session"
        d: "Sets the maximum file size to 500KB"
      correct: "b"
      explanation: |
        The pollInterval determines how frequently ByteHot scans monitored directories
        for changes. 500ms means it checks twice per second.
      
    - id: "install_3"
      section: "installation"
      type: "code_completion"
      difficulty: "intermediate"
      points: 5
      question: |
        Complete this YAML configuration to monitor both Maven and Gradle build outputs:
        
        ```yaml
        bytehot:
          watch:
            - path: "target/classes"
              patterns: ["*.class"]
              recursive: true
            - path: "__________"
              patterns: ["__________"]
              recursive: __________
        ```
      answer: |
        bytehot:
          watch:
            - path: "target/classes"
              patterns: ["*.class"]
              recursive: true
            - path: "build/classes"
              patterns: ["*.class"]
              recursive: true
      explanation: |
        Gradle typically uses 'build/classes' for compiled output, while Maven uses
        'target/classes'. Both should monitor *.class files recursively.
      
    - id: "install_4"
      section: "installation"
      type: "true_false"
      difficulty: "basic"
      points: 5
      question: |
        ByteHot requires modification of your Java source code to enable hot-swapping.
      correct: false
      explanation: |
        ByteHot works with standard Java applications without requiring any source
        code modifications. It operates through JVM instrumentation.
      
    - id: "install_5"
      section: "installation"
      type: "multiple_choice"
      difficulty: "intermediate"
      points: 5
      question: |
        Which environment variable is most useful for simplifying ByteHot usage?
      options:
        a: "JAVA_HOME"
        b: "CLASSPATH"
        c: "BYTEHOT_AGENT_PATH"
        d: "PATH"
      correct: "c"
      explanation: |
        Setting BYTEHOT_AGENT_PATH allows you to reference the agent JAR easily
        without typing the full path each time you run applications.
      
    - id: "install_6"
      section: "installation"
      type: "scenario"
      difficulty: "advanced"
      points: 5
      question: |
        You're setting up ByteHot for a team of 5 developers. Each developer works
        on different projects with different build tools (Maven, Gradle, Ant).
        What's the best approach for configuration management?
      options:
        a: "Create one shared configuration file for all projects"
        b: "Each developer creates their own configuration"
        c: "Create project-specific configurations with shared templates"
        d: "Use environment variables only, no configuration files"
      correct: "c"
      explanation: |
        Project-specific configurations allow customization for different build tools
        while shared templates ensure consistency and best practices across the team.
    
    # Core Concepts & Architecture Section
    - id: "concepts_1"
      section: "concepts"
      type: "multiple_choice"
      difficulty: "basic"
      points: 5
      question: |
        What is the primary mechanism ByteHot uses to enable hot-swapping?
      options:
        a: "Custom class loaders"
        b: "JVM Instrumentation API"
        c: "Reflection API"
        d: "Bytecode manipulation libraries"
      correct: "b"
      explanation: |
        ByteHot leverages the JVM Instrumentation API, which provides the standard
        mechanism for agents to redefine classes at runtime.
      
    - id: "concepts_2"
      section: "concepts"
      type: "multiple_choice"
      difficulty: "intermediate"
      points: 5
      question: |
        Why does ByteHot monitor .class files instead of .java source files?
      options:
        a: ".java files are too large to monitor efficiently"
        b: "The JVM executes bytecode, not source code"
        c: ".class files contain more detailed information"
        d: "Source files don't change during development"
      correct: "b"
      explanation: |
        The JVM executes compiled bytecode (.class files), not source code.
        ByteHot must work with what the JVM actually loads and executes.
      
    - id: "concepts_3"
      section: "concepts"
      type: "multiple_choice"
      difficulty: "advanced"
      points: 5
      question: |
        What happens to existing object instances when ByteHot performs a hot-swap?
      options:
        a: "All instances are destroyed and recreated"
        b: "Instances maintain their state but get new behavior"
        c: "Only new instances get the updated behavior"
        d: "Instances are converted to the old class version"
      correct: "b"
      explanation: |
        ByteHot preserves existing object instances and their state while updating
        their behavior to match the newly loaded class definition.
      
    - id: "concepts_4"
      section: "concepts"
      type: "true_false"
      difficulty: "intermediate"
      points: 5
      question: |
        Hot-swapping can modify any aspect of a Java class, including adding new fields,
        changing method signatures, and modifying inheritance hierarchies.
      correct: false
      explanation: |
        Hot-swapping has limitations. While method body changes are well-supported,
        structural changes like new fields or modified signatures have restrictions.
      
    - id: "concepts_5"
      section: "concepts"
      type: "multiple_choice"
      difficulty: "intermediate"
      points: 5
      question: |
        In ByteHot's architecture, what component is responsible for detecting file changes?
      options:
        a: "The compilation monitor"
        b: "The file watcher"
        c: "The bytecode analyzer"
        d: "The class redefinition engine"
      correct: "b"
      explanation: |
        The file watcher component continuously monitors specified directories
        for changes to .class files and triggers the hot-swap process.
    
    # Practical Application Section
    - id: "practical_1"
      section: "practical"
      type: "scenario"
      difficulty: "intermediate"
      points: 5
      question: |
        You're debugging a web application and discover a logic error in a service method.
        The application takes 3 minutes to restart. How does ByteHot help in this situation?
      options:
        a: "It makes the application restart faster"
        b: "It prevents logic errors from occurring"
        c: "It allows fixing the method without restarting"
        d: "It automatically detects and fixes logic errors"
      correct: "c"
      explanation: |
        ByteHot allows you to fix the service method logic and see the changes
        immediately without the 3-minute restart, preserving your debugging session.
      
    - id: "practical_2"
      section: "practical"
      type: "multiple_choice"
      difficulty: "basic"
      points: 5
      question: |
        Which type of change is BEST suited for hot-swapping?
      options:
        a: "Adding a new public field to a class"
        b: "Changing a method's return type"
        c: "Modifying the logic inside an existing method"
        d: "Adding a new constructor parameter"
      correct: "c"
      explanation: |
        Modifying method implementations (the logic inside methods) is the most
        compatible type of change for hot-swapping and works reliably.
      
    - id: "practical_3"
      section: "practical"
      type: "code_analysis"
      difficulty: "intermediate"
      points: 5
      question: |
        Given this original method:
        ```java
        public String generateMessage(String name) {
            return "Hello, " + name;
        }
        ```
        
        Which modification would be MOST suitable for hot-swapping?
      options:
        a: "public String generateMessage(String name, String greeting) { return greeting + name; }"
        b: "public void generateMessage(String name) { System.out.println('Hello, ' + name); }"
        c: "public String generateMessage(String name) { return 'Greetings, ' + name + '!'; }"
        d: "public static String generateMessage(String name) { return 'Hello, ' + name; }"
      correct: "c"
      explanation: |
        Option C only changes the method body implementation while keeping the same
        signature (return type, method name, parameters), making it ideal for hot-swapping.
      
    - id: "practical_4"
      section: "practical"
      type: "multiple_choice"
      difficulty: "intermediate"
      points: 5
      question: |
        What's the typical workflow for applying a hot-swap with ByteHot?
      options:
        a: "Modify source → Restart application → Test change"
        b: "Modify source → Compile → Hot-swap applied automatically"
        c: "Compile → Modify source → Restart JVM"
        d: "Stop application → Modify source → Compile → Start application"
      correct: "b"
      explanation: |
        The ByteHot workflow is: modify source code, compile to generate new .class files,
        and ByteHot automatically detects and applies the hot-swap.
      
    - id: "practical_5"
      section: "practical"
      type: "true_false"
      difficulty: "basic"
      points: 5
      question: |
        When using ByteHot, you must manually restart your application after
        making code changes to see the updates.
      correct: false
      explanation: |
        The whole point of ByteHot is to eliminate manual restarts. Changes are
        applied automatically when you compile modified code.
      
    - id: "practical_6"
      section: "practical"
      type: "scenario"
      difficulty: "advanced"
      points: 5
      question: |
        You're developing a REST API with multiple endpoints. You want to test changes
        to business logic while maintaining active user sessions. Why is ByteHot
        particularly valuable in this scenario?
      options:
        a: "It improves API performance"
        b: "It provides automatic testing capabilities"
        c: "It preserves application state and user sessions during updates"
        d: "It adds security features to the API"
      correct: "c"
      explanation: |
        ByteHot allows updating business logic without restarting the server,
        which preserves user sessions, database connections, and application state.
    
    # Troubleshooting & Best Practices Section
    - id: "troubleshoot_1"
      section: "troubleshooting"
      type: "scenario"
      difficulty: "intermediate"
      points: 5
      question: |
        ByteHot is not detecting changes to your .class files. What's the FIRST
        thing you should check?
      options:
        a: "Java version compatibility"
        b: "The watch path configuration matches your build output directory"
        c: "Network connectivity"
        d: "Available memory"
      correct: "b"
      explanation: |
        The most common issue is misconfigured watch paths. ByteHot must monitor
        the directory where your build tool outputs compiled .class files.
      
    - id: "troubleshoot_2"
      section: "troubleshooting"
      type: "multiple_choice"
      difficulty: "intermediate"
      points: 5
      question: |
        When is it appropriate to use a lower pollInterval value (faster checking)?
      options:
        a: "In production environments"
        b: "During active development with frequent changes"
        c: "When working with large codebases"
        d: "Never, it should always be as high as possible"
      correct: "b"
      explanation: |
        Lower pollInterval provides faster change detection during active development
        but uses more CPU. It's ideal when you're making frequent changes.
      
    - id: "troubleshoot_3"
      section: "troubleshooting"
      type: "best_practice"
      difficulty: "advanced"
      points: 5
      question: |
        What's a best practice for organizing ByteHot configurations in a team environment?
      options:
        a: "Use the same configuration file for all developers and projects"
        b: "Store configurations in version control with project-specific settings"
        c: "Each developer should create completely unique configurations"
        d: "Avoid configuration files and rely on command-line arguments only"
      correct: "b"
      explanation: |
        Storing configurations in version control ensures consistency while allowing
        project-specific customization. This promotes team collaboration and reproducibility.
  
  performance_metrics:
    time_tracking: true
    question_analytics: true
    difficulty_progression: true
    
  certification:
    certificate_name: "ByteHot Fundamentals Certificate"
    issuer: "ByteHot Learning Academy"
    validity_period: "2 years"
    verification_code: true
    digital_badge: true
    
  scoring:
    section_weights:
      installation: 30
      concepts: 25
      practical: 30
      troubleshooting: 15
    
    grade_boundaries:
      A: 90
      B: 80
      C: 70
      D: 60
      F: 0
    
  feedback:
    A_grade: |
      🏆 Outstanding! You've demonstrated exceptional mastery of ByteHot fundamentals.
      You're ready to tackle more advanced topics and help others learn ByteHot.
      
    B_grade: |
      🎉 Excellent work! You have a solid understanding of ByteHot fundamentals
      and are well-prepared for intermediate topics.
      
    C_grade: |
      👍 Good job! You understand the core concepts. Consider reviewing the areas
      where you had difficulty before moving to advanced topics.
      
    D_grade: |
      📚 You're making progress! Review the course materials and consider retaking
      the exam to strengthen your foundation before continuing.
      
    F_grade: |
      📖 Take time to review the course content thoroughly. Focus on the hands-on
      labs and practice exercises before attempting the exam again.
      
  next_steps:
    on_pass: |
      Congratulations on earning your ByteHot Fundamentals Certificate! 
      
      🎯 Recommended next steps:
      1. Continue with Course 02: Spring Boot Integration Mastery
      2. Practice with your own Java projects
      3. Join the ByteHot community discussions
      4. Share your certificate with your professional network
      
    on_fail: |
      Don't worry - learning complex topics takes time and practice.
      
      📚 Recommended review areas:
      1. Revisit the hands-on labs for practical experience
      2. Review areas where you scored lowest
      3. Practice with the installation and configuration exercises
      4. Ask questions in the community forums
      
      You can retake this exam up to 2 more times. Good luck!