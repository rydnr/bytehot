quiz:
  id: "module-01-knowledge-check"
  title: "Module 01: Installation & Setup - Knowledge Check"
  module: "01-installation"
  type: "knowledge_check"
  
  config:
    time_limit: 300  # 5 minutes
    passing_score: 70
    randomize_questions: false
    show_correct_answers: true
    allow_retakes: true
    max_attempts: 3
  
  questions:
    - id: "q1"
      type: "multiple_choice"
      difficulty: "basic"
      points: 20
      question: |
        What is the correct JVM parameter to load the ByteHot agent?
      options:
        a: "-javaagent:/path/to/bytehot-agent.jar"
        b: "-agent=/path/to/bytehot-agent.jar"
        c: "-Xbootclasspath:/path/to/bytehot-agent.jar"
        d: "-cp /path/to/bytehot-agent.jar"
      correct: "a"
      explanation: |
        The -javaagent parameter is the standard way to load JVM agents.
        It must be specified before the main class or -jar parameter.
      category: "configuration"
      
    - id: "q2"
      type: "multiple_choice"
      difficulty: "basic"
      points: 20
      question: |
        Which file extension does ByteHot monitor for hot-swapping by default?
      options:
        a: ".java source files"
        b: ".class bytecode files"
        c: ".jar archive files"
        d: ".xml configuration files"
      correct: "b"
      explanation: |
        ByteHot monitors .class files because the JVM works with compiled bytecode,
        not source code. When you compile your .java files, the resulting .class
        files are what get hot-swapped.
      category: "technical"
      
    - id: "q3"
      type: "true_false"
      difficulty: "basic"
      points: 15
      question: |
        ByteHot requires special modifications to your Java source code to work.
      correct: false
      explanation: |
        ByteHot works with standard Java applications without requiring any
        modifications to your source code. It operates at the bytecode level
        using JVM instrumentation.
      category: "concepts"
      
    - id: "q4"
      type: "multiple_choice"
      difficulty: "intermediate"
      points: 25
      question: |
        In the configuration file, what does the 'pollInterval' setting control?
      options:
        a: "How often ByteHot checks for new .class files (in milliseconds)"
        b: "The timeout for hot-swap operations"
        c: "The number of files to process simultaneously"
        d: "The delay before applying hot-swaps"
      correct: "a"
      explanation: |
        The pollInterval setting determines how frequently (in milliseconds) ByteHot
        scans the watched directories for changes to .class files. A lower value
        means faster detection but higher CPU usage.
      category: "configuration"
      
    - id: "q5"
      type: "code_completion"
      difficulty: "intermediate"
      points: 20
      question: |
        Complete the YAML configuration to watch the 'build/classes' directory
        for all .class files recursively, checking every 2 seconds:
        
        ```yaml
        bytehot:
          watch:
            - path: "_______________"
              patterns: ["_______________"]
              recursive: _______________
              pollInterval: _______________
        ```
      answer: |
        bytehot:
          watch:
            - path: "build/classes"
              patterns: ["*.class"]
              recursive: true
              pollInterval: 2000
      explanation: |
        - path: "build/classes" - the directory to monitor
        - patterns: ["*.class"] - watch for .class file changes
        - recursive: true - monitor subdirectories
        - pollInterval: 2000 - check every 2000ms (2 seconds)
      category: "configuration"
      
  scoring:
    perfect_score_bonus: 5
    completion_points: 10
    
  feedback:
    excellent: |
      üéâ Outstanding! You've mastered the ByteHot installation process.
      You're ready to move on to performing your first hot-swap!
      
    good: |
      üëç Great work! You understand the key concepts of ByteHot installation.
      Review any questions you missed and you'll be ready for the next module.
      
    needs_review: |
      üìö Good effort! Consider reviewing the installation content, especially
      the configuration and JVM agent sections, before proceeding.
      
  next_steps:
    on_pass: |
      Excellent! You're ready for the hands-on lab exercise where you'll
      practice the installation process step-by-step.
      
    on_fail: |
      Take some time to review the module content, especially focusing on
      the areas where you had difficulty. The hands-on lab will help
      reinforce these concepts.
      
  hints:
    q1: "Think about the standard JVM parameter for loading agents..."
    q2: "Remember, the JVM executes bytecode, not source code..."
    q3: "ByteHot works at the JVM level, not the source code level..."
    q4: "This setting affects how frequently ByteHot scans for changes..."
    q5: "Remember the time is in milliseconds: 2 seconds = 2000ms"