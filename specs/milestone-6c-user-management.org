#+TITLE: Milestone 6c User Management
#+AUTHOR: ByteHot Project  
#+DATE: 2025-06-19

* Milestone 6C: User Management Domain
:PROPERTIES:
:CUSTOM_ID: milestone-6c-user-management-domain
:END:
** Overview
:PROPERTIES:
:CUSTOM_ID: overview
:END:
*Objective:* Implement user management domain logic with EventSourcing,
making all ByteHot operations user-aware and providing the foundation
for user-specific features, analytics, and audit trails.

*Status:* ðŸ“‹ Planned (Depends on Milestones 6A, 6B)

*Walking Skeleton Value:* Transforms ByteHot from an anonymous system to
a user-aware platform. Enables user-specific analytics (time saved
tracking), audit trails, personalized configurations, and multi-user
scenarios.

** Goals
:PROPERTIES:
:CUSTOM_ID: goals
:END:
*** Primary Goal
:PROPERTIES:
:CUSTOM_ID: primary-goal
:END:
Create a User aggregate with EventSourcing that can: - Automatically
register new users - Reconstruct user state from event history -
Associate all ByteHot operations with specific users - Provide
foundation for user-specific features

*** Secondary Goals
:PROPERTIES:
:CUSTOM_ID: secondary-goals
:END:
- Enable user authentication and session management
- Support user preferences and configurations
- Create audit trails for compliance and debugging
- Prepare for multi-user and team scenarios

** User Discovery and Registration
:PROPERTIES:
:CUSTOM_ID: user-discovery-and-registration
:END:
*** Automatic User Discovery
:PROPERTIES:
:CUSTOM_ID: automatic-user-discovery
:END:
ByteHot automatically discovers users through multiple identification
methods:

#+begin_src java
public class UserIdentificationStrategy {
    
    /**
     * Identifies user from multiple sources in order of preference
     */
    public UserId identifyUser() {
        // 1. Explicit user ID (command line, environment)
        String explicitUserId = System.getProperty("bytehot.user.id");
        if (explicitUserId != null) {
            return UserId.of(explicitUserId);
        }
        
        // 2. Git configuration
        String gitUser = GitUserResolver.getCurrentUser();
        if (gitUser != null) {
            return UserId.of(gitUser);
        }
        
        // 3. System user
        String systemUser = System.getProperty("user.name");
        if (systemUser != null) {
            return UserId.of(systemUser + "@" + getHostname());
        }
        
        // 4. Generate anonymous user
        return UserId.anonymous();
    }
}
#+end_src

*** User Registration Flow
:PROPERTIES:
:CUSTOM_ID: user-registration-flow
:END:
#+end_src
sequenceDiagram
    participant E as External Event
    participant A as Application
    participant U as User Aggregate
    participant ES as EventStore

    E->>A: ByteHotAttachRequested(userId=unknown)
    A->>U: Check if user exists
    U->>ES: Query events for user
    ES-->>U: No events found
    U->>U: User.register(userId)
    U->>A: UserRegistered event
    A->>ES: Save UserRegistered event
    A->>E: Proceed with original event
#+end_src

** Domain Model
:PROPERTIES:
:CUSTOM_ID: domain-model
:END:
*** 1. User Aggregate
:PROPERTIES:
:CUSTOM_ID: user-aggregate
:END:
#+begin_src java
package org.acmsl.bytehot.domain;

@RequiredArgsConstructor
@EqualsAndHashCode
@ToString
public class User implements AggregateRoot {
    
    @Getter
    private final UserId userId;
    
    @Getter
    private final UserProfile profile;
    
    @Getter
    private final UserPreferences preferences;
    
    @Getter
    private final UserStatistics statistics;
    
    @Getter
    private final Instant registeredAt;
    
    @Getter
    private final Instant lastActiveAt;
    
    @Getter
    private final long version;
    
    /**
     * Primary port: Register a new user
     */
    public static DomainResponseEvent<UserRegistrationRequested> register(
        final UserRegistrationRequested event
    ) {
        UserId userId = event.getUserId();
        
        // Check if user already exists
        if (userExists(userId)) {
            return UserRegistrationRejected.of(userId, "User already exists");
        }
        
        // Create new user
        User user = new User(
            userId,
            UserProfile.defaultProfile(userId),
            UserPreferences.defaults(),
            UserStatistics.empty(),
            Instant.now(),
            Instant.now(),
            1L
        );
        
        return UserRegistered.of(user);
    }
    
    /**
     * Handle user authentication
     */
    public static DomainResponseEvent<UserAuthenticationRequested> authenticate(
        final UserAuthenticationRequested event
    ) {
        UserId userId = event.getUserId();
        
        // Reconstruct user from events
        User user = reconstructFromEvents(userId);
        if (user == null) {
            // Auto-register unknown user
            return UserRegistered.of(createUser(userId));
        }
        
        // Update last active timestamp
        User updatedUser = user.updateLastActive(Instant.now());
        
        return UserAuthenticated.of(updatedUser, event.getSessionId());
    }
    
    /**
     * Handle user session start
     */
    public DomainResponseEvent<UserSessionStartRequested> startSession(
        final UserSessionStartRequested event
    ) {
        UserSession session = new UserSession(
            event.getSessionId(),
            this.userId,
            Instant.now(),
            event.getEnvironment()
        );
        
        User updatedUser = this.updateLastActive(Instant.now());
        
        return UserSessionStarted.of(updatedUser, session);
    }
    
    /**
     * Update user preferences
     */
    public DomainResponseEvent<UserPreferenceUpdateRequested> updatePreferences(
        final UserPreferenceUpdateRequested event
    ) {
        UserPreferences newPreferences = this.preferences.update(
            event.getPreferenceKey(),
            event.getPreferenceValue()
        );
        
        User updatedUser = new User(
            this.userId,
            this.profile,
            newPreferences,
            this.statistics,
            this.registeredAt,
            Instant.now(),
            this.version + 1
        );
        
        return UserPreferenceUpdated.of(updatedUser, event.getPreferenceKey(), event.getPreferenceValue());
    }
    
    /**
     * Reconstruct user from event history
     */
    private static User reconstructFromEvents(UserId userId) {
        EventStorePort eventStore = Ports.resolve(EventStorePort.class);
        List<VersionedDomainEvent> events = eventStore.getEventsForAggregate(
            "user", 
            userId.getValue()
        );
        
        if (events.isEmpty()) {
            return null;
        }
        
        // Apply events to rebuild user state
        User user = null;
        for (VersionedDomainEvent event : events) {
            user = applyEvent(user, event);
        }
        
        return user;
    }
    
    /**
     * Apply a single event to user state
     */
    private static User applyEvent(User currentUser, VersionedDomainEvent event) {
        if (event instanceof UserRegistered) {
            return ((UserRegistered) event).getUser();
        } else if (event instanceof UserPreferenceUpdated) {
            UserPreferenceUpdated prefEvent = (UserPreferenceUpdated) event;
            return currentUser.withUpdatedPreference(
                prefEvent.getPreferenceKey(),
                prefEvent.getPreferenceValue()
            );
        } else if (event instanceof UserSessionStarted) {
            UserSessionStarted sessionEvent = (UserSessionStarted) event;
            return currentUser.updateLastActive(sessionEvent.getTimestamp());
        }
        // Add other event types as needed
        
        return currentUser;
    }
}
#+end_src

*** 2. UserId Value Object
:PROPERTIES:
:CUSTOM_ID: userid-value-object
:END:
#+end_src
package org.acmsl.bytehot.domain;

@Value
@RequiredArgsConstructor(staticName = "of")
public class UserId {
    String value;
    
    /**
     * Creates an anonymous user ID
     */
    public static UserId anonymous() {
        return UserId.of("anonymous-" + UUID.randomUUID().toString());
    }
    
    /**
     * Creates a user ID from email
     */
    public static UserId fromEmail(String email) {
        return UserId.of(email.toLowerCase());
    }
    
    /**
     * Creates a user ID from Git configuration
     */
    public static UserId fromGit(String gitUser, String gitEmail) {
        if (gitEmail != null && !gitEmail.isEmpty()) {
            return fromEmail(gitEmail);
        }
        return UserId.of(gitUser);
    }
    
    /**
     * Checks if this is an anonymous user
     */
    public boolean isAnonymous() {
        return value.startsWith("anonymous-");
    }
    
    /**
     * Gets a display name for the user
     */
    public String getDisplayName() {
        if (isAnonymous()) {
            return "Anonymous User";
        }
        
        if (value.contains("@")) {
            return value.substring(0, value.indexOf("@"));
        }
        
        return value;
    }
}
#+end_src

*** 3. User Domain Events
:PROPERTIES:
:CUSTOM_ID: user-domain-events
:END:
**** UserRegistered Event
:PROPERTIES:
:CUSTOM_ID: userregistered-event
:END:
#+begin_src java
package org.acmsl.bytehot.domain.events;

@RequiredArgsConstructor
@EqualsAndHashCode(callSuper = true)
@ToString
public class UserRegistered extends AbstractVersionedDomainEvent {
    
    @Getter
    private final User user;
    
    @Getter
    private final UserRegistrationSource source;
    
    public static UserRegistered of(User user) {
        return of(user, UserRegistrationSource.AUTOMATIC);
    }
    
    public static UserRegistered of(User user, UserRegistrationSource source) {
        EventMetadata metadata = createMetadata(
            "user",
            user.getUserId().getValue(),
            null // No previous event for registration
        );
        
        return new UserRegistered(
            metadata.getEventId(),
            metadata.getAggregateType(),
            metadata.getAggregateId(),
            metadata.getAggregateVersion(),
            metadata.getTimestamp(),
            metadata.getPreviousEventId(),
            metadata.getSchemaVersion(),
            user,
            source
        );
    }
    
    public enum UserRegistrationSource {
        AUTOMATIC,      // Auto-discovered
        EXPLICIT,       // Explicitly provided
        GIT_CONFIG,     // From Git configuration
        ENVIRONMENT     // From environment variables
    }
}
#+end_src

**** UserAuthenticated Event
:PROPERTIES:
:CUSTOM_ID: userauthenticated-event
:END:
#+end_src
package org.acmsl.bytehot.domain.events;

@RequiredArgsConstructor
@EqualsAndHashCode(callSuper = true)
@ToString
public class UserAuthenticated extends AbstractVersionedDomainEvent {
    
    @Getter
    private final UserId userId;
    
    @Getter
    private final String sessionId;
    
    @Getter
    private final Instant authenticatedAt;
    
    @Getter
    private final AuthenticationMethod method;
    
    public static UserAuthenticated of(User user, String sessionId) {
        return of(user.getUserId(), sessionId, AuthenticationMethod.AUTOMATIC);
    }
    
    public static UserAuthenticated of(
        UserId userId, 
        String sessionId, 
        AuthenticationMethod method
    ) {
        EventMetadata metadata = createMetadata(
            "user",
            userId.getValue(),
            getLastEventId(userId)
        );
        
        return new UserAuthenticated(
            metadata.getEventId(),
            metadata.getAggregateType(),
            metadata.getAggregateId(),
            metadata.getAggregateVersion(),
            metadata.getTimestamp(),
            metadata.getPreviousEventId(),
            metadata.getSchemaVersion(),
            userId,
            sessionId,
            Instant.now(),
            method
        );
    }
    
    public enum AuthenticationMethod {
        AUTOMATIC,      // Auto-authentication
        EXPLICIT,       // User provided credentials
        SSO,            // Single sign-on
        TOKEN           // API token
    }
}
#+end_src

**** UserSessionStarted Event
:PROPERTIES:
:CUSTOM_ID: usersessionstarted-event
:END:
#+begin_src java
package org.acmsl.bytehot.domain.events;

@RequiredArgsConstructor
@EqualsAndHashCode(callSuper = true)
@ToString
public class UserSessionStarted extends AbstractVersionedDomainEvent {
    
    @Getter
    private final UserId userId;
    
    @Getter
    private final UserSession session;
    
    @Getter
    private final EnvironmentInfo environment;
    
    public static UserSessionStarted of(User user, UserSession session) {
        EventMetadata metadata = createMetadata(
            "user",
            user.getUserId().getValue(),
            getLastEventId(user.getUserId())
        );
        
        return new UserSessionStarted(
            metadata.getEventId(),
            metadata.getAggregateType(),
            metadata.getAggregateId(),
            metadata.getAggregateVersion(),
            metadata.getTimestamp(),
            metadata.getPreviousEventId(),
            metadata.getSchemaVersion(),
            user.getUserId(),
            session,
            EnvironmentInfo.current()
        );
    }
}
#+end_src

** User Context Propagation
:PROPERTIES:
:CUSTOM_ID: user-context-propagation
:END:
*** Enhanced Domain Events with User Context
:PROPERTIES:
:CUSTOM_ID: enhanced-domain-events-with-user-context
:END:
All existing domain events will be enhanced to include user context:

#+end_src
public abstract class AbstractVersionedDomainEvent 
    implements VersionedDomainEvent {
    
    // Existing fields...
    
    @Getter
    private final UserId userId;
    
    /**
     * Enhanced factory method with user context
     */
    protected static EventMetadata createMetadata(
        String aggregateType,
        String aggregateId,
        String previousEventId,
        UserId userId  // New parameter
    ) {
        return new EventMetadata(
            UUID.randomUUID().toString(),
            aggregateType,
            aggregateId,
            0L, // Version determined by EventStore
            Instant.now(),
            previousEventId,
            1, // Schema version
            userId // User context
        );
    }
}
#+end_src

*** User Context Resolution
:PROPERTIES:
:CUSTOM_ID: user-context-resolution
:END:
#+begin_src java
package org.acmsl.bytehot.domain;

public class UserContextResolver {
    
    private static final ThreadLocal<UserId> currentUser = new ThreadLocal<>();
    
    /**
     * Sets the current user for this thread
     */
    public static void setCurrentUser(UserId userId) {
        currentUser.set(userId);
    }
    
    /**
     * Gets the current user, auto-discovering if needed
     */
    public static UserId getCurrentUser() {
        UserId userId = currentUser.get();
        if (userId == null) {
            userId = autoDiscoverUser();
            setCurrentUser(userId);
        }
        return userId;
    }
    
    /**
     * Clears the current user context
     */
    public static void clearCurrentUser() {
        currentUser.remove();
    }
    
    /**
     * Auto-discovers user from environment
     */
    private static UserId autoDiscoverUser() {
        UserIdentificationStrategy strategy = new UserIdentificationStrategy();
        return strategy.identifyUser();
    }
    
    /**
     * Executes code with a specific user context
     */
    public static <T> T withUser(UserId userId, Supplier<T> action) {
        UserId previousUser = currentUser.get();
        try {
            setCurrentUser(userId);
            return action.get();
        } finally {
            if (previousUser != null) {
                setCurrentUser(previousUser);
            } else {
                clearCurrentUser();
            }
        }
    }
}
#+end_src

** User Preferences and Configuration
:PROPERTIES:
:CUSTOM_ID: user-preferences-and-configuration
:END:
*** UserPreferences Value Object
:PROPERTIES:
:CUSTOM_ID: userpreferences-value-object
:END:
#+end_src
package org.acmsl.bytehot.domain;

@Value
@Builder
public class UserPreferences {
    Map<String, Object> preferences;
    
    public static UserPreferences defaults() {
        return UserPreferences.builder()
            .preferences(Map.of(
                "notification.enabled", true,
                "analytics.enabled", true,
                "hotswap.autoRetry", true,
                "logging.level", "INFO"
            ))
            .build();
    }
    
    public UserPreferences update(String key, Object value) {
        Map<String, Object> newPreferences = new HashMap<>(this.preferences);
        newPreferences.put(key, value);
        return UserPreferences.builder()
            .preferences(newPreferences)
            .build();
    }
    
    @SuppressWarnings("unchecked")
    public <T> T get(String key, Class<T> type) {
        Object value = preferences.get(key);
        return type.cast(value);
    }
    
    public boolean getBoolean(String key) {
        return get(key, Boolean.class);
    }
    
    public String getString(String key) {
        return get(key, String.class);
    }
    
    public Integer getInteger(String key) {
        return get(key, Integer.class);
    }
}
#+end_src

** User Statistics and Analytics
:PROPERTIES:
:CUSTOM_ID: user-statistics-and-analytics
:END:
*** UserStatistics Value Object
:PROPERTIES:
:CUSTOM_ID: userstatistics-value-object
:END:
#+begin_src java
package org.acmsl.bytehot.domain;

@Value
@Builder
public class UserStatistics {
    
    // Hot-swap statistics
    int totalHotSwaps;
    int successfulHotSwaps;
    int failedHotSwaps;
    Duration totalTimeSaved;
    
    // Usage statistics
    int sessionsStarted;
    Duration totalActiveTime;
    Instant firstSessionAt;
    Instant lastSessionAt;
    
    // File watching statistics
    int filesWatched;
    int classesModified;
    Map<String, Integer> modificationsByClass;
    
    public static UserStatistics empty() {
        return UserStatistics.builder()
            .totalHotSwaps(0)
            .successfulHotSwaps(0)
            .failedHotSwaps(0)
            .totalTimeSaved(Duration.ZERO)
            .sessionsStarted(0)
            .totalActiveTime(Duration.ZERO)
            .filesWatched(0)
            .classesModified(0)
            .modificationsByClass(new HashMap<>())
            .build();
    }
    
    public UserStatistics recordHotSwap(boolean successful, Duration timeSaved) {
        return this.toBuilder()
            .totalHotSwaps(totalHotSwaps + 1)
            .successfulHotSwaps(successful ? successfulHotSwaps + 1 : successfulHotSwaps)
            .failedHotSwaps(successful ? failedHotSwaps : failedHotSwaps + 1)
            .totalTimeSaved(totalTimeSaved.plus(timeSaved))
            .build();
    }
    
    public UserStatistics recordClassModification(String className) {
        Map<String, Integer> newModifications = new HashMap<>(modificationsByClass);
        newModifications.merge(className, 1, Integer::sum);
        
        return this.toBuilder()
            .classesModified(classesModified + 1)
            .modificationsByClass(newModifications)
            .build();
    }
    
    public double getSuccessRate() {
        if (totalHotSwaps == 0) return 0.0;
        return (double) successfulHotSwaps / totalHotSwaps;
    }
    
    public Duration getAverageTimeSavedPerHotSwap() {
        if (successfulHotSwaps == 0) return Duration.ZERO;
        return totalTimeSaved.dividedBy(successfulHotSwaps);
    }
}
#+end_src

** Integration with ByteHot Operations
:PROPERTIES:
:CUSTOM_ID: integration-with-bytehot-operations
:END:
*** Enhanced ByteHot Aggregate
:PROPERTIES:
:CUSTOM_ID: enhanced-bytehot-aggregate
:END:
#+end_src
package org.acmsl.bytehot.domain;

public class ByteHot {
    
    /**
     * Enhanced attach method with user context
     */
    public static DomainResponseEvent<ByteHotAttachRequested> attach(
        final ByteHotAttachRequested event
    ) {
        UserId userId = event.getUserId();
        
        // Auto-register user if needed
        if (!userExists(userId)) {
            User.register(new UserRegistrationRequested(userId));
        }
        
        // Authenticate user
        User.authenticate(new UserAuthenticationRequested(userId, generateSessionId()));
        
        // Start user session
        User.startSession(new UserSessionStartRequested(userId, generateSessionId(), EnvironmentInfo.current()));
        
        // Proceed with normal attach logic
        return ByteHotAgentAttached.of(event, userId);
    }
    
    // Other enhanced methods with user context...
}
#+end_src

** Testing with Event-Driven Framework
:PROPERTIES:
:CUSTOM_ID: testing-with-event-driven-framework
:END:
*** User Management Tests
:PROPERTIES:
:CUSTOM_ID: user-management-tests
:END:
#+begin_src java
class UserManagementTest extends EventDrivenTestSupport {
    
    @Test
    void shouldAutoRegisterNewUser() {
        // Given: No prior events (new system)
        given()
            .noEvents();
        
        // When: ByteHot attach is requested with unknown user
        when()
            .event(new ByteHotAttachRequested(UserId.of("john.doe@example.com")));
        
        // Then: User is automatically registered
        then()
            .expectEvent(UserRegistered.class)
                .withUserId(UserId.of("john.doe@example.com"))
                .withSource(UserRegistrationSource.AUTOMATIC)
            .expectEvent(UserAuthenticated.class)
                .withUserId(UserId.of("john.doe@example.com"));
    }
    
    @Test
    void shouldReconstructUserFromEvents() {
        // Given: User has existing event history
        given()
            .event(new UserRegistered(createUser("jane@example.com")))
            .event(new UserPreferenceUpdated("jane@example.com", "notification.enabled", false))
            .event(new UserSessionStarted("jane@example.com", session1));
        
        // When: User authentication is requested
        when()
            .event(new UserAuthenticationRequested(UserId.of("jane@example.com"), "session-456"));
        
        // Then: User is reconstructed with correct preferences
        then()
            .expectEvent(UserAuthenticated.class)
                .withUserId(UserId.of("jane@example.com"))
            .expectState()
                .userPreference("jane@example.com", "notification.enabled", false);
    }
}
#+end_src

** Success Criteria
:PROPERTIES:
:CUSTOM_ID: success-criteria
:END:
*** Functional Requirements
:PROPERTIES:
:CUSTOM_ID: functional-requirements
:END:
- âœ… Auto-discovers users from multiple sources (Git, system, explicit)
- âœ… Auto-registers unknown users without manual intervention
- âœ… Reconstructs user state from complete event history
- âœ… Associates all ByteHot operations with specific users
- âœ… Supports user preferences and configuration
- âœ… Tracks user statistics and analytics

*** Integration Requirements
:PROPERTIES:
:CUSTOM_ID: integration-requirements
:END:
- âœ… All existing domain events enhanced with user context
- âœ… User context propagates through all operations
- âœ… EventStore properly stores user-associated events
- âœ… Event-driven testing supports user scenarios

*** Performance Requirements
:PROPERTIES:
:CUSTOM_ID: performance-requirements
:END:
- âœ… User discovery adds < 10ms to operation latency
- âœ… Event reconstruction handles 1000+ events efficiently
- âœ… User context propagation has minimal overhead
- âœ… Supports multiple concurrent user sessions

** Future Enhancements
:PROPERTIES:
:CUSTOM_ID: future-enhancements
:END:
*** Team and Organization Support
:PROPERTIES:
:CUSTOM_ID: team-and-organization-support
:END:
- Team aggregates with shared configurations
- Organization-level analytics and reporting
- Role-based access control
- Collaborative development features

*** Advanced Analytics
:PROPERTIES:
:CUSTOM_ID: advanced-analytics
:END:
- Machine learning on user behavior patterns
- Predictive analytics for development efficiency
- Personalized recommendations
- Performance optimization suggestions

*** Integration with Development Tools
:PROPERTIES:
:CUSTOM_ID: integration-with-development-tools
:END:
- IDE plugin user synchronization
- Build tool user context propagation
- CI/CD pipeline user tracking
- Code review integration

--------------

*Milestone 6C transforms ByteHot into a user-aware platform, enabling
personalized experiences, detailed analytics, comprehensive audit
trails, and the foundation for advanced collaborative features.*
