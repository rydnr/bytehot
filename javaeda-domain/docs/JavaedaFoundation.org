#+TITLE: JavaedaFoundation
#+AUTHOR: JavaEDA Framework Generator  
#+EMAIL: info@acm-sl.org
#+DATE: 2025-01-27
#+STARTUP: showall
#+OPTIONS: toc:2 num:nil

* Overview

The =JavaedaFoundation= class serves as the cornerstone of the JavaEDA framework, providing essential utilities and foundational services for building event-driven applications with Domain-Driven Design patterns.

* Purpose and Responsibilities

** Core Responsibilities
- Provide framework identification and versioning information
- Supply foundational utility methods for validation and error handling  
- Enable framework initialization and health checking
- Support consistent error messaging across the framework

** Design Principles
- Utility class pattern with static methods only
- Fail-fast validation approach
- Consistent API surface for common operations
- Framework-agnostic utility functions

* Class Structure

** Package Declaration
#+BEGIN_SRC java
package org.acmsl.javaeda.domain;
#+END_SRC

The class resides in the root domain package, making it easily accessible throughout the framework.

** Dependencies
#+BEGIN_SRC java
import org.checkerframework.checker.nullness.qual.NonNull;
#+END_SRC

Uses Checker Framework annotations for compile-time null safety verification.

** Class Declaration
#+BEGIN_SRC java
public class JavaedaFoundation {
    private JavaedaFoundation() {
        // Utility class
    }
}
#+END_SRC

Implemented as a utility class with private constructor to prevent instantiation.

* Constants and Framework Metadata

** Version Information
#+BEGIN_SRC java
@NonNull
public static final String VERSION = "1.0.0";

@NonNull
public static final String NAME = "JavaEDA Framework";
#+END_SRC

These constants provide:
- =VERSION=: Semantic version string following semver conventions
- =NAME=: Human-readable framework name for identification

** Usage Example
#+BEGIN_SRC java
System.out.println("Running " + JavaedaFoundation.getName() + 
                   " version " + JavaedaFoundation.getVersion());
#+END_SRC

* Public API Methods

** Framework Information Methods

*** getVersion()
#+BEGIN_SRC java
@NonNull
public static String getVersion() {
    return VERSION;
}
#+END_SRC

Returns the current framework version as a string.

**** Return Value
- =@NonNull String=: The semantic version (e.g., "1.0.0")

*** getName()
#+BEGIN_SRC java
@NonNull
public static String getName() {
    return NAME;
}
#+END_SRC

Returns the framework name for identification purposes.

**** Return Value
- =@NonNull String=: The framework name ("JavaEDA Framework")

*** getIdentifier()
#+BEGIN_SRC java
@NonNull
public static String getIdentifier() {
    return NAME + " v" + VERSION;
}
#+END_SRC

Provides a complete framework identifier combining name and version.

**** Return Value
- =@NonNull String=: Combined identifier (e.g., "JavaEDA Framework v1.0.0")

**** Usage Example
#+BEGIN_SRC java
String frameworkInfo = JavaedaFoundation.getIdentifier();
log.info("Application started with {}", frameworkInfo);
#+END_SRC

** Validation Utility Methods

*** requireNonEmpty(String, String)
#+BEGIN_SRC java
public static void requireNonEmpty(@NonNull final String value, 
                                  @NonNull final String fieldName) {
    if (value.trim().isEmpty()) {
        throw new IllegalArgumentException(fieldName + " cannot be null or empty");
    }
}
#+END_SRC

Validates that a string parameter is not null or empty after trimming whitespace.

**** Parameters
- =value=: The string value to validate
- =fieldName=: The field name for error messages

**** Exceptions
- =IllegalArgumentException=: If the value is null or empty after trimming

**** Usage Example
#+BEGIN_SRC java
public void setUsername(String username) {
    JavaedaFoundation.requireNonEmpty(username, "username");
    this.username = username;
}
#+END_SRC

*** requireNonNull(T, String)
#+BEGIN_SRC java
public static <T> void requireNonNull(final T value, 
                                     @NonNull final String fieldName) {
    if (value == null) {
        throw new IllegalArgumentException(fieldName + " cannot be null");
    }
}
#+END_SRC

Generic validation method to ensure a value is not null.

**** Type Parameters
- =T=: The type of the value being validated

**** Parameters  
- =value=: The value to validate
- =fieldName=: The field name for error messages

**** Exceptions
- =IllegalArgumentException=: If the value is null

**** Usage Example
#+BEGIN_SRC java
public void setEventHandler(EventHandler handler) {
    JavaedaFoundation.requireNonNull(handler, "eventHandler");
    this.eventHandler = handler;
}
#+END_SRC

** Framework Status Methods

*** isInitialized()
#+BEGIN_SRC java
public static boolean isInitialized() {
    return true; // Basic implementation
}
#+END_SRC

Checks if the framework is properly initialized and ready for use.

**** Return Value
- =boolean=: =true= if framework is initialized, =false= otherwise

**** Current Implementation
The current implementation returns =true= as a basic placeholder. Future versions may include more sophisticated initialization checking.

**** Usage Example
#+BEGIN_SRC java
if (JavaedaFoundation.isInitialized()) {
    startApplication();
} else {
    throw new IllegalStateException("Framework not initialized");
}
#+END_SRC

* Usage Patterns

** Framework Identification
#+BEGIN_SRC java
// Log framework version at startup
log.info("Starting application with {}", JavaedaFoundation.getIdentifier());

// Include in about/version endpoints
@GetMapping("/version")
public Map<String, String> getVersion() {
    return Map.of(
        "framework", JavaedaFoundation.getName(),
        "version", JavaedaFoundation.getVersion()
    );
}
#+END_SRC

** Input Validation
#+BEGIN_SRC java
public class UserService {
    public User createUser(String username, String email, UserProfile profile) {
        // Validate required string parameters
        JavaedaFoundation.requireNonEmpty(username, "username");
        JavaedaFoundation.requireNonEmpty(email, "email");
        
        // Validate required object parameters
        JavaedaFoundation.requireNonNull(profile, "userProfile");
        
        return new User(username, email, profile);
    }
}
#+END_SRC

** Framework Health Checks
#+BEGIN_SRC java
@Component
public class FrameworkHealthIndicator implements HealthIndicator {
    @Override
    public Health health() {
        if (JavaedaFoundation.isInitialized()) {
            return Health.up()
                .withDetail("framework", JavaedaFoundation.getIdentifier())
                .build();
        } else {
            return Health.down()
                .withDetail("reason", "Framework not initialized")
                .build();
        }
    }
}
#+END_SRC

* Integration Points

** Logging Integration
The utility methods are designed to work seamlessly with logging frameworks:

#+BEGIN_SRC java
// Structured logging with framework context
MDC.put("framework", JavaedaFoundation.getName());
MDC.put("version", JavaedaFoundation.getVersion());
log.info("Processing domain event");
#+END_SRC

** Monitoring Integration
Framework information can be included in metrics and monitoring:

#+BEGIN_SRC java
// Include framework metadata in metrics
Gauge.builder("framework.version")
    .tag("name", JavaedaFoundation.getName())
    .tag("version", JavaedaFoundation.getVersion())
    .register(meterRegistry);
#+END_SRC

* Error Handling Strategy

** Consistent Error Messages
The validation methods provide consistent error message formatting:
- Field name is always included for clarity
- Messages follow the pattern: "{fieldName} cannot be {condition}"
- Uses =IllegalArgumentException= for invalid inputs

** Early Validation
The fail-fast approach ensures:
- Invalid states are detected as early as possible
- Clear error messages help with debugging
- Consistent behavior across the framework

* Future Enhancements

** Planned Features
- Enhanced initialization checking with dependency validation
- Configuration management integration
- Plugin system support
- Runtime feature detection

** API Stability
The current API is designed to be stable and backward-compatible. Future enhancements will:
- Maintain existing method signatures
- Add new methods rather than modify existing ones
- Follow semantic versioning for breaking changes

* Testing Strategy

** Unit Test Coverage
All public methods should be tested for:
- Normal operation with valid inputs
- Error conditions with invalid inputs
- Edge cases and boundary conditions

** Example Test Structure
#+BEGIN_SRC java
class JavaedaFoundationTest {
    @Test
    void shouldReturnCorrectVersion() {
        assertThat(JavaedaFoundation.getVersion()).isEqualTo("1.0.0");
    }
    
    @Test
    void shouldValidateNonEmptyStrings() {
        assertThatThrownBy(() -> 
            JavaedaFoundation.requireNonEmpty("", "testField"))
            .isInstanceOf(IllegalArgumentException.class);
    }
}
#+END_SRC

* Conclusion

The =JavaedaFoundation= class provides essential foundation services for the JavaEDA framework while maintaining simplicity and reliability. Its utility-focused design ensures consistent behavior across all framework components while providing clear APIs for common operations like validation and framework identification.