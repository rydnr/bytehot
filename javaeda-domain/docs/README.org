#+TITLE: JavaEDA Domain Framework Documentation
#+AUTHOR: JavaEDA Framework Generator
#+EMAIL: info@acm-sl.org
#+DATE: 2025-01-27
#+STARTUP: showall
#+OPTIONS: toc:2 num:nil

* Overview

This directory contains the literate programming documentation for the JavaEDA Domain Framework, which provides the foundational patterns and utilities for building event-driven applications with Domain-Driven Design principles.

* Documentation Structure

** Core Framework Classes
- [[file:JavaedaFoundation.org][JavaedaFoundation]] - Framework foundation utilities and validation methods

** Framework Status

*** Phase 1: Foundation Layer (✅ Complete)
The current implementation includes the basic foundation layer with core utilities:

**** Implemented Classes
- =JavaedaFoundation= - Core framework utilities, versioning, and validation

**** Key Features
- Framework identification and versioning
- Input validation utilities (=requireNonNull=, =requireNonEmpty=)
- Framework initialization checking
- Null-safety annotations with Checker Framework

*** Future Phases (Planned)

**** Phase 2: Event Infrastructure (Planned)
- =JavaedaDomainEvent= - Base domain event with metadata and correlation
- =JavaedaDomainResponseEvent= - Response events with causality tracking  
- =EventMetadata= - Comprehensive event metadata container
- =EventVersion= - Semantic versioning for event schema evolution
- =CorrelationId= - Event correlation across aggregate boundaries

**** Phase 3: Command Infrastructure (Planned)
- =JavaedaCommand= - Base command with validation and priority
- =CommandValidationRule= - Pluggable command validation framework
- =CommandValidationResult= - Structured validation results
- =CommandValidationViolation= - Detailed validation error information

**** Phase 4: Aggregate Framework (Planned)
- =JavaedaAggregate= - Event-sourced aggregate base class
- =AggregateSnapshot= - Aggregate state snapshots for monitoring
- Domain repository abstractions
- Optimistic concurrency control

**** Phase 5: Exception Hierarchy (Planned)
- =JavaedaDomainException= - Base domain exception with context
- =BusinessRuleViolationException= - Business rule validation errors
- =AggregateNotFoundException= - Resource not found exceptions
- Structured error reporting and diagnostics

* Documentation Standards

** Literate Programming Approach
All framework classes follow the literate programming methodology:
- Complete class documentation in org-mode format
- Code examples and usage patterns included
- Architectural decisions and design rationale explained
- Integration patterns and testing strategies documented

** Documentation Structure
Each class documentation includes:
- Overview and purpose
- Responsibilities and design principles
- Complete API reference with examples
- Usage patterns and integration points
- Error handling strategies
- Testing recommendations
- Future enhancement plans

** Synchronization Requirements
The documentation must remain synchronized with the source code:
- Documentation is updated whenever code changes
- New classes require corresponding org-mode documentation
- Breaking changes are reflected in documentation immediately
- Version information is kept current

* Framework Philosophy

** Design Principles
- **Fail Fast**: Invalid states detected early with clear error messages
- **Type Safety**: Comprehensive null-safety annotations and compile-time checking
- **Consistency**: Uniform APIs and error handling across all framework components
- **Extensibility**: Framework designed for extension without modification
- **Testability**: Built-in support for testing domain logic and event flows

** Architecture Goals
- **Clean Architecture**: Strict layer separation with enforced dependencies
- **Domain-Driven Design**: Rich domain models with encapsulated business logic
- **Event-Driven Architecture**: Event sourcing and CQRS patterns built-in
- **Hexagonal Architecture**: Port-Adapter pattern for external integrations

* Usage Guidelines

** Getting Started
1. Include the =javaeda-domain= dependency in your Maven POM
2. Review the =JavaedaFoundation= documentation for core utilities
3. Follow the validation patterns for consistent error handling
4. Use framework identification for logging and monitoring

** Integration Patterns
- Use =JavaedaFoundation.requireNonNull()= for parameter validation
- Include framework version in application metadata
- Follow the established error message patterns
- Leverage the framework initialization checking

** Best Practices
- Always validate inputs using framework utilities
- Include framework context in logging and monitoring
- Follow the fail-fast principle for error detection
- Use null-safety annotations consistently

* Development Status

** Current Status: Foundation Complete ✅
- Basic framework infrastructure implemented and tested
- Core validation utilities available
- Framework identification and versioning operational
- Documentation synchronized with implementation

** Next Steps
1. Implement Phase 2 event infrastructure with proper Lombok integration
2. Add comprehensive unit test coverage
3. Create integration examples and tutorials
4. Expand documentation with more usage patterns

** Known Issues
- Complex Lombok builder patterns temporarily disabled during compilation fixes
- Full event sourcing infrastructure will be restored in Phase 2
- Some advanced features documented but not yet implemented

* Contributing

** Documentation Updates
When modifying framework classes:
1. Update the corresponding org-mode documentation file
2. Ensure all public methods are documented with examples
3. Update version information if applicable
4. Review and update integration patterns

** New Class Documentation
For new framework classes:
1. Create a new org-mode file in this directory
2. Follow the established documentation structure
3. Include complete API reference and usage examples
4. Update this README to reference the new documentation

* References

** Related Documentation
- [[file:../../specs/milestone-16-javaeda-framework-extraction.org][JavaEDA Framework Extraction Specification]]
- [[file:../../java-commons-infrastructure/docs/README.org][Java Commons Infrastructure Documentation]]
- [[file:../../specs/technical-specs/infrastructure-patterns-guide.org][Infrastructure Patterns Guide]]

** External Resources
- Domain-Driven Design principles and patterns
- Hexagonal Architecture implementation guidelines
- Event Sourcing and CQRS best practices
- Java annotation processing and Lombok integration