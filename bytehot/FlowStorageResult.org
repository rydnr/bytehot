#+TITLE: FlowStorageResult - Flow Storage Operation Result and Status Management Value Object
#+AUTHOR: ByteHot Development Team
#+DATE: [2025-06-21]

* Overview

The ~FlowStorageResult~ class represents the result of flow storage operations, providing comprehensive storage outcome management and intelligent result analysis for precise flow persistence coordination and automated storage validation.

* Class Structure and Storage Result Context

** Core Storage Result and Status Information
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/FlowStorageResult.java
/**
 * The ID of the flow that was operated on for storage tracking
 * @return the FlowId for storage operation identification
 */
@Getter
@NonNull
private final FlowId flowId;

/**
 * Whether the storage operation was successful for result assessment
 * @return true if storage operation succeeded, false otherwise
 */
@Getter
private final boolean success;

/**
 * Optional error message if operation failed for diagnostic information
 * @return the Optional error message for failure analysis
 */
@Getter
@NonNull
private final Optional<String> errorMessage;

/**
 * Optional details about the storage operation for comprehensive context
 * @return the Optional details for operation analysis
 */
@Getter
@NonNull
private final Optional<String> details;
#+END_SRC

** Factory Methods and Result Creation
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/FlowStorageResult.java
/**
 * Creates a successful storage result with minimal context
 * @param flowId the ID of the flow that was successfully operated on
 * @return a successful FlowStorageResult with basic success indication
 */
@NonNull
public static FlowStorageResult success(@NonNull final FlowId flowId) {
    return FlowStorageResult.builder()
        .flowId(flowId)
        .success(true)
        .errorMessage(Optional.empty())
        .details(Optional.empty())
        .build();
}

/**
 * Creates a successful storage result with comprehensive operation details
 * @param flowId the ID of the flow that was successfully operated on
 * @param details additional details about the storage operation
 * @return a successful FlowStorageResult with detailed operation context
 */
@NonNull
public static FlowStorageResult success(@NonNull final FlowId flowId, @Nullable final String details) {
    return FlowStorageResult.builder()
        .flowId(flowId)
        .success(true)
        .errorMessage(Optional.empty())
        .details(Optional.ofNullable(details))
        .build();
}

/**
 * Creates a failed storage result with error context
 * @param flowId the ID of the flow that failed to be operated on
 * @param errorMessage the error message describing the failure
 * @return a failed FlowStorageResult with error information
 */
@NonNull
public static FlowStorageResult failure(@NonNull final FlowId flowId, @Nullable final String errorMessage) {
    return FlowStorageResult.builder()
        .flowId(flowId)
        .success(false)
        .errorMessage(Optional.ofNullable(errorMessage))
        .details(Optional.empty())
        .build();
}

/**
 * Creates a failed storage result with comprehensive failure analysis
 * @param flowId the ID of the flow that failed to be operated on
 * @param errorMessage the error message describing the failure
 * @param details additional details about the failure context
 * @return a failed FlowStorageResult with detailed failure information
 */
@NonNull
public static FlowStorageResult failure(@NonNull final FlowId flowId,
                                       @Nullable final String errorMessage,
                                       @Nullable final String details) {
    return FlowStorageResult.builder()
        .flowId(flowId)
        .success(false)
        .errorMessage(Optional.ofNullable(errorMessage))
        .details(Optional.ofNullable(details))
        .build();
}
#+END_SRC

** Storage Result Intelligence and Analysis Operations
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/FlowStorageResult.java
/**
 * Checks if the storage operation failed for failure detection
 * @return true if the storage operation failed
 */
public boolean isFailure() {
    return !success;
}

/**
 * Gets the error message if the operation failed with safe access
 * @return the error message, or empty string if successful
 */
@NonNull
public String getErrorMessageOrEmpty() {
    return errorMessage.orElse("");
}

/**
 * Gets the operation details if present with safe access
 * @return the details, or empty string if not present
 */
@NonNull
public String getDetailsOrEmpty() {
    return details.orElse("");
}

/**
 * Returns whether the storage result has diagnostic information
 * @return true if error message or details are present
 */
public boolean hasDiagnosticInformation() {
    return errorMessage.isPresent() || details.isPresent();
}

/**
 * Returns whether the storage result indicates a critical failure
 * @return true if failure with error message indicating critical issue
 */
public boolean isCriticalFailure() {
    return isFailure() && errorMessage.map(msg -> 
        msg.toLowerCase().contains("critical") || 
        msg.toLowerCase().contains("fatal") ||
        msg.toLowerCase().contains("corruption")).orElse(false);
}

/**
 * Returns comprehensive storage result summary for logging and analysis
 * @return formatted string with complete storage result information
 */
public String getResultSummary() {
    final StringBuilder summary = new StringBuilder();
    summary.append("FlowStorageResult{flowId=").append(flowId);
    summary.append(", success=").append(success);
    
    if (errorMessage.isPresent()) {
        summary.append(", error='").append(errorMessage.get()).append("'");
    }
    
    if (details.isPresent()) {
        summary.append(", details='").append(details.get()).append("'");
    }
    
    summary.append("}");
    return summary.toString();
}
#+END_SRC

* Value Object Role

This class serves as a ValueObject that encapsulates flow storage operation results, providing comprehensive storage outcome information and intelligent analysis capabilities for precise flow persistence management and automated storage validation.

* Storage Result Intelligence and Operation Analysis

The value object provides sophisticated storage result management:
- **Success Validation**: Clear storage operation success or failure indication
- **Error Analysis**: Comprehensive error message and diagnostic information management
- **Detail Preservation**: Storage operation detail preservation for analysis and debugging
- **Critical Failure Detection**: Intelligent critical failure detection and classification

* Storage Operations and Persistence Management

The value object enables advanced storage coordination:
- **Result Tracking**: Storage operation result tracking and management
- **Diagnostic Support**: Comprehensive diagnostic information for storage troubleshooting
- **Failure Classification**: Intelligent failure classification and severity assessment
- **Context Preservation**: Storage operation context preservation for analysis

* Related Documentation

- [[FlowId.org][FlowId]]: Flow identifier used in storage operations
- [[Flow.org][Flow]]: Flow aggregate that utilizes storage results
- [[FlowDetectionPort.org][FlowDetectionPort]]: Port that returns storage results from operations
- [[FlowRepository.org][FlowRepository]]: Repository that manages flow persistence operations

* Implementation Notes

** Design Patterns Applied
The value object leverages several sophisticated design patterns:
- **Value Object Pattern**: Immutable storage result representation with comprehensive behavior
- **Builder Pattern**: Complex result construction with optional parameters
- **Factory Method Pattern**: Streamlined result creation through static factory methods
- **Result Pattern**: Success/failure result representation with rich diagnostic context

** Domain-Driven Design Principles
The implementation follows strict DDD principles:
- **Rich Value Objects**: Comprehensive storage result behavior beyond simple data containers
- **Domain Intelligence**: Built-in intelligence for storage result analysis and classification
- **Immutable Design**: Immutable storage result representation for thread safety and consistency
- **Storage-Centric Design**: Flow storage-centric design with comprehensive result management

** Storage Result Management
The value object maintains storage best practices:
- **Result Integrity**: Secure storage result handling and validation
- **Diagnostic Completeness**: Comprehensive diagnostic information preservation
- **Failure Classification**: Intelligent failure classification and severity assessment
- **Context Preservation**: Storage operation context preservation for analysis

** Performance Considerations
The implementation provides performance optimization:
- **Immutable Caching**: Immutable design enables safe caching and reuse
- **Lazy Evaluation**: Lazy evaluation of diagnostic information for resource efficiency
- **Memory Efficiency**: Efficient memory management for storage result context
- **Result Optimization**: Optimized storage result processing and validation

** Integration Patterns
The value object supports integration scenarios:
- **Port Integration**: Seamless integration with FlowDetectionPort for storage operations
- **Repository Coordination**: Storage result coordination with flow repository operations
- **Aggregate Communication**: Flow aggregate communication through storage results
- **Service Layer**: Service layer integration for storage operation management

The FlowStorageResult value object provides ByteHot's essential flow storage result foundation while maintaining comprehensive storage intelligence and diagnostic capabilities for advanced flow persistence management scenarios.