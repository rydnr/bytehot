#+TITLE: InstrumentationAdapter - JVM Instrumentation Infrastructure Implementation
#+AUTHOR: ByteHot Development Team
#+DATE: [2025-06-20]

* Overview

The ~InstrumentationAdapter~ class provides the infrastructure implementation of the ~InstrumentationPort~ interface, serving as the critical bridge between ByteHot's domain logic and the JVM's instrumentation capabilities. This adapter handles the accidental complexity of interacting with Java's ~java.lang.instrument~ package while exposing a clean, domain-focused interface for class redefinition and bytecode manipulation operations.

* Hexagonal Architecture Role

** Secondary Adapter Implementation
InstrumentationAdapter serves as a secondary adapter in ByteHot's hexagonal architecture:
- Implements the ~InstrumentationPort~ interface defined in the domain layer
- Handles JVM-specific instrumentation implementation details
- Isolates domain logic from Java instrumentation API evolution
- Provides concrete implementation for hot-swap operations

** Technology Abstraction Boundary
The adapter manages the boundary between domain concepts and JVM technology:
- Translates domain requests into JVM instrumentation calls
- Handles JVM-specific exceptions and error conditions
- Manages resource lifecycle for instrumentation operations
- Provides performance monitoring and metrics collection

** Infrastructure Complexity Management
The adapter encapsulates complex infrastructure concerns:
- Thread-safe access to JVM instrumentation capabilities
- Validation of JVM limitations and compatibility constraints
- Error handling and recovery for instrumentation failures
- Performance optimization for bytecode manipulation operations

* Class Structure and Responsibilities

** Core Attributes
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/instrumentation/InstrumentationAdapter.java
/**
 * The JVM instrumentation instance
 */
private final Instrumentation instrumentation;

/**
 * Counter for successful redefinitions
 */
private final AtomicLong redefinitionCount;
#+END_SRC

** Constructor and Validation
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/instrumentation/InstrumentationAdapter.java
/**
 * Creates a new InstrumentationAdapter instance
 */
public InstrumentationAdapter(final Instrumentation instrumentation) {
    if (instrumentation == null) {
        throw new IllegalArgumentException("Instrumentation cannot be null");
    }
    
    this.instrumentation = instrumentation;
    this.redefinitionCount = new AtomicLong(0);
}
#+END_SRC

** Interface Implementation Pattern
The adapter follows a strict implementation pattern:
#+BEGIN_SRC java
// Implementation characteristics:
// - Immutable state with final fields
// - Comprehensive parameter validation
// - Thread-safe operation counting
// - Fail-fast error handling
// - Resource cleanup on failures
#+END_SRC

* Class Redefinition Implementation

** Core Redefinition Method
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/instrumentation/InstrumentationAdapter.java
/**
 * Redefines a class with new bytecode
 */
@Override
public void redefineClass(final Class<?> clazz, final byte[] newBytecode) throws Exception {
    if (clazz == null) {
        throw new IllegalArgumentException("Class cannot be null");
    }
    
    if (newBytecode == null || newBytecode.length == 0) {
        throw new IllegalArgumentException("Bytecode cannot be null or empty");
    }

    if (!instrumentation.isRedefineClassesSupported()) {
        throw new UnsupportedOperationException("Class redefinition is not supported by this JVM");
    }

    if (!instrumentation.isModifiableClass(clazz)) {
        throw new UnmodifiableClassException("Class is not modifiable: " + clazz.getName());
    }

    try {
        final ClassDefinition definition = new ClassDefinition(clazz, newBytecode);
        instrumentation.redefineClasses(definition);
        redefinitionCount.incrementAndGet();
        
    } catch (final Exception e) {
        throw new Exception("Failed to redefine class " + clazz.getName() + ": " + e.getMessage(), e);
    }
}
#+END_SRC

** Redefinition Safety Protocols
The implementation enforces multiple safety layers:
#+BEGIN_SRC java
// Safety validation sequence:
// 1. Null parameter validation
// 2. Bytecode content verification
// 3. JVM capability verification
// 4. Class modifiability validation
// 5. Atomic redefinition execution
// 6. Success counter update
// 7. Comprehensive error handling
#+END_SRC

** Error Handling Strategy
The adapter implements sophisticated error handling:
- Parameter validation with descriptive error messages
- JVM capability checking before operation attempts
- Class-specific modifiability verification
- Atomic operation execution with rollback capability
- Detailed exception chaining for debugging

* Capability Discovery Operations

** JVM Feature Detection
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/instrumentation/InstrumentationAdapter.java
/**
 * Checks if class redefinition is supported
 */
@Override
public boolean isRedefineClassesSupported() {
    return instrumentation.isRedefineClassesSupported();
}

/**
 * Checks if retransformation is supported
 */
@Override
public boolean isRetransformClassesSupported() {
    return instrumentation.isRetransformClassesSupported();
}

/**
 * Checks if instrumentation is available
 */
@Override
public boolean isInstrumentationAvailable() {
    return instrumentation != null;
}
#+END_SRC

** Runtime Capability Assessment
The adapter provides dynamic capability assessment:
- Real-time JVM feature detection
- Per-class modifiability verification
- Instrumentation availability validation
- Performance characteristic reporting

** Cross-Platform Compatibility
Capability detection handles JVM implementation variations:
#+BEGIN_SRC java
// JVM compatibility considerations:
// - HotSpot JVM: Full instrumentation support
// - OpenJ9 JVM: Alternative instrumentation features  
// - GraalVM: Limited instrumentation in native mode
// - Android Runtime: Specialized instrumentation APIs
// - Custom JVMs: Vendor-specific capabilities
#+END_SRC

* Runtime Introspection Implementation

** Class Loading Analysis
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/instrumentation/InstrumentationAdapter.java
/**
 * Gets all loaded classes
 */
@Override
public Class<?>[] getAllLoadedClasses() {
    return instrumentation.getAllLoadedClasses();
}

/**
 * Returns the number of loaded classes
 */
public int getLoadedClassCount() {
    return instrumentation.getAllLoadedClasses().length;
}
#+END_SRC

** Memory Analysis Operations
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/instrumentation/InstrumentationAdapter.java
/**
 * Returns the object size for the given object
 */
@Override
public long getObjectSize(final Object objectToSize) {
    if (objectToSize == null) {
        return 0;
    }
    
    return instrumentation.getObjectSize(objectToSize);
}
#+END_SRC

** Performance Monitoring Integration
The adapter provides comprehensive performance monitoring:
#+BEGIN_SRC java
// Performance metrics collected:
// - Redefinition operation count
// - Class loading statistics
// - Memory usage analysis
// - Operation timing data
// - Error rate tracking
#+END_SRC

* Advanced Instrumentation Operations

** Class Transformation Support
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/instrumentation/InstrumentationAdapter.java
/**
 * Retransforms the given classes
 */
public void retransformClasses(final Class<?>... classes) throws Exception {
    if (!instrumentation.isRetransformClassesSupported()) {
        throw new UnsupportedOperationException("Class retransformation is not supported by this JVM");
    }

    try {
        instrumentation.retransformClasses(classes);
    } catch (final Exception e) {
        throw new Exception("Failed to retransform classes: " + e.getMessage(), e);
    }
}
#+END_SRC

** ClassFileTransformer Management
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/instrumentation/InstrumentationAdapter.java
/**
 * Adds a transformer to the instrumentation
 */
public void addTransformer(final java.lang.instrument.ClassFileTransformer transformer, final boolean canRetransform) {
    instrumentation.addTransformer(transformer, canRetransform);
}

/**
 * Removes a transformer from the instrumentation
 */
public boolean removeTransformer(final java.lang.instrument.ClassFileTransformer transformer) {
    return instrumentation.removeTransformer(transformer);
}
#+END_SRC

** Advanced Operations Strategy
The adapter supports sophisticated instrumentation patterns:
- Batch class redefinition for related classes
- Transformer pipeline management for complex modifications
- Conditional transformation based on runtime state
- Performance-optimized retransformation operations

* Thread Safety and Concurrency

** Thread-Safe Design
The adapter ensures thread-safe operation across all methods:
#+BEGIN_SRC java
// Thread safety mechanisms:
// - Immutable state with final fields
// - AtomicLong for concurrent counter updates
// - JVM instrumentation API thread safety guarantees
// - No shared mutable state across operations
#+END_SRC

** Concurrent Operation Support
Multiple threads can safely use the adapter simultaneously:
- Thread-safe redefinition count tracking
- Concurrent class introspection operations
- Parallel capability detection calls
- Synchronized access to JVM instrumentation

** Performance Under Concurrency
The implementation optimizes for concurrent access:
- Lock-free counter increments using AtomicLong
- Read-only operations require no synchronization
- JVM instrumentation handles internal synchronization
- Minimal contention points in adapter logic

* Error Handling and Recovery

** Comprehensive Exception Management
The adapter handles all categories of instrumentation errors:
#+BEGIN_SRC java
// Exception handling categories:
// - IllegalArgumentException: Invalid parameters
// - UnsupportedOperationException: JVM limitations
// - UnmodifiableClassException: Class restrictions
// - RuntimeException: Instrumentation failures
// - OutOfMemoryError: Resource exhaustion
#+END_SRC

** Error Recovery Strategies
The adapter implements multiple recovery strategies:
- Parameter validation prevents invalid operations
- Capability checking avoids unsupported operations
- Atomic operations ensure consistent state
- Detailed error reporting aids debugging

** Instrumentation Failure Handling
Specialized handling for instrumentation-specific failures:
#+BEGIN_SRC java
// Failure scenarios handled:
// - Class redefinition limitations (method signature changes)
// - Security manager restrictions
// - Module system access violations (Java 9+)
// - Memory limitations during redefinition
// - Concurrent modification conflicts
#+END_SRC

* Performance Optimization

** Operation Performance
The adapter optimizes instrumentation operation performance:
- Minimal object allocation during redefinition
- Efficient parameter validation with early returns
- Atomic counter updates without locks
- Direct delegation to JVM instrumentation

** Memory Management
Careful memory management throughout operations:
#+BEGIN_SRC java
// Memory optimization strategies:
// - Reuse of ClassDefinition objects where possible
// - Immediate release of temporary bytecode references
// - Efficient array operations for class listings
// - No caching of volatile JVM state
#+END_SRC

** Scalability Considerations
The adapter scales effectively with application size:
- O(1) operation complexity for individual class redefinition
- Efficient batch operations for multiple classes
- Minimal adapter overhead on JVM instrumentation
- Memory-efficient handling of large class sets

* Integration with ByteHot Architecture

** Port Interface Compliance
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/instrumentation/InstrumentationAdapter.java
/**
 * Returns the port interface this adapter implements
 */
@Override
public Class<InstrumentationPort> adapts() {
    return InstrumentationPort.class;
}
#+END_SRC

** Adapter Pattern Implementation
The adapter follows strict hexagonal architecture principles:
- Clean separation between domain and infrastructure concerns
- No domain logic in infrastructure implementation
- Complete delegation to JVM instrumentation APIs
- Technology-specific error handling and translation

** Dependency Injection Support
The adapter integrates seamlessly with ByteHot's dependency injection:
#+BEGIN_SRC java
// Injection characteristics:
// - Constructor-based dependency injection
// - Immutable state after construction
// - Interface-based dependency resolution
// - No circular dependencies
#+END_SRC

* Testing and Mock Support

** Testability Design
The adapter enables comprehensive testing strategies:
#+BEGIN_SRC java
// Testing support features:
// - Constructor injection enables mock instrumentation
// - All methods are unit testable
// - State inspection through counter methods
// - Exception simulation through mock implementations
#+END_SRC

** Mock Implementation Strategy
Testing uses mock Instrumentation implementations:
#+BEGIN_SRC java
// Mock testing approach:
// - Mockito-based Instrumentation mocks
// - Controlled capability simulation
// - Exception scenario testing
// - Performance characteristic simulation
#+END_SRC

** Integration Testing Support
The adapter supports comprehensive integration testing:
- Real JVM instrumentation testing on test classes
- Performance testing under load
- Concurrency testing with multiple threads
- Error recovery testing with failure injection

* Security Considerations

** Permission Management
Instrumentation operations require careful permission management:
#+BEGIN_SRC java
// Security requirements:
// - Agent attachment permissions
// - Class modification privileges
// - Security manager compliance
// - Module system integration (Java 9+)
#+END_SRC

** Validation and Safety
The adapter enforces security through validation:
- Parameter sanitization prevents malicious input
- Capability verification prevents unauthorized operations
- Class modifiability checks enforce JVM security policies
- Exception handling prevents information leakage

** Audit Trail Integration
All operations contribute to comprehensive audit trails:
- Operation success/failure logging
- Performance metrics collection
- Security event recording
- Debugging information capture

* JVM Version Compatibility

** Cross-Version Support
The adapter maintains compatibility across JVM versions:
#+BEGIN_SRC java
// JVM version compatibility:
// - Java 8+: Basic instrumentation support
// - Java 11+: Enhanced instrumentation features
// - Java 17+: Improved security and performance
// - Java 21+: Latest instrumentation capabilities
#+END_SRC

** Feature Detection Strategy
Dynamic feature detection handles version differences:
- Runtime capability assessment
- Graceful degradation for missing features
- Alternative implementation selection
- Performance optimization based on available features

** Platform-Specific Adaptations
The adapter handles platform-specific variations:
- Different JVM implementation behaviors
- Operating system specific limitations
- Container environment considerations
- Cloud platform compatibility

* Future Evolution and Extensibility

** Extension Points
The adapter design supports future enhancements:
- Additional instrumentation operations
- Enhanced performance monitoring
- Advanced transformation capabilities
- Integration with external tools

** Backward Compatibility Strategy
Evolution maintains backward compatibility:
- Interface stability through versioning
- Graceful feature degradation
- Migration path for deprecated features
- Documentation for breaking changes

** Technology Integration Roadmap
Planned integration with emerging technologies:
#+BEGIN_SRC java
// Future integration targets:
// - Project Loom: Virtual thread compatibility
// - Project Valhalla: Value type instrumentation
// - GraalVM Native Image: Native instrumentation support
// - Project Panama: Foreign function integration
#+END_SRC

* Related Documentation

- [[ports/InstrumentationPort.org][InstrumentationPort]]: Domain interface implemented by this adapter
- [[ByteHot.org][ByteHot]]: Core domain aggregate using instrumentation capabilities
- [[events/ClassRedefinitionSucceeded.org][ClassRedefinitionSucceeded]]: Success event from redefinition operations
- [[events/ClassRedefinitionFailed.org][ClassRedefinitionFailed]]: Failure event from redefinition operations
- [[flows/hot-swap-complete-flow.org][Hot-Swap Complete Flow]]: Complete process using this adapter

* Implementation Notes

** Design Patterns Applied
The adapter leverages several key design patterns:
- **Adapter Pattern**: Clean interface between domain and infrastructure
- **Null Object Pattern**: Safe handling of null parameters
- **Template Method**: Consistent error handling across operations
- **Strategy Pattern**: Different approaches based on JVM capabilities

** Code Quality Standards
The implementation maintains high code quality:
- Comprehensive parameter validation
- Detailed exception messages for debugging
- Consistent error handling patterns
- Clear separation of concerns

The InstrumentationAdapter provides ByteHot's critical infrastructure implementation for JVM instrumentation operations while maintaining architectural purity and enabling safe, performant, and reliable class redefinition across diverse JVM environments and versions.