#+TITLE: RollbackOperation - Intelligent Rollback Operation Classification and Execution Strategy Enumeration
#+AUTHOR: ByteHot Development Team
#+DATE: [2025-06-20]

* Overview

The ~RollbackOperation~ enumeration serves as ByteHot's sophisticated intelligent rollback operation classification and execution strategy system, providing comprehensive rollback type definitions, advanced operation categorization, and intelligent rollback coordination for precise state management and automated restoration intelligence. This critical domain enumeration encapsulates rollback operation types, execution strategies, and sophisticated operation classification mechanisms that enable precise rollback management and automated restoration coordination. As the operation foundation for ByteHot's rollback management system, it enables comprehensive rollback classification while maintaining clean domain boundaries and supporting advanced rollback analytics, operation intelligence, and execution coordination throughout the entire intelligent hot-swap system lifecycle.

* Domain Architecture Role

** Intelligent Rollback Classification and Operation Strategy Foundation
RollbackOperation serves as the comprehensive intelligent rollback classification and operation strategy foundation:
- Provides sophisticated rollback operation classification for state management and restoration coordination
- Enables comprehensive operation categorization and execution strategy management through advanced type analysis
- Supports intelligent rollback coordination and operation automation through domain-driven operation patterns
- Acts as the authoritative foundation for rollback operation classification and strategy-driven coordination

** Enumeration Design and Operation Intelligence Hub
The enumeration serves as the enumeration design and operation intelligence hub:
- Implements sophisticated enumeration patterns with operation encapsulation and behavioral intelligence methods
- Provides comprehensive operation validation and consistency through domain-driven design principles
- Enables operation composition and correlation capabilities for complex rollback execution scenarios
- Supports operation optimization and performance enhancement through efficient enumeration design patterns

** State Management Intelligence and Automated Restoration Hub
The implementation provides state management intelligence and automated restoration capabilities:
- Enables sophisticated state management intelligence through comprehensive operation analysis and restoration coordination
- Supports advanced automated restoration and rollback execution through operation-driven coordination
- Provides foundation for rollback analytics and operational intelligence through operation-driven correlation
- Enables intelligent rollback monitoring and optimization through operation-driven execution and assessment

* Rollback Operation Structure and Behavioral Intelligence

** Core Operation Enumeration Values and Restoration Strategies
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/RollbackOperation.java
/**
 * Complete restoration to a previous snapshot state for comprehensive rollback
 */
FULL_RESTORE("Full restoration to previous state"),

/**
 * Restore only instance state without affecting bytecode for targeted restoration
 */
INSTANCE_STATE_RESTORE("Instance state restoration"),

/**
 * Restore bytecode to previous version for code-level rollback
 */
BYTECODE_RESTORE("Bytecode restoration"),

/**
 * Restore class metadata and structure for structural rollback
 */
METADATA_RESTORE("Class metadata restoration"),

/**
 * Partial rollback of specific changes for selective restoration
 */
PARTIAL_RESTORE("Partial state restoration"),

/**
 * Cascading rollback across multiple related classes for comprehensive coordination
 */
CASCADING_RESTORE("Cascading restoration across related classes");
#+END_SRC

** Operation Description and Identity Management
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/RollbackOperation.java
/**
 * Human-readable description of the rollback operation for operation understanding
 */
private final String description;

/**
 * Creates a new rollback operation with comprehensive description
 * @param description human-readable description for operation documentation and understanding
 */
RollbackOperation(final String description) {
    this.description = description;
}

/**
 * Gets the human-readable description of this rollback operation
 * @return description of the operation with comprehensive explanation
 */
public String getDescription() {
    return description;
}

@Override
public String toString() {
    return description;
}
#+END_SRC

* Operation Intelligence and Impact Analysis Operations

** Instance State Impact and Restoration Scope Analysis
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/RollbackOperation.java
/**
 * Returns whether this operation affects instance state for impact analysis
 * @return true if instance state is affected during operation execution
 */
public boolean affectsInstanceState() {
    return this == FULL_RESTORE || this == INSTANCE_STATE_RESTORE || this == PARTIAL_RESTORE;
}
#+END_SRC

** Bytecode Impact and Code Restoration Analysis
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/RollbackOperation.java
/**
 * Returns whether this operation affects bytecode for code impact analysis
 * @return true if bytecode is affected during operation execution
 */
public boolean affectsBytecode() {
    return this == FULL_RESTORE || this == BYTECODE_RESTORE || this == PARTIAL_RESTORE;
}
#+END_SRC

** Complexity Assessment and Resource Requirement Analysis
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/RollbackOperation.java
/**
 * Returns whether this operation is complex and involves multiple components
 * @return true if operation is complex and requires advanced coordination
 */
public boolean isComplex() {
    return this == FULL_RESTORE || this == CASCADING_RESTORE || this == PARTIAL_RESTORE;
}
#+END_SRC

** Enhanced Operation Intelligence and Advanced Analysis Operations
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/RollbackOperation.java
/**
 * Returns whether this operation affects class metadata and structure
 * @return true if metadata is affected during operation execution
 */
public boolean affectsMetadata() {
    return this == FULL_RESTORE || this == METADATA_RESTORE || this == PARTIAL_RESTORE;
}

/**
 * Returns whether this operation requires multiple classes coordination
 * @return true if operation involves multiple classes and cascading effects
 */
public boolean requiresMultiClassCoordination() {
    return this == CASCADING_RESTORE || this == FULL_RESTORE;
}

/**
 * Returns whether this operation is atomic and can be executed independently
 * @return true if operation can be executed without dependencies
 */
public boolean isAtomic() {
    return this == INSTANCE_STATE_RESTORE || this == BYTECODE_RESTORE || this == METADATA_RESTORE;
}

/**
 * Gets the risk level associated with this operation for risk assessment
 * @return risk level from LOW to HIGH for operation planning
 */
@NonNull
public RollbackOperationRisk getRiskLevel() {
    switch (this) {
        case INSTANCE_STATE_RESTORE:
        case METADATA_RESTORE:
            return RollbackOperationRisk.LOW;
        case BYTECODE_RESTORE:
        case PARTIAL_RESTORE:
            return RollbackOperationRisk.MEDIUM;
        case FULL_RESTORE:
        case CASCADING_RESTORE:
            return RollbackOperationRisk.HIGH;
        default:
            return RollbackOperationRisk.MEDIUM;
    }
}

/**
 * Gets the complexity level of executing this operation
 * @return complexity level for operation execution planning
 */
@NonNull
public RollbackOperationComplexity getComplexityLevel() {
    switch (this) {
        case INSTANCE_STATE_RESTORE:
        case BYTECODE_RESTORE:
        case METADATA_RESTORE:
            return RollbackOperationComplexity.LOW;
        case PARTIAL_RESTORE:
            return RollbackOperationComplexity.MEDIUM;
        case FULL_RESTORE:
        case CASCADING_RESTORE:
            return RollbackOperationComplexity.HIGH;
        default:
            return RollbackOperationComplexity.MEDIUM;
    }
}

/**
 * Gets the expected performance impact of this operation
 * @return performance impact assessment for operation execution
 */
@NonNull
public RollbackOperationPerformance getPerformanceImpact() {
    switch (this) {
        case INSTANCE_STATE_RESTORE:
        case METADATA_RESTORE:
            return RollbackOperationPerformance.FAST;
        case BYTECODE_RESTORE:
        case PARTIAL_RESTORE:
            return RollbackOperationPerformance.MEDIUM;
        case FULL_RESTORE:
        case CASCADING_RESTORE:
            return RollbackOperationPerformance.SLOW;
        default:
            return RollbackOperationPerformance.MEDIUM;
    }
}

/**
 * Gets the scope of impact for this operation
 * @return impact scope for operation planning and coordination
 */
@NonNull
public RollbackOperationScope getImpactScope() {
    switch (this) {
        case INSTANCE_STATE_RESTORE:
        case BYTECODE_RESTORE:
        case METADATA_RESTORE:
            return RollbackOperationScope.SINGLE_CLASS;
        case PARTIAL_RESTORE:
            return RollbackOperationScope.SELECTIVE_COMPONENTS;
        case FULL_RESTORE:
            return RollbackOperationScope.COMPLETE_STATE;
        case CASCADING_RESTORE:
            return RollbackOperationScope.MULTIPLE_CLASSES;
        default:
            return RollbackOperationScope.SINGLE_CLASS;
    }
}

/**
 * Determines if this operation is compatible with another operation for composition
 * @param other the other operation for compatibility analysis
 * @return true if operations can be combined or executed together
 */
public boolean isCompatibleWith(@NonNull final RollbackOperation other) {
    // Check for conflicting operations
    if (this == FULL_RESTORE || other == FULL_RESTORE) {
        return this == other; // Full restore conflicts with other partial operations
    }
    
    // Check for complementary operations
    if ((this == INSTANCE_STATE_RESTORE && other == BYTECODE_RESTORE) ||
        (this == BYTECODE_RESTORE && other == INSTANCE_STATE_RESTORE)) {
        return true; // These can be combined
    }
    
    // Cascading operations conflict with others
    if (this == CASCADING_RESTORE || other == CASCADING_RESTORE) {
        return this == other;
    }
    
    return true; // Most operations are compatible
}

/**
 * Gets required resources for executing this operation
 * @return list of required resources for operation planning
 */
@NonNull
public java.util.List<String> getRequiredResources() {
    java.util.List<String> resources = new java.util.ArrayList<>();
    
    if (affectsInstanceState()) {
        resources.add("Instance state snapshots");
        resources.add("Memory for instance restoration");
    }
    
    if (affectsBytecode()) {
        resources.add("Bytecode snapshots");
        resources.add("Class loader coordination");
    }
    
    if (affectsMetadata()) {
        resources.add("Metadata snapshots");
        resources.add("Class structure validation");
    }
    
    if (requiresMultiClassCoordination()) {
        resources.add("Inter-class dependency mapping");
        resources.add("Coordination synchronization");
    }
    
    return resources;
}

/**
 * Gets prerequisites that must be satisfied before executing this operation
 * @return list of prerequisites for operation validation
 */
@NonNull
public java.util.List<String> getPrerequisites() {
    java.util.List<String> prerequisites = new java.util.ArrayList<>();
    
    switch (this) {
        case FULL_RESTORE:
            prerequisites.add("Complete snapshot available");
            prerequisites.add("All dependent classes identified");
            prerequisites.add("Resource locks acquired");
            break;
        case INSTANCE_STATE_RESTORE:
            prerequisites.add("Instance state snapshot available");
            prerequisites.add("Instance references validated");
            break;
        case BYTECODE_RESTORE:
            prerequisites.add("Bytecode snapshot available");
            prerequisites.add("Class loader compatibility verified");
            break;
        case METADATA_RESTORE:
            prerequisites.add("Metadata snapshot available");
            prerequisites.add("Structure compatibility verified");
            break;
        case PARTIAL_RESTORE:
            prerequisites.add("Selective snapshots available");
            prerequisites.add("Restoration scope defined");
            break;
        case CASCADING_RESTORE:
            prerequisites.add("Dependency graph available");
            prerequisites.add("All related classes accessible");
            prerequisites.add("Coordination locks acquired");
            break;
    }
    
    return prerequisites;
}

/**
 * Creates an operation recommendation based on rollback requirements
 * @param requirements the rollback requirements for operation recommendation
 * @return recommended operation with reasoning
 */
@NonNull
public static OperationRecommendation recommendOperation(@NonNull final RollbackRequirements requirements) {
    RollbackOperation recommended;
    String reasoning;
    
    if (requirements.requiresCompleteRestoration()) {
        recommended = FULL_RESTORE;
        reasoning = "Complete restoration required for comprehensive rollback";
    } else if (requirements.requiresMultiClassCoordination()) {
        recommended = CASCADING_RESTORE;
        reasoning = "Multiple classes affected, cascading restore needed";
    } else if (requirements.isInstanceStateOnly()) {
        recommended = INSTANCE_STATE_RESTORE;
        reasoning = "Only instance state needs restoration";
    } else if (requirements.isBytecodeOnly()) {
        recommended = BYTECODE_RESTORE;
        reasoning = "Only bytecode needs restoration";
    } else if (requirements.isMetadataOnly()) {
        recommended = METADATA_RESTORE;
        reasoning = "Only metadata needs restoration";
    } else {
        recommended = PARTIAL_RESTORE;
        reasoning = "Selective restoration based on specific requirements";
    }
    
    return OperationRecommendation.builder()
        .operation(recommended)
        .reasoning(reasoning)
        .confidence(calculateConfidence(requirements, recommended))
        .alternativeOperations(getAlternativeOperations(recommended))
        .estimatedDuration(estimateExecutionTime(recommended, requirements))
        .build();
}

/**
 * Calculates confidence level for operation recommendation
 * @param requirements the rollback requirements for confidence calculation
 * @param operation the recommended operation for confidence assessment
 * @return confidence level from 0.0 to 1.0
 */
private static double calculateConfidence(@NonNull final RollbackRequirements requirements,
                                        @NonNull final RollbackOperation operation) {
    double confidence = 0.5; // Base confidence
    
    if (requirements.hasCompleteSnapshots() && operation.isComplex()) {
        confidence += 0.3;
    }
    
    if (requirements.isLowRisk() && operation.getRiskLevel() == RollbackOperationRisk.LOW) {
        confidence += 0.2;
    }
    
    if (requirements.requiresFastExecution() && operation.getPerformanceImpact() == RollbackOperationPerformance.FAST) {
        confidence += 0.2;
    }
    
    return Math.max(0.0, Math.min(1.0, confidence));
}

/**
 * Gets alternative operations for the given operation
 * @param operation the primary operation for alternative analysis
 * @return list of alternative operations
 */
@NonNull
private static java.util.List<RollbackOperation> getAlternativeOperations(@NonNull final RollbackOperation operation) {
    java.util.List<RollbackOperation> alternatives = new java.util.ArrayList<>();
    
    switch (operation) {
        case FULL_RESTORE:
            alternatives.add(PARTIAL_RESTORE);
            alternatives.add(CASCADING_RESTORE);
            break;
        case INSTANCE_STATE_RESTORE:
            alternatives.add(PARTIAL_RESTORE);
            alternatives.add(FULL_RESTORE);
            break;
        case BYTECODE_RESTORE:
            alternatives.add(PARTIAL_RESTORE);
            alternatives.add(FULL_RESTORE);
            break;
        case METADATA_RESTORE:
            alternatives.add(PARTIAL_RESTORE);
            alternatives.add(FULL_RESTORE);
            break;
        case PARTIAL_RESTORE:
            alternatives.add(FULL_RESTORE);
            break;
        case CASCADING_RESTORE:
            alternatives.add(FULL_RESTORE);
            alternatives.add(PARTIAL_RESTORE);
            break;
    }
    
    return alternatives;
}

/**
 * Estimates execution time for the operation based on requirements
 * @param operation the operation for time estimation
 * @param requirements the requirements affecting execution time
 * @return estimated execution duration
 */
@NonNull
private static java.time.Duration estimateExecutionTime(@NonNull final RollbackOperation operation,
                                                       @NonNull final RollbackRequirements requirements) {
    long baseMillis = switch (operation) {
        case INSTANCE_STATE_RESTORE, METADATA_RESTORE -> 100;
        case BYTECODE_RESTORE -> 200;
        case PARTIAL_RESTORE -> 300;
        case FULL_RESTORE -> 500;
        case CASCADING_RESTORE -> 1000;
    };
    
    // Adjust based on requirements
    if (requirements.getComplexityFactor() > 1.0) {
        baseMillis *= requirements.getComplexityFactor();
    }
    
    return java.time.Duration.ofMillis(baseMillis);
}
#+END_SRC

** Operation Analytics and Assessment Value Objects
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/RollbackOperation.java
/**
 * Risk levels for rollback operations
 */
public enum RollbackOperationRisk {
    LOW("Minimal risk of side effects or failures"),
    MEDIUM("Moderate risk requiring careful planning"),
    HIGH("High risk of complex side effects or failures");
    
    private final String description;
    
    RollbackOperationRisk(String description) {
        this.description = description;
    }
    
    public String getDescription() {
        return description;
    }
}

/**
 * Complexity levels for rollback operation execution
 */
public enum RollbackOperationComplexity {
    LOW("Simple operation with straightforward execution"),
    MEDIUM("Moderate complexity requiring coordination"),
    HIGH("Complex operation requiring sophisticated orchestration");
    
    private final String description;
    
    RollbackOperationComplexity(String description) {
        this.description = description;
    }
    
    public String getDescription() {
        return description;
    }
}

/**
 * Performance impact levels for rollback operations
 */
public enum RollbackOperationPerformance {
    FAST("Minimal performance impact"),
    MEDIUM("Moderate performance impact"),
    SLOW("Significant performance impact");
    
    private final String description;
    
    RollbackOperationPerformance(String description) {
        this.description = description;
    }
    
    public String getDescription() {
        return description;
    }
}

/**
 * Scope of impact for rollback operations
 */
public enum RollbackOperationScope {
    SINGLE_CLASS("Affects only one class"),
    SELECTIVE_COMPONENTS("Affects specific components"),
    COMPLETE_STATE("Affects complete state"),
    MULTIPLE_CLASSES("Affects multiple related classes");
    
    private final String description;
    
    RollbackOperationScope(String description) {
        this.description = description;
    }
    
    public String getDescription() {
        return description;
    }
}

/**
 * Operation recommendation with analysis and alternatives
 */
@lombok.Builder
@lombok.EqualsAndHashCode
@lombok.ToString
@lombok.Getter
public static class OperationRecommendation {
    /**
     * Recommended rollback operation
     */
    private final RollbackOperation operation;
    
    /**
     * Reasoning for the recommendation
     */
    private final String reasoning;
    
    /**
     * Confidence level (0.0 to 1.0)
     */
    private final double confidence;
    
    /**
     * Alternative operations to consider
     */
    private final java.util.List<RollbackOperation> alternativeOperations;
    
    /**
     * Estimated execution duration
     */
    private final java.time.Duration estimatedDuration;
}

/**
 * Rollback requirements for operation recommendation
 */
@lombok.Builder
@lombok.EqualsAndHashCode
@lombok.ToString
@lombok.Getter
public static class RollbackRequirements {
    /**
     * Whether complete restoration is required
     */
    private final boolean requiresCompleteRestoration;
    
    /**
     * Whether multi-class coordination is needed
     */
    private final boolean requiresMultiClassCoordination;
    
    /**
     * Whether only instance state restoration is needed
     */
    private final boolean isInstanceStateOnly;
    
    /**
     * Whether only bytecode restoration is needed
     */
    private final boolean isBytecodeOnly;
    
    /**
     * Whether only metadata restoration is needed
     */
    private final boolean isMetadataOnly;
    
    /**
     * Whether complete snapshots are available
     */
    private final boolean hasCompleteSnapshots;
    
    /**
     * Whether this is a low-risk operation
     */
    private final boolean isLowRisk;
    
    /**
     * Whether fast execution is required
     */
    private final boolean requiresFastExecution;
    
    /**
     * Complexity factor affecting execution time
     */
    private final double complexityFactor;
}
#+END_SRC

* Testing and Validation Strategies

** Operation Classification Testing
#+begin_src java
@Test
void shouldClassifyOperationsCorrectly() {
    // Given: Different rollback operations
    RollbackOperation fullRestore = RollbackOperation.FULL_RESTORE;
    RollbackOperation instanceRestore = RollbackOperation.INSTANCE_STATE_RESTORE;
    RollbackOperation bytecodeRestore = RollbackOperation.BYTECODE_RESTORE;
    RollbackOperation cascadingRestore = RollbackOperation.CASCADING_RESTORE;
    
    // When: Analyzing operation characteristics
    assertThat(fullRestore.affectsInstanceState()).isTrue();
    assertThat(fullRestore.affectsBytecode()).isTrue();
    assertThat(fullRestore.isComplex()).isTrue();
    
    assertThat(instanceRestore.affectsInstanceState()).isTrue();
    assertThat(instanceRestore.affectsBytecode()).isFalse();
    assertThat(instanceRestore.isAtomic()).isTrue();
    
    // Then: Should provide accurate classification
    assertThat(fullRestore.getRiskLevel()).isEqualTo(RollbackOperationRisk.HIGH);
    assertThat(instanceRestore.getRiskLevel()).isEqualTo(RollbackOperationRisk.LOW);
    assertThat(cascadingRestore.requiresMultiClassCoordination()).isTrue();
}
#+end_src

** Operation Compatibility Testing
#+begin_src java
@Test
void shouldAnalyzeOperationCompatibility() {
    // Given: Various operation combinations
    RollbackOperation instanceRestore = RollbackOperation.INSTANCE_STATE_RESTORE;
    RollbackOperation bytecodeRestore = RollbackOperation.BYTECODE_RESTORE;
    RollbackOperation fullRestore = RollbackOperation.FULL_RESTORE;
    
    // When: Testing compatibility
    assertThat(instanceRestore.isCompatibleWith(bytecodeRestore)).isTrue(); // Complementary
    assertThat(fullRestore.isCompatibleWith(instanceRestore)).isFalse(); // Conflicting
    assertThat(instanceRestore.isCompatibleWith(instanceRestore)).isTrue(); // Self-compatible
}
#+end_src

** Operation Recommendation Testing
#+begin_src java
@Test
void shouldRecommendAppropriateOperations() {
    // Given: Different rollback scenarios
    RollbackRequirements simpleReq = RollbackRequirements.builder()
        .isInstanceStateOnly(true)
        .isLowRisk(true)
        .requiresFastExecution(true)
        .build();
    
    RollbackRequirements complexReq = RollbackRequirements.builder()
        .requiresCompleteRestoration(true)
        .requiresMultiClassCoordination(false)
        .hasCompleteSnapshots(true)
        .build();
    
    // When: Getting recommendations
    OperationRecommendation simpleRec = RollbackOperation.recommendOperation(simpleReq);
    OperationRecommendation complexRec = RollbackOperation.recommendOperation(complexReq);
    
    // Then: Should recommend appropriate operations
    assertThat(simpleRec.getOperation()).isEqualTo(RollbackOperation.INSTANCE_STATE_RESTORE);
    assertThat(complexRec.getOperation()).isEqualTo(RollbackOperation.FULL_RESTORE);
    assertThat(simpleRec.getConfidence()).isGreaterThan(0.5);
}
#+end_src

* Related Documentation

- [[CleanupResult.org][CleanupResult]]: Results from rollback cleanup operations
- [[ConflictResolutionStrategy.org][ConflictResolutionStrategy]]: Strategies for resolving rollback conflicts
- [[RollbackManager.org][RollbackManager]]: Manager coordinating rollback operations
- [[SnapshotManager.org][SnapshotManager]]: Manager providing snapshots for rollback
- [[../flows/rollback-execution-flow.org][Rollback Execution Flow]]: Flow orchestrating rollback operations

* Implementation Notes

** Design Patterns Applied
The enumeration leverages several sophisticated design patterns:
- **Strategy Pattern**: Different rollback operation strategies with behavioral intelligence
- **Factory Method Pattern**: Operation recommendation based on rollback requirements
- **State Pattern**: Operation state analysis and impact assessment
- **Template Method Pattern**: Common operation analysis with specialized behavior

** Domain-Driven Design Principles
The implementation follows strict DDD principles:
- **Rich Enumerations**: Comprehensive behavior and intelligence beyond simple constants
- **Domain Intelligence**: Built-in domain intelligence for operation analysis and recommendation
- **Infrastructure Independence**: Pure domain logic without infrastructure technology dependencies
- **Ubiquitous Language**: Clear, business-focused naming and comprehensive documentation

** Future Enhancement Opportunities
The design supports future enhancements:
- **Machine Learning Operations**: AI-driven rollback operation optimization and recommendation
- **Dynamic Operation Selection**: Runtime operation adaptation based on system state
- **Advanced Rollback Orchestration**: Sophisticated rollback workflow coordination and optimization
- **Enterprise Rollback Policies**: Enterprise-grade rollback policies and compliance management

The RollbackOperation enumeration provides ByteHot's essential intelligent rollback operation classification foundation while maintaining comprehensive operation intelligence capabilities, sophisticated execution strategies, and extensibility for advanced rollback coordination scenarios throughout the entire intelligent hot-swap system lifecycle.