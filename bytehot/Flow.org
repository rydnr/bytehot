#+TITLE: Flow - Domain Event Flow Value Object
#+AUTHOR: ByteHot Development Team
#+DATE: [2025-06-19]

* Overview

The ~Flow~ value object represents a discovered pattern of domain events that form a meaningful business process within the ByteHot system. As an immutable data structure, it encapsulates the metadata and characteristics of event sequences that have been identified through the flow detection capabilities, enabling self-documenting system behavior and process discovery.

* Domain Role and Significance

** Value Object Characteristics
As a Value Object in Domain-Driven Design, Flow exhibits the following essential characteristics:

- *Immutability*: Once created, a Flow cannot be modified
- *Value Equality*: Two flows are equal if all their properties are equal
- *Side-Effect Free*: Operations on flows produce new instances rather than modifying existing ones
- *Self-Validation*: Ensures internal consistency and validity upon creation

** Business Meaning
A Flow represents the discovery that "a sequence of domain events consistently occurs together in a specific pattern, representing a meaningful business process that can be documented, analyzed, and optimized."

* Flow Structure and Properties

** Core Identification
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/Flow.java
/**
 * Unique identifier for the flow.
 */
FlowId flowId;

/**
 * Human-readable name for the flow.
 */
String name;

/**
 * Description of what this flow represents.
 */
String description;
#+END_SRC

** Event Sequence Definition
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/Flow.java
/**
 * Sequence of event types that form this flow.
 */
List<Class<? extends DomainEvent>> eventSequence;

/**
 * Minimum number of events required to identify this flow.
 */
int minimumEventCount;

/**
 * Maximum time window for events to be considered part of the same flow.
 */
Duration maximumTimeWindow;
#+END_SRC

** Quality and Reliability Metrics
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/Flow.java
/**
 * Confidence level for flow detection (0.0 to 1.0).
 */
double confidence;

/**
 * Optional conditions that must be met for flow detection.
 */
Optional<FlowCondition> conditions;
#+END_SRC

* Flow Identification and Naming

** FlowId Design
The FlowId provides unique identification across the entire system:

#+BEGIN_SRC java
public class FlowId extends AbstractId {
    // Inherits UUID-based unique identification
    // Provides type-safe flow referencing
    // Enables flow correlation and lookup
}
#+END_SRC

** Naming Conventions
Flow names follow specific patterns for consistency:
- *Hot-Swap Complete Flow*: End-to-end hot-swap operation
- *User Session Flow*: User authentication and session management  
- *Error Recovery Flow*: System error detection and recovery
- *File Change Detection Flow*: File monitoring and change processing

* Event Sequence Patterns

** Linear Event Chains
Simple sequential flows where events follow a strict order:

#+BEGIN_SRC java
// Example: Hot-Swap Complete Flow
List<Class<? extends DomainEvent>> sequence = List.of(
    ClassFileChanged.class,
    ClassMetadataExtracted.class,
    BytecodeValidated.class,
    HotSwapRequested.class,
    ClassRedefinitionSucceeded.class,
    InstancesUpdated.class
);
#+END_SRC

** Parallel Event Patterns
Flows that may contain parallel or alternative paths:

#+BEGIN_SRC java
// Example: Error Recovery Flow with alternatives
List<Class<? extends DomainEvent>> errorSequence = List.of(
    ClassRedefinitionFailed.class,
    ErrorRecoveryInitiated.class,
    RollbackRequested.class,     // OR RetryRequested.class
    SystemRecovered.class
);
#+END_SRC

** Conditional Event Flows
Flows where certain events only occur under specific conditions:

#+BEGIN_SRC java
// Example: User Session Flow with optional authentication
List<Class<? extends DomainEvent>> userSequence = List.of(
    UserDiscoveryRequested.class,
    UserAuthenticated.class,         // Only if authentication required
    UserSessionStarted.class
);
#+END_SRC

* Temporal Characteristics

** Time Window Constraints
Flows define temporal boundaries for event grouping:

- *Maximum Time Window*: Events outside this window are not considered part of the same flow instance
- *Minimum Event Count*: Ensures statistical significance before pattern recognition
- *Confidence Threshold*: Quality gate for pattern reliability

** Temporal Analysis
#+BEGIN_SRC java
public boolean isWithinTimeWindow(List<VersionedDomainEvent> events) {
    if (events.size() < minimumEventCount) {
        return false;
    }
    
    Instant firstEvent = events.get(0).getTimestamp();
    Instant lastEvent = events.get(events.size() - 1).getTimestamp();
    Duration actualDuration = Duration.between(firstEvent, lastEvent);
    
    return actualDuration.compareTo(maximumTimeWindow) <= 0;
}
#+END_SRC

* Confidence and Quality Metrics

** Confidence Calculation
Confidence represents the statistical reliability of flow detection:

- *1.0*: Perfect match - all expected events present in exact order
- *0.8-0.9*: High confidence - minor variations or optional events missing
- *0.6-0.7*: Medium confidence - pattern present but with some noise
- *Below 0.6*: Low confidence - pattern uncertain or incomplete

** Quality Factors Influencing Confidence
- Event sequence completeness
- Temporal consistency within time windows
- Frequency of pattern occurrence
- Absence of contradictory events
- Historical validation accuracy

* Flow Conditions and Constraints

** FlowCondition Interface
Optional conditions that must be satisfied for flow recognition:

#+BEGIN_SRC java
public interface FlowCondition {
    /**
     * Evaluates whether the condition is met for the given event sequence.
     */
    boolean evaluate(List<VersionedDomainEvent> events);
    
    /**
     * Provides human-readable description of the condition.
     */
    String getDescription();
}
#+END_SRC

** Common Flow Conditions
- *User-Specific*: Flow only applies to certain users
- *Environment-Specific*: Different patterns in development vs. production
- *Time-Based*: Seasonal or time-dependent patterns
- *State-Dependent*: Flows that require specific system state

* Flow Creation and Builder Pattern

** Builder Pattern Implementation
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/Flow.java
public static FlowBuilder builder() {
    return new FlowBuilder();
}

public static class FlowBuilder {
    private FlowId flowId;
    private String name;
    private String description;
    private List<Class<? extends DomainEvent>> eventSequence;
    private int minimumEventCount;
    private Duration maximumTimeWindow;
    private double confidence;
    private Optional<FlowCondition> conditions;
    
    public FlowBuilder flowId(FlowId flowId) {
        this.flowId = flowId;
        return this;
    }
    
    public FlowBuilder name(String name) {
        this.name = name;
        return this;
    }
    
    // Additional builder methods...
    
    public Flow build() {
        validate();
        return new Flow(flowId, name, description, eventSequence, 
                       minimumEventCount, maximumTimeWindow, confidence, conditions);
    }
    
    private void validate() {
        if (flowId == null) throw new IllegalArgumentException("FlowId is required");
        if (name == null || name.trim().isEmpty()) 
            throw new IllegalArgumentException("Name is required");
        if (eventSequence == null || eventSequence.isEmpty())
            throw new IllegalArgumentException("Event sequence cannot be empty");
        if (confidence < 0.0 || confidence > 1.0)
            throw new IllegalArgumentException("Confidence must be between 0.0 and 1.0");
        if (minimumEventCount < 1)
            throw new IllegalArgumentException("Minimum event count must be positive");
        if (maximumTimeWindow == null || maximumTimeWindow.isNegative())
            throw new IllegalArgumentException("Maximum time window must be positive");
    }
}
#+END_SRC

* Flow Comparison and Equality

** Value Object Equality
Flows are compared based on their complete value, not identity:

#+BEGIN_SRC java
@Override
public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || getClass() != obj.getClass()) return false;
    
    Flow flow = (Flow) obj;
    return minimumEventCount == flow.minimumEventCount &&
           Double.compare(flow.confidence, confidence) == 0 &&
           Objects.equals(flowId, flow.flowId) &&
           Objects.equals(name, flow.name) &&
           Objects.equals(description, flow.description) &&
           Objects.equals(eventSequence, flow.eventSequence) &&
           Objects.equals(maximumTimeWindow, flow.maximumTimeWindow) &&
           Objects.equals(conditions, flow.conditions);
}
#+END_SRC

** Hash Code Implementation
Consistent with equality semantics:

#+BEGIN_SRC java
@Override
public int hashCode() {
    return Objects.hash(flowId, name, description, eventSequence, 
                       minimumEventCount, maximumTimeWindow, confidence, conditions);
}
#+END_SRC

* Flow Utilization Patterns

** Pattern Matching
Using flows to identify active patterns in event streams:

#+BEGIN_SRC java
public boolean matches(List<VersionedDomainEvent> events) {
    // Check minimum event count
    if (events.size() < minimumEventCount) {
        return false;
    }
    
    // Check time window constraint
    if (!isWithinTimeWindow(events)) {
        return false;
    }
    
    // Check event sequence pattern
    if (!matchesEventSequence(events)) {
        return false;
    }
    
    // Evaluate optional conditions
    return conditions.map(condition -> condition.evaluate(events))
                    .orElse(true);
}
#+END_SRC

** Flow Documentation Generation
Automatic documentation from flow definitions:

#+BEGIN_SRC java
public String generateDocumentation() {
    StringBuilder doc = new StringBuilder();
    doc.append("# ").append(name).append("\n\n");
    doc.append("## Description\n");
    doc.append(description).append("\n\n");
    
    doc.append("## Event Sequence\n");
    for (int i = 0; i < eventSequence.size(); i++) {
        doc.append(i + 1).append(". ")
           .append(eventSequence.get(i).getSimpleName())
           .append("\n");
    }
    
    doc.append("\n## Flow Characteristics\n");
    doc.append("- **Minimum Events:** ").append(minimumEventCount).append("\n");
    doc.append("- **Time Window:** ").append(maximumTimeWindow).append("\n");
    doc.append("- **Confidence:** ").append(confidence * 100).append("%\n");
    
    return doc.toString();
}
#+END_SRC

* Predefined Flow Patterns

** Hot-Swap Complete Flow
#+BEGIN_SRC java
public static final Flow HOT_SWAP_COMPLETE_FLOW = Flow.builder()
    .flowId(FlowId.of("hot-swap-complete"))
    .name("Hot-Swap Complete Flow")
    .description("Complete hot-swap operation from file change to instance update")
    .eventSequence(List.of(
        ClassFileChanged.class,
        ClassMetadataExtracted.class,
        BytecodeValidated.class,
        HotSwapRequested.class,
        ClassRedefinitionSucceeded.class,
        InstancesUpdated.class
    ))
    .minimumEventCount(4)
    .maximumTimeWindow(Duration.ofSeconds(30))
    .confidence(0.95)
    .build();
#+END_SRC

** User Session Flow
#+BEGIN_SRC java
public static final Flow USER_SESSION_FLOW = Flow.builder()
    .flowId(FlowId.of("user-session"))
    .name("User Session Flow")
    .description("User authentication and session management")
    .eventSequence(List.of(
        UserDiscoveryRequested.class,
        UserAuthenticated.class,
        UserSessionStarted.class
    ))
    .minimumEventCount(2)
    .maximumTimeWindow(Duration.ofMinutes(5))
    .confidence(0.90)
    .build();
#+END_SRC

* Testing and Validation

** Flow Creation Testing
#+BEGIN_SRC java
@Test
void shouldCreateValidFlow() {
    // Given: Valid flow parameters
    FlowId flowId = FlowId.of("test-flow");
    List<Class<? extends DomainEvent>> events = List.of(
        ClassFileChanged.class,
        BytecodeValidated.class
    );
    
    // When: Flow is created
    Flow flow = Flow.builder()
        .flowId(flowId)
        .name("Test Flow")
        .description("Test flow description")
        .eventSequence(events)
        .minimumEventCount(2)
        .maximumTimeWindow(Duration.ofSeconds(10))
        .confidence(0.8)
        .build();
    
    // Then: Flow should be valid
    assertThat(flow.getFlowId()).isEqualTo(flowId);
    assertThat(flow.getName()).isEqualTo("Test Flow");
    assertThat(flow.getEventSequence()).isEqualTo(events);
}
#+END_SRC

** Pattern Matching Testing
#+BEGIN_SRC java
@Test
void shouldMatchEventSequence() {
    // Given: Flow pattern and matching events
    Flow flow = createTestFlow();
    List<VersionedDomainEvent> events = createMatchingEventSequence();
    
    // When: Pattern matching is performed
    boolean matches = flow.matches(events);
    
    // Then: Should match successfully
    assertThat(matches).isTrue();
}
#+END_SRC

* Performance and Optimization

** Memory Efficiency
- Immutable event sequence lists prevent unnecessary copying
- Lazy evaluation of optional conditions
- Efficient hash code computation for caching

** Matching Performance
- Early termination for obvious mismatches
- Optimized event type comparison
- Cached validation results where appropriate

* Related Documentation

- [[./FlowDetector.org][FlowDetector]]: Flow discovery aggregate
- [[./FlowId.org][FlowId]]: Flow identification value object
- [[./FlowCondition.org][FlowCondition]]: Flow condition interface
- [[./events/FlowDiscovered.org][FlowDiscovered]]: Flow discovery event
- [[../flows/flow-detection-process.org][Flow Detection Process]]: Complete flow detection workflow

* Future Evolution

** Anticipated Enhancements
- Machine learning integration for pattern confidence calculation
- Complex conditional logic support
- Multi-dimensional flow analysis
- Real-time flow adaptation based on system behavior

** Extensibility Points
- Custom flow condition implementations
- Pluggable confidence calculation algorithms
- Alternative event sequence matching strategies
- Integration with external process modeling tools

The Flow value object serves as the foundation for ByteHot's self-documenting capabilities, transforming discovered event patterns into meaningful business process documentation that evolves with the system's actual behavior.