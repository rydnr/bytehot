#+TITLE: ByteHot IntelliJ IDEA Plugin User Guide
#+AUTHOR: ByteHot Team
#+DATE: 2025-06-27

* Overview

The ByteHot IntelliJ IDEA Plugin provides seamless integration between IntelliJ IDEA and ByteHot's hot-swapping capabilities. This plugin offers visual feedback, easy configuration, and automatic hot-swap triggering right from your IDE.

** Key Features

- Visual hot-swap status indicators
- Integrated tool window with real-time monitoring
- Automatic detection of code changes
- One-click agent connection management
- Project-specific configuration
- Live hot-swap logs and notifications
- Integration with IntelliJ's build system

* Installation

** Prerequisites

- IntelliJ IDEA 2023.1 or higher (Community or Ultimate)
- Java 17 or higher
- ByteHot agent running in your application

** Installation Methods

*** Method 1: JetBrains Marketplace (Future Release)

1. Open IntelliJ IDEA
2. Go to =File → Settings → Plugins= (or =IntelliJ IDEA → Preferences → Plugins= on macOS)
3. Click the =Marketplace= tab
4. Search for "ByteHot"
5. Click =Install= next to the ByteHot plugin
6. Restart IntelliJ IDEA when prompted

*** Method 2: Development Build (Current)

Build and install the plugin from source:

#+BEGIN_SRC bash
# Clone the ByteHot repository
git clone https://github.com/rydnr/bytehot.git
cd bytehot

# Build the IntelliJ plugin
cd bytehot-intellij-plugin
mvn package

# The plugin JAR will be in target/
ls target/bytehot-intellij-plugin-*.jar
#+END_SRC

Manual installation:
1. Open IntelliJ IDEA
2. Go to =File → Settings → Plugins=
3. Click the gear icon and select =Install Plugin from Disk=
4. Select =target/bytehot-intellij-plugin-latest-SNAPSHOT.jar=
5. Restart IntelliJ IDEA

*** Method 3: GitHub Releases (Future)

Download pre-built plugin JARs from GitHub Releases when available.

* Getting Started

** Quick Start with Live Mode Action

The ByteHot IntelliJ Plugin provides zero-configuration live mode activation:

1. **Install the plugin** (see Installation section above)

2. **One-click activation**:
   - Look for the "Start Live Mode" button in the toolbar
   - Or use =Tools → ByteHot → Start Live Mode= from the menu
   - The plugin automatically detects your project structure and main class

3. **Watch the magic**:
   - Plugin automatically discovers the ByteHot agent
   - Launches your application with agent attached
   - Provides visual feedback for hot-swap operations

** What Happens Automatically

When you click "Start Live Mode":

1. *Project Analysis*: Automatically scans your project to detect:
   - Main class (using Spring Boot detection, Maven exec plugin, or bytecode scanning)
   - Source directories and compiled classes
   - Project classpath and dependencies

2. *Agent Discovery*: Searches for ByteHot agent in:
   - Local Maven repository (~/.m2/repository)
   - Project target directory (bytehot-application/target)
   - Current working directory

3. *Process Launch*: Starts your application with:
   - Proper classpath from project analysis
   - ByteHot agent attached via -javaagent
   - JVM arguments if configured

4. *Visual Feedback*: Provides real-time notifications for:
   - Live mode start/stop status
   - Hot-swap operations success/failure
   - Connection status to running application

** Quick Start Tutorial

1. **Create a simple Java class**:
   #+BEGIN_SRC java
   public class HelloWorld {
       public String getMessage() {
           return "Hello, World!";
       }
   }
   #+END_SRC

2. **Start your application** with ByteHot agent:
   #+BEGIN_SRC bash
   java -javaagent:bytehot-agent.jar -cp . HelloWorld
   #+END_SRC

3. **Connect the plugin**:
   - Open ByteHot tool window
   - Click "Connect to Agent"
   - Status should show "Connected"

4. **Make a change**:
   #+BEGIN_SRC java
   public class HelloWorld {
       public String getMessage() {
           return "Hello, ByteHot!"; // Changed message
       }
   }
   #+END_SRC

5. **Watch the magic**:
   - Plugin automatically detects the change
   - Compiles the class
   - Sends hot-swap to the running application
   - Shows success notification

* User Interface

** ByteHot Tool Window

The main interface consists of several sections:

*** Connection Panel
- **Status Indicator**: Shows connection state (Connected/Disconnected/Error)
- **Connect/Disconnect Button**: Manage agent connection
- **Configure Button**: Open connection settings
- **Refresh Button**: Reconnect to agent

*** Monitoring Panel
- **Start/Stop Watching**: Control file monitoring
- **Auto-compile Toggle**: Enable/disable automatic compilation
- **Watch Status**: Shows which files are being monitored
- **Statistics**: Display hot-swap count and success rate

*** Log Panel
- **Hot-swap Log**: Real-time log of hot-swap operations
- **Filter Options**: Filter logs by level (Info, Warning, Error)
- **Clear Log**: Clear the log display
- **Export Log**: Save logs to file

*** Configuration Panel
- **Project Settings**: Project-specific ByteHot configuration
- **Global Settings**: IDE-wide plugin settings
- **Import/Export**: Share configurations between projects

** Status Bar Integration

The plugin adds a ByteHot indicator to IntelliJ's status bar:

- **Green Circle**: Connected and monitoring
- **Yellow Circle**: Connected but not monitoring
- **Red Circle**: Disconnected or error
- **Click**: Opens ByteHot tool window

** Editor Integration

*** Gutter Icons
- **Hot-swap Success**: Green checkmark next to successfully hot-swapped methods
- **Hot-swap Failed**: Red X next to methods that couldn't be hot-swapped
- **Pending Hot-swap**: Yellow clock for queued changes

*** Context Menu
Right-click in the editor for ByteHot options:
- **Hot-swap This File**: Manually trigger hot-swap for current file
- **Hot-swap This Method**: Hot-swap only the current method
- **Exclude from Hot-swap**: Temporarily exclude file from monitoring

* Configuration

** Project Configuration

Access via =File → Settings → Tools → ByteHot= or click "Configure" in the tool window:

*** Connection Settings
- **Agent Host**: ByteHot agent hostname (default: localhost)
- **Agent Port**: ByteHot agent port (default: 8080)
- **Connection Timeout**: Timeout for agent communication (default: 5000ms)
- **Retry Attempts**: Number of connection retry attempts (default: 3)
- **Auto-reconnect**: Automatically reconnect on connection loss

*** Monitoring Settings
- **Watch Paths**: Directories to monitor for changes
- **File Patterns**: Include/exclude patterns for file monitoring
- **Watch Interval**: How often to check for file changes (default: 1000ms)
- **Auto-start Monitoring**: Start monitoring when project opens

*** Compilation Settings
- **Auto-compile**: Automatically compile changed files
- **Compile Before Hot-swap**: Ensure compilation before hot-swap
- **Use IntelliJ Compiler**: Use IntelliJ's built-in compiler
- **Compiler Arguments**: Additional compiler arguments

*** Notification Settings
- **Show Success Notifications**: Display hot-swap success messages
- **Show Error Notifications**: Display hot-swap error messages
- **Notification Duration**: How long notifications are displayed
- **Sound Notifications**: Play sounds for hot-swap events

** Global Settings

*** UI Preferences
- **Tool Window Location**: Choose tool window position
- **Auto-hide Tool Window**: Hide when not in use
- **Show Gutter Icons**: Display hot-swap status in editor gutter
- **Status Bar Indicator**: Show/hide status bar widget

*** Performance Settings
- **Background Processing**: Process hot-swaps in background
- **Memory Management**: Configure memory usage limits
- **Thread Pool Size**: Number of threads for hot-swap processing
- **File Watcher Optimization**: Enable native file watchers when available

* Usage Scenarios

** Web Development

For Spring Boot or similar web applications:

1. **Configure for web development**:
   #+BEGIN_SRC
   Watch Paths: src/main/java, src/main/resources
   File Patterns: **/*.java, **/*.html, **/*.css, **/*.js
   Auto-compile: Enabled
   #+END_SRC

2. **Start your Spring Boot application**:
   #+BEGIN_SRC bash
   java -javaagent:bytehot-agent.jar -jar your-app.jar
   #+END_SRC

3. **Development workflow**:
   - Edit controllers, services, or templates
   - Plugin automatically hot-swaps changes
   - Browser refresh shows updated content immediately

** Desktop Application Development

For Swing or JavaFX applications:

1. **Configure for desktop apps**:
   #+BEGIN_SRC
   Watch Paths: src/main/java
   File Patterns: **/*.java, **/*.fxml
   Auto-compile: Enabled
   Exclude Patterns: **/test/**
   #+END_SRC

2. **Start your desktop application**:
   #+BEGIN_SRC bash
   java -javaagent:bytehot-agent.jar -cp build/classes MyApp
   #+END_SRC

3. **Development workflow**:
   - Modify UI components or business logic
   - See changes reflected immediately in running application
   - No need to restart for most changes

** Microservices Development

For microservices with multiple running instances:

1. **Configure multi-instance monitoring**:
   - Enable "Multi-instance Support" in settings
   - Configure different ports for each service
   - Use service discovery if available

2. **Agent configuration per service**:
   #+BEGIN_SRC
   Service A: localhost:8080
   Service B: localhost:8081
   Service C: localhost:8082
   #+END_SRC

3. **Development workflow**:
   - Plugin shows status for all connected services
   - Changes are propagated to relevant services automatically
   - Cross-service debugging becomes much faster

** Android Development (Experimental)

For Android applications (requires Android Studio or IntelliJ with Android plugin):

1. **Install Android support**:
   - Enable "Android Support" in ByteHot settings
   - Configure ADB path
   - Enable USB debugging on device/emulator

2. **Configure for Android**:
   #+BEGIN_SRC
   Watch Paths: src/main/java, src/main/kotlin
   ADB Integration: Enabled
   Target Device: Auto-detect or specific device ID
   #+END_SRC

3. **Development workflow**:
   - Deploy app with ByteHot agent
   - Edit Java/Kotlin code
   - Changes are pushed to device automatically

* Advanced Features

** Custom Hot-swap Rules

Configure when and how hot-swaps should occur:

1. **Open Advanced Settings**:
   - Go to ByteHot settings
   - Click "Advanced Rules"

2. **Configure rules**:
   #+BEGIN_SRC
   Pattern: **/controller/**/*.java
   Action: Hot-swap
   Condition: Method-level changes only
   
   Pattern: **/config/**/*.java
   Action: Context refresh
   Condition: Any change
   
   Pattern: **/entity/**/*.java
   Action: Full restart
   Condition: Field changes
   #+END_SRC

** Integration with Version Control

*** Git Integration
- **Branch Detection**: Different configurations per branch
- **Commit Hooks**: Trigger hot-swaps on commits
- **Merge Conflict Resolution**: Handle hot-swaps during merges

*** Configuration:
#+BEGIN_SRC
Settings → ByteHot → Version Control
☑ Monitor Git branches
☑ Auto hot-swap on commit
☑ Pause during merge conflicts
Branch-specific configs: feature/* → aggressive hot-swap
                        main → conservative hot-swap
#+END_SRC

** Remote Development

For remote debugging and development:

1. **Configure remote agent**:
   #+BEGIN_SRC
   Agent Host: remote-server.com
   Agent Port: 8080
   SSH Tunnel: Enabled
   SSH Host: user@remote-server.com
   SSH Key: ~/.ssh/id_rsa
   #+END_SRC

2. **File synchronization**:
   - Enable "Remote File Sync"
   - Configure SFTP/SCP settings
   - Automatic upload of compiled classes

** Plugin API and Extensions

*** Custom Actions
Create custom actions that integrate with ByteHot:

#+BEGIN_SRC java
public class MyCustomAction extends AnAction {
    @Override
    public void actionPerformed(AnActionEvent e) {
        ByteHotService service = ByteHotService.getInstance(e.getProject());
        service.performHotSwap(getCurrentFile());
    }
}
#+END_SRC

*** Event Listeners
Listen to ByteHot events:

#+BEGIN_SRC java
public class MyHotSwapListener implements ByteHotListener {
    @Override
    public void onHotSwapSuccess(HotSwapEvent event) {
        // Custom logic on successful hot-swap
        NotificationManager.showSuccess("Hot-swap completed!");
    }
    
    @Override
    public void onHotSwapFailure(HotSwapEvent event) {
        // Custom logic on failed hot-swap
        NotificationManager.showError("Hot-swap failed: " + event.getError());
    }
}
#+END_SRC

* Troubleshooting

** Common Issues

*** Plugin Not Loading

*Problem*: ByteHot plugin doesn't appear in IntelliJ

*Solutions*:
1. Check IntelliJ version compatibility (2023.1+)
2. Verify Java version (17+)
3. Check =Help → About= for plugin list
4. Try disabling and re-enabling the plugin
5. Check IntelliJ logs: =Help → Show Log in Finder/Explorer=

*** Agent Connection Failed

*Problem*: Cannot connect to ByteHot agent

*Solutions*:
1. **Verify agent is running**:
   #+BEGIN_SRC bash
   curl http://localhost:8080/health
   #+END_SRC

2. **Check firewall settings**:
   - Ensure port 8080 is not blocked
   - Check antivirus software

3. **Verify configuration**:
   - Go to ByteHot settings
   - Test connection with correct host/port
   - Try different ports if needed

4. **Check agent logs**:
   - Look for connection errors in agent output
   - Verify agent is listening on correct interface

*** Hot-swap Not Working

*Problem*: Code changes don't trigger hot-swap

*Solutions*:
1. **Check monitoring status**:
   - Ensure "Start Watching" is enabled
   - Verify file patterns include your files
   - Check if files are in watched directories

2. **Compilation issues**:
   - Enable "Auto-compile" in settings
   - Check for compilation errors in IDE
   - Verify classpath is correct

3. **Agent compatibility**:
   - Ensure agent version matches plugin version
   - Check agent supports your Java version
   - Verify agent is attached correctly

*** Performance Issues

*Problem*: IDE becomes slow with ByteHot enabled

*Solutions*:
1. **Reduce monitoring scope**:
   - Limit watch paths to necessary directories
   - Use more specific file patterns
   - Exclude large directories (node_modules, build, etc.)

2. **Adjust polling interval**:
   - Increase watch interval to reduce CPU usage
   - Use native file watchers when available

3. **Memory configuration**:
   - Increase IntelliJ heap size
   - Configure ByteHot memory limits
   - Monitor memory usage in IDE

** Debug Mode

Enable debug logging for troubleshooting:

1. **IDE Logs**:
   - Go to =Help → Debug Log Settings=
   - Add: =#org.acmsl.bytehot=
   - Check logs in =Help → Show Log=

2. **Plugin Debug**:
   - Open ByteHot settings
   - Enable "Debug Mode"
   - Check tool window for debug messages

3. **Agent Debug**:
   - Start agent with debug flags:
     #+BEGIN_SRC bash
     java -javaagent:bytehot-agent.jar -Dbytehot.debug=true -jar app.jar
     #+END_SRC

** Performance Monitoring

Monitor plugin performance:

1. **Built-in Metrics**:
   - Open ByteHot tool window
   - Click "Statistics" tab
   - View hot-swap success rate, timing, etc.

2. **IntelliJ Profiler**:
   - Use =Help → Diagnostic Tools → CPU Usage=
   - Monitor ByteHot plugin threads
   - Check for memory leaks

* Best Practices

** Project Setup

1. **Configure .gitignore**:
   #+BEGIN_SRC
   # ByteHot configuration
   .bytehot/
   *.bytehot.properties
   #+END_SRC

2. **Team settings**:
   - Share basic configuration via version control
   - Document agent setup procedures
   - Create project-specific quick start guides

** Development Workflow

1. **Start with clean slate**:
   - Build project before starting hot-swap
   - Ensure no compilation errors
   - Test basic functionality first

2. **Incremental development**:
   - Make small changes and test
   - Use hot-swap for rapid iteration
   - Fall back to restart for major changes

3. **Testing strategy**:
   - Test hot-swapped changes thoroughly
   - Use automated tests to verify behavior
   - Restart application periodically for full testing

** Performance Optimization

1. **Scope limitation**:
   - Watch only active development directories
   - Exclude test and build directories
   - Use specific file patterns

2. **Resource management**:
   - Close unused projects
   - Limit number of concurrent hot-swaps
   - Monitor system resources

3. **Network optimization**:
   - Use localhost for agent connection
   - Configure appropriate timeouts
   - Use compression for remote connections

For more information, see the [[../../technical-specs/plugin-communication-protocol.org][Plugin Communication Protocol]] and [[../../milestone-11-intellij-plugin.org][IntelliJ Plugin Specification]].