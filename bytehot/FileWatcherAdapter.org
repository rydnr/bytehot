#+TITLE: FileWatcherAdapter - File System Monitoring Infrastructure Implementation
#+AUTHOR: ByteHot Development Team
#+DATE: [2025-06-20]

* Overview

The ~FileWatcherAdapter~ class provides the infrastructure implementation of the ~FileWatcherPort~ interface, serving as the critical bridge between ByteHot's domain logic and the file system monitoring capabilities of Java NIO. This adapter handles the accidental complexity of file system watching while exposing a clean, domain-focused interface for detecting class file changes that trigger hot-swap operations.

* Hexagonal Architecture Role

** Secondary Adapter Implementation
FileWatcherAdapter serves as a secondary adapter in ByteHot's hexagonal architecture:
- Implements the ~FileWatcherPort~ interface defined in the domain layer
- Handles operating system-specific file system monitoring implementation details
- Isolates domain logic from Java NIO WatchService API evolution
- Provides concrete implementation for file change detection operations

** Technology Abstraction Boundary
The adapter manages the boundary between domain concepts and file system technology:
- Translates domain watch requests into NIO WatchService operations
- Handles platform-specific file system event variations
- Manages resource lifecycle for file system monitoring
- Provides performance optimization and pattern matching capabilities

** Infrastructure Complexity Management
The adapter encapsulates complex infrastructure concerns:
- Thread-safe access to file system monitoring capabilities
- Recursive directory traversal and watch registration
- Event debouncing and pattern-based filtering
- Resource cleanup and error recovery for watch operations

* Class Structure and Responsibilities

** Core Infrastructure Components
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/filesystem/FileWatcherAdapter.java
/**
 * The underlying NIO watch service
 */
private final WatchService watchService;

/**
 * Thread pool for handling watch events
 */
private final ExecutorService executorService;

/**
 * Map of watch IDs to their configurations
 */
private final Map<String, WatchConfiguration> watchConfigurations;

/**
 * Map of paths to their watch keys
 */
private final Map<Path, WatchKey> pathToWatchKey;

/**
 * Map of watch keys to their paths
 */
private final Map<WatchKey, Path> watchKeyToPath;

/**
 * Whether the watcher is currently running
 */
private volatile boolean running;
#+END_SRC

** Constructor and Initialization
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/filesystem/FileWatcherAdapter.java
/**
 * Creates a new FileWatcherAdapter instance
 */
public FileWatcherAdapter() throws IOException {
    this.watchService = FileSystems.getDefault().newWatchService();
    this.executorService = Executors.newCachedThreadPool(r -> {
        final Thread thread = new Thread(r, "FileWatcher-" + Thread.currentThread().getId());
        thread.setDaemon(true);
        return thread;
    });
    this.watchConfigurations = new ConcurrentHashMap<>();
    this.pathToWatchKey = new ConcurrentHashMap<>();
    this.watchKeyToPath = new ConcurrentHashMap<>();
    this.running = true;
    
    // Start the watch service loop
    startWatchServiceLoop();
}
#+END_SRC

** Architecture Design Principles
The adapter follows sophisticated design principles:
#+BEGIN_SRC java
// Design characteristics:
// - Immutable configuration objects
// - Thread-safe concurrent operations
// - Resource lifecycle management
// - Event-driven processing architecture
// - Pattern-based file filtering
// - Recursive directory monitoring
#+END_SRC

* File System Monitoring Implementation

** Watch Session Management
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/filesystem/FileWatcherAdapter.java
/**
 * Starts watching a directory for file changes
 */
@Override
public String startWatching(final Path path, final List<String> patterns, final boolean recursive) throws Exception {
    if (!Files.exists(path) || !Files.isDirectory(path)) {
        throw new IllegalArgumentException("Path must be an existing directory: " + path);
    }

    final String watchId = UUID.randomUUID().toString();
    final List<Pattern> compiledPatterns = new ArrayList<>();
    
    for (final String pattern : patterns) {
        compiledPatterns.add(Pattern.compile(pattern.replace("*", ".*")));
    }

    final WatchConfiguration config = new WatchConfiguration(path, compiledPatterns, recursive);
    watchConfigurations.put(watchId, config);

    if (recursive) {
        registerRecursive(path);
    } else {
        registerSingle(path);
    }

    return watchId;
}
#+END_SRC

** Watch Session Lifecycle
The implementation manages complete watch session lifecycle:
#+BEGIN_SRC java
// Session management features:
// - Unique UUID-based watch identification
// - Pattern compilation and optimization
// - Recursive vs single-directory monitoring
// - Resource tracking and cleanup
// - Thread-safe session management
#+END_SRC

** Pattern Matching and Filtering
Advanced pattern matching capabilities:
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/filesystem/FileWatcherAdapter.java
/**
 * Checks if a file matches any of the given patterns
 */
protected boolean matchesPatterns(final Path path, final List<Pattern> patterns) {
    final String filename = path.getFileName().toString();
    
    for (final Pattern pattern : patterns) {
        if (pattern.matcher(filename).matches()) {
            return true;
        }
    }
    
    return false;
}
#+END_SRC

* Recursive Directory Monitoring

** Single Directory Registration
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/filesystem/FileWatcherAdapter.java
/**
 * Registers a single directory for watching
 */
protected void registerSingle(final Path path) throws IOException {
    final WatchKey watchKey = path.register(
        watchService,
        StandardWatchEventKinds.ENTRY_CREATE,
        StandardWatchEventKinds.ENTRY_DELETE,
        StandardWatchEventKinds.ENTRY_MODIFY
    );
    
    pathToWatchKey.put(path, watchKey);
    watchKeyToPath.put(watchKey, path);
}
#+END_SRC

** Recursive Directory Traversal
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/filesystem/FileWatcherAdapter.java
/**
 * Registers a directory and all subdirectories for watching
 */
protected void registerRecursive(final Path start) throws IOException {
    Files.walkFileTree(start, new SimpleFileVisitor<Path>() {
        @Override
        public FileVisitResult preVisitDirectory(final Path dir, final BasicFileAttributes attrs) throws IOException {
            registerSingle(dir);
            return FileVisitResult.CONTINUE;
        }
    });
}
#+END_SRC

** Recursive Monitoring Strategy
The recursive implementation provides comprehensive coverage:
- Complete directory tree traversal using NIO file walking
- Individual registration of each subdirectory for optimal performance
- Automatic detection of new subdirectories during monitoring
- Efficient resource allocation per directory level

* Event Processing Architecture

** Watch Service Event Loop
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/filesystem/FileWatcherAdapter.java
/**
 * Starts the watch service event processing loop
 */
protected void startWatchServiceLoop() {
    executorService.submit(() -> {
        while (running) {
            try {
                final WatchKey key = watchService.take();
                final Path dir = watchKeyToPath.get(key);
                
                if (dir == null) {
                    continue;
                }

                for (final WatchEvent<?> event : key.pollEvents()) {
                    final WatchEvent.Kind<?> kind = event.kind();
                    
                    if (kind == StandardWatchEventKinds.OVERFLOW) {
                        continue;
                    }

                    @SuppressWarnings("unchecked")
                    final WatchEvent<Path> pathEvent = (WatchEvent<Path>) event;
                    final Path filename = pathEvent.context();
                    final Path fullPath = dir.resolve(filename);

                    processFileEvent(kind, fullPath);
                }

                final boolean valid = key.reset();
                if (!valid) {
                    pathToWatchKey.remove(dir);
                    watchKeyToPath.remove(key);
                }
                
            } catch (final InterruptedException e) {
                Thread.currentThread().interrupt();
                break;
            } catch (final Exception e) {
                System.err.println("Error in file watcher: " + e.getMessage());
            }
        }
    });
}
#+END_SRC

** File Event Processing
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/filesystem/FileWatcherAdapter.java
/**
 * Processes a file system event
 */
protected void processFileEvent(final WatchEvent.Kind<?> kind, final Path path) {
    // Check if any watch configuration matches this file
    for (final WatchConfiguration config : watchConfigurations.values()) {
        if (matchesPatterns(path, config.getPatterns())) {
            // For now, just log the event - in a real implementation, 
            // this would emit domain events
            System.out.println("File " + kind.name() + ": " + path);
        }
    }
}
#+END_SRC

** Event Processing Characteristics
The event processing system provides:
- Asynchronous event handling through dedicated thread pool
- Overflow protection for high-volume file system changes
- Pattern-based filtering to reduce unnecessary processing
- Automatic cleanup of invalid watch keys
- Interrupt-safe thread management

* Thread Safety and Concurrency

** Concurrent Data Structures
The adapter ensures thread-safe operation through careful data structure selection:
#+BEGIN_SRC java
// Thread safety mechanisms:
// - ConcurrentHashMap for all shared state
// - Volatile flags for coordination
// - Thread-safe collections for watch management
// - Atomic operations for state updates
#+END_SRC

** Thread Pool Management
Sophisticated thread management for optimal performance:
- Cached thread pool for dynamic scaling
- Daemon threads to prevent JVM shutdown blocking
- Named threads for debugging and monitoring
- Graceful shutdown with proper resource cleanup

** Concurrent Access Patterns
The implementation optimizes for concurrent access:
#+BEGIN_SRC java
// Concurrency optimizations:
// - Lock-free read operations where possible
// - Minimize critical sections in hot paths
// - Separate read and write access patterns
// - Efficient pattern matching without synchronization
#+END_SRC

* Watch Session Management

** Session Creation and Configuration
#+BEGIN_SRC java
// Watch configuration encapsulation:
protected static class WatchConfiguration {
    private final Path path;
    private final List<Pattern> patterns;
    private final boolean recursive;
    
    // Immutable configuration ensures thread safety
    // Pattern pre-compilation optimizes matching performance
    // Boolean flags enable different monitoring strategies
}
#+END_SRC

** Session Termination and Cleanup
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/filesystem/FileWatcherAdapter.java
/**
 * Stops watching a previously registered directory
 */
@Override
public void stopWatching(final String watchId) throws Exception {
    final WatchConfiguration config = watchConfigurations.remove(watchId);
    if (config != null) {
        final WatchKey watchKey = pathToWatchKey.remove(config.getPath());
        if (watchKey != null) {
            watchKey.cancel();
            watchKeyToPath.remove(watchKey);
        }
    }
}
#+END_SRC

** Session State Inquiry
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/filesystem/FileWatcherAdapter.java
/**
 * Checks if a directory is currently being watched
 */
@Override
public boolean isWatching(final Path path) {
    return pathToWatchKey.containsKey(path);
}

/**
 * Returns all currently watched paths
 */
@Override
public List<Path> getWatchedPaths() {
    return new ArrayList<>(pathToWatchKey.keySet());
}

/**
 * Checks if the file watcher is operational
 */
@Override
public boolean isWatcherAvailable() {
    return running && watchService != null;
}
#+END_SRC

* Error Handling and Resilience

** Comprehensive Exception Management
The adapter handles all categories of file system monitoring errors:
#+BEGIN_SRC java
// Exception handling categories:
// - IOException: File system access failures
// - InterruptedException: Thread coordination issues
// - IllegalArgumentException: Invalid parameters
// - SecurityException: Insufficient permissions
// - RuntimeException: Unexpected monitoring failures
#+END_SRC

** Error Recovery Strategies
The adapter implements multiple recovery strategies:
- Automatic cleanup of invalid watch keys
- Graceful degradation when directories become inaccessible
- Thread interruption handling for controlled shutdown
- Resource leak prevention through proper cleanup

** Monitoring Health Management
The adapter enables monitoring health management:
#+BEGIN_SRC java
// Health management features:
// - Running state tracking through volatile flags
// - Resource availability checking
// - Automatic resource cleanup on failures
// - Detailed error logging for operational troubleshooting
#+END_SRC

* Resource Lifecycle Management

** Initialization and Startup
The adapter manages complex initialization sequences:
- WatchService creation from default file system
- Thread pool configuration with appropriate thread naming
- Concurrent data structure initialization
- Background event processing loop startup

** Shutdown and Cleanup
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/filesystem/FileWatcherAdapter.java
/**
 * Shuts down the file watcher
 */
public void shutdown() {
    running = false;
    executorService.shutdown();
    
    try {
        watchService.close();
    } catch (final IOException e) {
        System.err.println("Error closing watch service: " + e.getMessage());
    }
}
#+END_SRC

** Resource Optimization
The implementation optimizes resource usage:
#+BEGIN_SRC java
// Resource optimization strategies:
// - Lazy initialization where appropriate
// - Efficient data structure selection
// - Memory-conscious pattern compilation
// - Thread pool reuse for multiple operations
#+END_SRC

* Performance Optimization

** File System Access Performance
The adapter optimizes file system monitoring performance:
- Pre-compiled regex patterns for efficient matching
- Minimal object allocation during event processing
- Efficient path resolution and comparison
- Optimized directory traversal algorithms

** Event Processing Performance
Sophisticated event processing optimization:
#+BEGIN_SRC java
// Performance optimization areas:
// - Pattern matching efficiency for large file sets
// - Event batching to prevent processing storms
// - Selective monitoring based on file types and patterns
// - Cache optimization for repeated path operations
#+END_SRC

** Memory Management
Careful memory management throughout operations:
- Reuse of compiled pattern objects
- Efficient collection sizing and growth strategies
- Prompt cleanup of terminated watch sessions
- Memory-conscious thread pool configuration

* Integration with ByteHot Architecture

** Port Interface Compliance
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/filesystem/FileWatcherAdapter.java
/**
 * Returns the port interface this adapter implements
 */
@Override
public Class<FileWatcherPort> adapts() {
    return FileWatcherPort.class;
}
#+END_SRC

** Adapter Pattern Implementation
The adapter follows strict hexagonal architecture principles:
- Clean separation between domain and infrastructure concerns
- No domain logic in infrastructure implementation
- Complete delegation to Java NIO file system APIs
- Technology-specific error handling and translation

** Event Integration Strategy
The adapter integrates with ByteHot's event-driven architecture:
#+BEGIN_SRC java
// Event integration approach:
// - File system events trigger domain event generation
// - Pattern matching reduces unnecessary domain processing
// - Asynchronous processing prevents blocking domain operations
// - Configurable filtering enables selective monitoring
#+END_SRC

* Cross-Platform Compatibility

** Operating System Abstraction
The adapter maintains compatibility across operating systems:
#+BEGIN_SRC java
// Cross-platform considerations:
// - Windows: Native file system notifications
// - Linux: inotify-based monitoring
// - macOS: FSEvents framework utilization
// - Container environments: Specialized monitoring approaches
#+END_SRC

** File System Type Support
Different file system types are handled appropriately:
- Local file systems with native notification support
- Network file systems with polling fallback
- Container overlay file systems
- Cloud storage mounted file systems

** Performance Characteristics by Platform
Platform-specific optimization strategies:
#+BEGIN_SRC java
// Platform optimizations:
// - Native event system utilization where available
// - Polling frequency tuning for network file systems
// - Memory usage optimization for large directory trees
// - Thread allocation based on platform capabilities
#+END_SRC

* Configuration and Customization

** Pattern Syntax Support
The adapter supports sophisticated pattern matching:
- Glob-style wildcards with * and ? support
- Regular expression compilation for complex patterns
- Case-sensitive and case-insensitive matching options
- Extension-based filtering optimization

** Monitoring Behavior Configuration
Flexible monitoring behavior customization:
#+BEGIN_SRC java
// Configuration options:
// - Recursive vs single-level monitoring
// - Pattern inclusion and exclusion lists
// - Event type filtering (create, modify, delete)
// - Performance tuning parameters
#+END_SRC

** Resource Usage Tuning
Configurable resource usage parameters:
- Thread pool sizing based on expected load
- Memory allocation strategies for different scenarios
- Event queue sizing for high-volume environments
- Timeout configuration for various operations

* Testing and Mock Support

** Testability Design
The adapter enables comprehensive testing strategies:
#+BEGIN_SRC java
// Testing support features:
// - Protected methods enable unit testing
// - State inspection through public accessor methods
// - Resource cleanup verification
// - Event simulation through mock file systems
#+END_SRC

** Mock Implementation Strategy
Testing uses mock file system implementations:
#+BEGIN_SRC java
// Mock testing approach:
// - In-memory file system for controlled testing
// - Simulated file system events
// - Performance testing with synthetic loads
// - Error condition simulation
#+END_SRC

** Integration Testing Support
The adapter supports comprehensive integration testing:
- Real file system testing with temporary directories
- Concurrent access testing with multiple threads
- Resource leak detection and verification
- Platform-specific behavior validation

* Security Considerations

** Permission Management
File system watching operations require careful permission management:
#+BEGIN_SRC java
// Security requirements:
// - Directory read permissions for monitoring
// - File system access privileges
// - Security manager compliance
// - Sandbox environment compatibility
#+END_SRC

** Path Validation and Safety
The adapter enforces security through validation:
- Path traversal attack prevention
- Symbolic link handling policies
- Access control verification
- Directory boundary enforcement

** Audit Trail Integration
All operations contribute to comprehensive audit trails:
- Watch session establishment and termination logging
- File access pattern recording
- Security event documentation
- Performance metrics collection

* Future Evolution and Extensibility

** Extension Points
The adapter design supports future enhancements:
- Additional event type support
- Enhanced pattern matching capabilities
- Integration with external monitoring systems
- Cloud storage monitoring support

** Technology Integration Roadmap
Planned integration with emerging technologies:
#+BEGIN_SRC java
// Future integration targets:
// - Java 21+ Virtual Threads for improved scalability
// - Native image compilation support
// - Container-native file system monitoring
// - Distributed file system support
#+END_SRC

** Performance Enhancement Opportunities
Identified areas for future optimization:
- Machine learning-based pattern optimization
- Predictive file change detection
- Dynamic performance tuning based on usage patterns
- Advanced caching strategies for pattern matching

* Related Documentation

- [[ports/FileWatcherPort.org][FileWatcherPort]]: Domain interface implemented by this adapter
- [[events/ClassFileChanged.org][ClassFileChanged]]: Primary event generated from file changes
- [[ByteHot.org][ByteHot]]: Core domain aggregate consuming file change events
- [[flows/hot-swap-complete-flow.org][Hot-Swap Complete Flow]]: Complete process initiated by file changes

* Implementation Notes

** Design Patterns Applied
The adapter leverages several key design patterns:
- **Adapter Pattern**: Clean interface between domain and infrastructure
- **Observer Pattern**: File system event notification
- **Strategy Pattern**: Different monitoring approaches (recursive/single)
- **Template Method**: Consistent event processing patterns

** Code Quality Standards
The implementation maintains high code quality:
- Comprehensive parameter validation
- Detailed exception handling with proper chaining
- Resource lifecycle management
- Clear separation of concerns

The FileWatcherAdapter provides ByteHot's critical infrastructure implementation for file system monitoring operations while maintaining architectural purity and enabling efficient, reliable, and scalable file change detection across diverse operating system and file system environments.