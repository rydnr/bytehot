name: Auto Patch Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      force_patch:
        description: 'Force patch release creation'
        required: false
        default: 'false'
        type: boolean

env:
  JAVA_VERSION: '17'

jobs:
  detect-patch-release:
    name: Detect Patch-Level Changes
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout with full history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Analyze commit for patch-level changes
      id: patch_detect
      run: |
        # Get the last commit message (first line only to avoid multiline issues)
        COMMIT_MSG=$(git log -1 --pretty=%s)
        echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT
        
        # Check if this is a patch-worthy commit or manual dispatch
        PATCH_WORTHY=false
        
        # If manually triggered, force patch creation
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          PATCH_WORTHY=true
          echo "category=manual" >> $GITHUB_OUTPUT
          echo "üéØ Manual patch release triggered"
        fi
        
        # Bug fix patterns
        if [[ "$COMMIT_MSG" =~ ^(fix:|üêõ|‚úÖ.*fix|‚úÖ.*Fix) ]] || \
           [[ "$COMMIT_MSG" =~ Fix.*bug ]] || \
           [[ "$COMMIT_MSG" =~ Resolve.*issue ]]; then
          PATCH_WORTHY=true
          echo "category=bugfix" >> $GITHUB_OUTPUT
        fi
        
        # Security patterns  
        if [[ "$COMMIT_MSG" =~ ^(security:|üîí) ]] || \
           [[ "$COMMIT_MSG" =~ Security.*fix ]] || \
           [[ "$COMMIT_MSG" =~ vulnerability ]]; then
          PATCH_WORTHY=true
          echo "category=security" >> $GITHUB_OUTPUT
        fi
        
        # Configuration fix patterns
        if [[ "$COMMIT_MSG" =~ ^(config:|üîß) ]] || \
           [[ "$COMMIT_MSG" =~ Configuration.*fix ]] || \
           [[ "$COMMIT_MSG" =~ configuration.*loading ]]; then
          PATCH_WORTHY=true
          echo "category=config" >> $GITHUB_OUTPUT
        fi
        
        # Performance patterns
        if [[ "$COMMIT_MSG" =~ ^(perf:|‚ö°) ]] || \
           [[ "$COMMIT_MSG" =~ Performance.*improvement ]]; then
          PATCH_WORTHY=true
          echo "category=performance" >> $GITHUB_OUTPUT
        fi
        
        echo "patch_worthy=$PATCH_WORTHY" >> $GITHUB_OUTPUT
        
        if [ "$PATCH_WORTHY" = "true" ]; then
          echo "üéØ Patch-level change detected: $COMMIT_MSG"
        else
          echo "‚ÑπÔ∏è No patch-level change detected"
        fi
        
    - name: Get current version
      id: current_version
      if: steps.patch_detect.outputs.patch_worthy == 'true'
      run: |
        # Get the latest semver tag
        LATEST_TAG=$(git tag --list --sort=-version:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -1)
        
        if [ -z "$LATEST_TAG" ]; then
          echo "No existing semver tags found, starting with 1.0.0"
          echo "current=1.0.0" >> $GITHUB_OUTPUT
          echo "next=1.0.1" >> $GITHUB_OUTPUT
        else
          echo "current=$LATEST_TAG" >> $GITHUB_OUTPUT
          
          # Parse version components  
          IFS='.' read -r major minor patch <<< "$LATEST_TAG"
          
          # Increment patch version
          new_patch=$((patch + 1))
          NEW_VERSION="$major.$minor.$new_patch"
          
          echo "next=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "üìà Version increment: $LATEST_TAG ‚Üí $NEW_VERSION"
        fi
        
    - name: Check if tag already exists
      id: tag_check
      if: steps.patch_detect.outputs.patch_worthy == 'true'
      run: |
        NEW_VERSION="${{ steps.current_version.outputs.next }}"
        
        if git tag --list | grep -q "^$NEW_VERSION$"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Tag $NEW_VERSION already exists, skipping auto-release"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Tag $NEW_VERSION is available for creation"
        fi
        
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      if: steps.patch_detect.outputs.patch_worthy == 'true' && steps.tag_check.outputs.exists == 'false'
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Test build before tagging
      if: steps.patch_detect.outputs.patch_worthy == 'true' && steps.tag_check.outputs.exists == 'false'
      run: |
        echo "üß™ Running tests before creating patch release..."
        # Run specific configuration and adapter tests in the bytehot module
        cd bytehot
        mvn test -Dtest="ConfigurationAdapterTest,ConfigurationLoadingIntegrationTest,WatchConfigurationTest,EventEmitterAdapterTest,FilesystemEventStoreAdapterTest" -q
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ All tests passed, proceeding with patch release"
        else
          echo "‚ùå Tests failed, aborting auto patch release"
          exit 1
        fi
        
    - name: Create automated patch tag
      if: steps.patch_detect.outputs.patch_worthy == 'true' && steps.tag_check.outputs.exists == 'false'
      run: |
        NEW_VERSION="${{ steps.current_version.outputs.next }}"
        CATEGORY="${{ steps.patch_detect.outputs.category }}"
        COMMIT_MSG="${{ steps.patch_detect.outputs.commit_msg }}"
        BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
        
        # Configure git for tagging
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create tag message based on category - using simple concatenation to avoid YAML issues
        if [ "$CATEGORY" = "bugfix" ]; then
          TAG_MSG="ByteHot $NEW_VERSION - Bug Fix"$'\n\n'"üêõ **Automated Patch Release**"$'\n'"- **Change Type**: Bug Fix"$'\n'"- **Trigger Commit**: $COMMIT_MSG"$'\n'"- **Auto-Generated**: $BUILD_DATE"$'\n\n'"This patch release was automatically created based on bug fix commit detection."$'\n\n'"ü§ñ Generated with [Claude Code](https://claude.ai/code)"
        elif [ "$CATEGORY" = "security" ]; then
          TAG_MSG="ByteHot $NEW_VERSION - Security Fix"$'\n\n'"üîí **Automated Security Patch**"$'\n'"- **Change Type**: Security Fix"$'\n'"- **Trigger Commit**: $COMMIT_MSG"$'\n'"- **Auto-Generated**: $BUILD_DATE"$'\n\n'"This security patch was automatically created based on security-related commit detection."$'\n\n'"ü§ñ Generated with [Claude Code](https://claude.ai/code)"
        elif [ "$CATEGORY" = "config" ]; then
          TAG_MSG="ByteHot $NEW_VERSION - Configuration Fix"$'\n\n'"üîß **Automated Configuration Patch**"$'\n'"- **Change Type**: Configuration Fix"$'\n'"- **Trigger Commit**: $COMMIT_MSG"$'\n'"- **Auto-Generated**: $BUILD_DATE"$'\n\n'"This patch release was automatically created based on configuration fix commit detection."$'\n\n'"ü§ñ Generated with [Claude Code](https://claude.ai/code)"
        elif [ "$CATEGORY" = "performance" ]; then
          TAG_MSG="ByteHot $NEW_VERSION - Performance Improvement"$'\n\n'"‚ö° **Automated Performance Patch**"$'\n'"- **Change Type**: Performance Improvement"$'\n'"- **Trigger Commit**: $COMMIT_MSG"$'\n'"- **Auto-Generated**: $BUILD_DATE"$'\n\n'"This patch release was automatically created based on performance improvement commit detection."$'\n\n'"ü§ñ Generated with [Claude Code](https://claude.ai/code)"
        elif [ "$CATEGORY" = "manual" ]; then
          TAG_MSG="ByteHot $NEW_VERSION - Manual Patch Release"$'\n\n'"üéØ **Manual Patch Release**"$'\n'"- **Change Type**: Manual Release"$'\n'"- **Trigger Commit**: $COMMIT_MSG"$'\n'"- **Auto-Generated**: $BUILD_DATE"$'\n\n'"This patch release was manually triggered via GitHub Actions workflow dispatch."$'\n\n'"ü§ñ Generated with [Claude Code](https://claude.ai/code)"
        else
          TAG_MSG="ByteHot $NEW_VERSION - Automated Patch"$'\n\n'"üîÑ **Automated Patch Release**"$'\n'"- **Change Type**: General Fix"$'\n'"- **Trigger Commit**: $COMMIT_MSG"$'\n'"- **Auto-Generated**: $BUILD_DATE"$'\n\n'"This patch release was automatically created based on patch-level commit detection."$'\n\n'"ü§ñ Generated with [Claude Code](https://claude.ai/code)"
        fi
        
        # Create and push the tag
        git tag -a "$NEW_VERSION" -m "$TAG_MSG"
        git push origin "$NEW_VERSION"
        
        echo "üöÄ Created and pushed tag: $NEW_VERSION"
        echo "üìã Category: $CATEGORY"
        
    - name: Summary
      if: always()
      run: |
        if [ "${{ steps.patch_detect.outputs.patch_worthy }}" = "true" ]; then
          if [ "${{ steps.tag_check.outputs.exists }}" = "true" ]; then
            echo "‚ö†Ô∏è Patch-level change detected but tag already exists"
          else
            echo "‚úÖ Automated patch release completed: ${{ steps.current_version.outputs.next }}"
          fi
        else
          echo "‚ÑπÔ∏è No patch-level changes detected in this commit"
        fi