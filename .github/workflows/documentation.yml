name: Build and Deploy Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC to keep documentation fresh
    - cron: '0 2 * * *'

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper git operations

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc emacs-nox

          echo "📋 Installed tools versions:"
          pandoc --version | head -2
          emacs --version | head -1

      - name: Verify Enhanced Pandoc installation
        run: |
          pandoc --version
          echo "📋 Pandoc filters available:"
          pandoc --list-highlight-languages | head -10

          echo "📋 Pandoc writers available:"
          pandoc --list-output-formats | grep -E 'html|org' || echo "HTML and org formats available"

      - name: Build project and install dependencies
        run: |
          # Build and install the multi-module project from root
          mvn clean install -DskipTests -q

      - name: Pre-process org files to fix code blocks
        run: |
          echo "🔧 Pre-processing org files to ensure proper code block formatting..."

          # Create a simple Python script to fix org-mode code blocks using echo
          echo "import re" > fix_org.py
          echo "import os" >> fix_org.py
          echo "from pathlib import Path" >> fix_org.py
          echo "" >> fix_org.py
          echo "def fix_org_code_blocks(content):" >> fix_org.py
          echo "    content = re.sub(r'^```(\w+)?\s*$', lambda m: f'#+begin_src {m.group(1) or \"\"}', content, flags=re.MULTILINE)" >> fix_org.py
          echo "    content = re.sub(r'^```\s*$', '#+end_src', content, flags=re.MULTILINE)" >> fix_org.py
          echo "    return content" >> fix_org.py
          echo "" >> fix_org.py
          echo "processed_count = 0" >> fix_org.py
          echo "for org_file in Path('.').rglob('*.org'):" >> fix_org.py
          echo "    try:" >> fix_org.py
          echo "        with open(org_file, 'r', encoding='utf-8') as f:" >> fix_org.py
          echo "            content = f.read()" >> fix_org.py
          echo "        fixed_content = fix_org_code_blocks(content)" >> fix_org.py
          echo "        if fixed_content != content:" >> fix_org.py
          echo "            with open(org_file, 'w', encoding='utf-8') as f:" >> fix_org.py
          echo "                f.write(fixed_content)" >> fix_org.py
          echo "            print(f'Fixed: {org_file}')" >> fix_org.py
          echo "            processed_count += 1" >> fix_org.py
          echo "    except Exception as e:" >> fix_org.py
          echo "        print(f'Error: {org_file}: {e}')" >> fix_org.py
          echo "print(f'Processed {processed_count} files')" >> fix_org.py

          # Run the Python script
          python3 fix_org.py

      - name: Generate Javadocs
        run: |
          # Generate Javadocs using multiple approaches
          echo "🔧 Attempting to generate Javadocs..."
          
          # Create javadocs directories for all modules
          mkdir -p target/site/apidocs
          
          # Strategy 1: Try Maven aggregate javadoc for all modules
          echo "📋 Strategy 1: Maven aggregate javadoc for all modules..."
          mvn javadoc:aggregate \
            -DfailOnError=false \
            -Dadditionalparam="-Xdoclint:none" \
            -Dmaven.javadoc.skip=false \
            -Dquiet=false || echo "Maven aggregate javadoc failed"

          # Verify javadocs were generated
          if [ -d "target/site/apidocs" ] && [ -n "$(ls -A target/site/apidocs 2>/dev/null)" ]; then
            echo "✅ Javadocs generated successfully"
            ls -la target/site/apidocs/
          else
            echo "⚠️ Javadocs generation failed"
            exit 1
          fi

      - name: Generate Documentation
        run: |
          echo "🚀 Starting documentation generation with shell scripts..."
          chmod +x .github/scripts/*.sh
          bash ./.github/scripts/generate-docs.sh

      - name: Debug generated files and structure
        run: |
          echo "🔍 Debugging generated documentation structure..."
          echo "Root files:"
          ls -la bytehot/ 2>/dev/null || echo "No bytehot directory"
          echo "Sample file content (first 20 lines):"
          if [ -f "bytehot/index.html" ]; then
            echo "=== bytehot/index.html ==="
            head -20 bytehot/index.html
          fi
          if [ -f "bytehot/implementation.html" ]; then
            echo "=== bytehot/implementation.html ==="
            head -10 bytehot/implementation.html
          fi

      - name: Copy Javadocs to documentation
        run: |
          echo "📖 Copying Javadocs to documentation site..."
          if [ -d "target/site/apidocs" ]; then
            cp -r target/site/apidocs/* bytehot/javadocs/ 2>/dev/null || true
            echo "✅ Javadocs copied to documentation site"
          else
            echo "⚠️ No Javadocs found to copy"
          fi

      - name: List generated files
        run: |
          echo "📋 Generated documentation files:"
          find bytehot -name "*.html" -type f 2>/dev/null | head -20 || echo "No HTML files found"
          echo "📊 Total HTML files: $(find bytehot -name "*.html" -type f 2>/dev/null | wc -l)"

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          enablement: true
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'bytehot'

      - name: Deploy to GitHub Pages
        if: ${{ !env.ACT }}
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          enablement: true
