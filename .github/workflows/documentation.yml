name: Build and Deploy Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC to keep documentation fresh
    - cron: '0 2 * * *'

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper git operations

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc

      - name: Verify Pandoc installation
        run: pandoc --version

      - name: Build project and install dependencies
        run: |
          # Build and install the multi-module project from root
          mvn clean install -DskipTests -q

      - name: Generate Javadocs
        run: |
          # Generate Javadocs using direct javadoc command
          echo "Attempting to generate Javadocs with direct javadoc command..."
          
          # Create javadocs directory
          mkdir -p bytehot/target/site/apidocs
          
          # Try Maven approach first
          echo "Trying Maven javadoc plugin..."
          mvn javadoc:javadoc -pl bytehot -Dshow=private -Dadditionalparam=-Xdoclint:none -q || echo "Maven javadoc failed"
          
          # If Maven failed, use direct javadoc command
          if [ ! -d "bytehot/target/site/apidocs" ] || [ -z "$(ls -A bytehot/target/site/apidocs 2>/dev/null)" ]; then
            echo "Maven javadoc failed, using direct javadoc command..."
            
            # Build classpath from Maven
            cd bytehot
            CLASSPATH=$(mvn dependency:build-classpath -Dmdep.outputFile=/dev/stdout -q 2>/dev/null | grep -v '\[')
            cd ..
            
            # Generate Javadocs directly
            javadoc -d bytehot/target/site/apidocs \
              -sourcepath bytehot/src/main/java \
              -classpath "bytehot/target/classes:$CLASSPATH" \
              -subpackages org.acmsl.bytehot \
              -windowtitle "ByteHot API Documentation" \
              -doctitle "ByteHot - JVM Bytecode Hot-Swapping Agent" \
              -header "ByteHot v1.0" \
              -bottom "Copyright ¬© 2025 ByteHot Project. Licensed under GPL v3." \
              -use -version -author \
              -Xdoclint:none \
              -quiet || echo "Direct javadoc also failed"
          fi
          
          # Check results
          echo "Final check for generated Javadocs:"
          if [ -d "bytehot/target/site/apidocs" ] && [ -n "$(ls -A bytehot/target/site/apidocs 2>/dev/null)" ]; then
            echo "‚úÖ Javadocs generated successfully!"
            echo "Files in apidocs:"
            ls -la bytehot/target/site/apidocs/ | head -10
          else
            echo "‚ùå Javadoc generation failed completely"
            echo "Creating fallback Javadocs..."
            mkdir -p bytehot/target/site/apidocs
            # Create fallback HTML using echo statements
            echo '<!DOCTYPE html>' > bytehot/target/site/apidocs/index.html
            echo '<html><head><title>ByteHot API Documentation</title>' >> bytehot/target/site/apidocs/index.html
            echo '<style>body{font-family:Arial,sans-serif;padding:20px}.error{color:#d73027;background:#fee;padding:15px;border-radius:5px}</style>' >> bytehot/target/site/apidocs/index.html
            echo '</head><body>' >> bytehot/target/site/apidocs/index.html
            echo '<h1>ByteHot API Documentation</h1>' >> bytehot/target/site/apidocs/index.html
            echo '<div class="error"><h2>Documentation Generation Failed</h2>' >> bytehot/target/site/apidocs/index.html
            echo '<p>The Javadoc generation process encountered issues. Please check the GitHub Actions logs for details.</p>' >> bytehot/target/site/apidocs/index.html
            echo '</div>' >> bytehot/target/site/apidocs/index.html
            echo '<p><a href="../../../index.html">‚Üê Back to Documentation Home</a></p>' >> bytehot/target/site/apidocs/index.html
            echo '</body></html>' >> bytehot/target/site/apidocs/index.html
          fi

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create or checkout gh-pages branch
        run: |
          # Check if remote gh-pages branch exists
          if git ls-remote --exit-code --heads origin gh-pages > /dev/null 2>&1; then
            echo "Remote gh-pages branch exists, checking out..."
            git fetch origin gh-pages
            git checkout -B gh-pages origin/gh-pages
          else
            echo "Creating new gh-pages branch..."
            git checkout --orphan gh-pages
            # Remove all files more safely
            git reset --hard
            git clean -fd
            # Create initial commit
            echo "# ByteHot Documentation" > README.md
            git add README.md
            git commit -m "üìö Initialize gh-pages branch for documentation"
          fi

      - name: Prepare documentation files
        run: |
          # Create a temporary directory to store generated docs
          mkdir -p /tmp/bytehot-docs
          
          # Copy Javadocs if they exist
          if [ -d "bytehot/target/site/apidocs" ]; then
            cp -r bytehot/target/site/apidocs /tmp/bytehot-docs/javadocs
            echo "Javadocs copied from Maven target to temp directory"
            echo "Javadocs directory contents:"
            ls -la /tmp/bytehot-docs/javadocs/ | head -10
          else
            echo "No Javadocs found, creating empty directory"
            mkdir -p /tmp/bytehot-docs/javadocs
            echo "<html><body><h1>Javadocs not available</h1></body></html>" > /tmp/bytehot-docs/javadocs/index.html
          fi
          
          # Copy source files for conversion (from root directory)
          echo "Copying source files from root directory..."
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la | grep -E '\.(org|md)$|^docs' || echo "No org/md files or docs directory found"
          
          if [ -f "story.org" ]; then
            cp story.org /tmp/bytehot-docs/
            echo "‚úÖ story.org copied"
          else
            echo "‚ùå story.org not found in $(pwd)"
          fi
          
          if [ -f "journal.org" ]; then
            cp journal.org /tmp/bytehot-docs/
            echo "‚úÖ journal.org copied"
          else
            echo "‚ùå journal.org not found in $(pwd)"
          fi
          
          if [ -d "docs" ]; then
            cp -r docs /tmp/bytehot-docs/
            echo "‚úÖ docs/ directory copied"
          else
            echo "‚ùå docs/ directory not found in $(pwd)"
          fi
          
          echo "Files in temp directory:"
          ls -la /tmp/bytehot-docs/

      - name: Switch to gh-pages and copy files
        run: |
          # Switch to gh-pages branch
          git checkout gh-pages
          
          # Create bytehot directory
          mkdir -p bytehot
          
          # Copy all prepared documentation
          cp -r /tmp/bytehot-docs/* bytehot/ || echo "Some files could not be copied"
          
          # List what we have
          echo "Files in bytehot directory:"
          ls -la bytehot/
          
          # Show which org files are available for conversion
          echo "Org files available for conversion:"
          find bytehot/ -name "*.org" -type f || echo "No .org files found"

      - name: Convert org files to HTML
        run: |
          # Create style.css from gh-pages branch or use basic styling
          if [ ! -f bytehot/style.css ]; then
            # Try to get existing style.css from gh-pages branch
            git show gh-pages:bytehot/style.css > bytehot/style.css 2>/dev/null || {
              # Create basic style.css if gh-pages doesn't exist
              echo "body{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,sans-serif;line-height:1.6;color:#333;max-width:1200px;margin:0 auto;padding:20px;background-color:#fafafa}" > bytehot/style.css
              echo ".navigation{background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);color:white;padding:15px;border-radius:8px;margin-bottom:30px;box-shadow:0 2px 10px rgba(0,0,0,0.1)}" >> bytehot/style.css
              echo ".navigation a{color:#fff;text-decoration:none;margin:0 15px;padding:8px 12px;border-radius:4px;transition:background-color 0.3s}" >> bytehot/style.css
              echo ".navigation a:hover{background-color:rgba(255,255,255,0.2)}" >> bytehot/style.css
              echo "h1,h2,h3{color:#2c3e50}" >> bytehot/style.css
              echo "h1{border-bottom:3px solid #667eea;padding-bottom:10px}" >> bytehot/style.css
              echo "code{background-color:#f4f4f4;padding:2px 6px;border-radius:3px;font-family:'Fira Code','Monaco','Consolas',monospace}" >> bytehot/style.css
              echo "pre{background-color:#f8f8f8;border:1px solid #ddd;border-radius:6px;padding:15px;overflow-x:auto}" >> bytehot/style.css
              echo "blockquote{border-left:4px solid #667eea;margin:20px 0;padding:10px 20px;background-color:#f9f9f9}" >> bytehot/style.css
              echo "table{border-collapse:collapse;width:100%;margin:20px 0}" >> bytehot/style.css
              echo "table th,table td{border:1px solid #ddd;padding:12px;text-align:left}" >> bytehot/style.css
              echo "table th{background-color:#667eea;color:white}" >> bytehot/style.css
            }
          fi
          
          # Convert story.org to index.html with navigation (check if file exists in bytehot directory)
          if [ -f "bytehot/story.org" ]; then
            pandoc -f org -t html5 -s --css=style.css --toc bytehot/story.org -o bytehot/index.html --metadata title="ByteHot - Revolutionary JVM Hot-Swapping Agent" || echo "story.org conversion failed, using fallback"
          else
            echo "story.org not found in bytehot directory, creating fallback index.html"
            echo "<html><head><title>ByteHot Documentation</title><link rel='stylesheet' href='style.css'></head><body><h1>ByteHot Documentation</h1><p>Documentation generation in progress...</p></body></html>" > bytehot/index.html
          fi
          
          # Add navigation to index.html if conversion succeeded
          if [ -f bytehot/index.html ]; then
            # Create temp file with navigation using echo
            echo '<div class="navigation">' > temp_nav.html
            echo '  <strong>ByteHot Documentation</strong> |' >> temp_nav.html
            echo '  <a href="index.html">üè† Home</a>' >> temp_nav.html
            echo '  <a href="javadocs/index.html">üìñ API Documentation</a>' >> temp_nav.html
            echo '  <a href="journal.html">üìù Development Journal</a>' >> temp_nav.html
            echo '  <a href="docs/configuration.html">‚öôÔ∏è Configuration Guide</a>' >> temp_nav.html
            echo '  <a href="docs/User.html">üë§ User Management</a>' >> temp_nav.html
            echo '  <a href="docs/flows/user-management-flow.html">üîÑ User Flow</a>' >> temp_nav.html
            echo '  <a href="https://github.com/rydnr/bytehot">üîó GitHub</a>' >> temp_nav.html
            echo '</div>' >> temp_nav.html
            # Insert navigation after <body> tag
            sed -i '/<body>/r temp_nav.html' bytehot/index.html
            rm temp_nav.html
          fi
          
          # Convert journal.org to journal.html
          if [ -f "bytehot/journal.org" ]; then
            pandoc -f org -t html5 -s --css=style.css --toc bytehot/journal.org -o bytehot/journal.html --metadata title="ByteHot Development Journal" || echo "journal.org conversion failed"
          else
            echo "journal.org not found, creating fallback"
            echo "<html><head><title>ByteHot Development Journal</title><link rel='stylesheet' href='style.css'></head><body><h1>Development Journal</h1><p>Journal content not available</p></body></html>" > bytehot/journal.html
          fi
          
          # Convert docs/*.org files if they exist
          mkdir -p bytehot/docs bytehot/docs/flows
          
          # Convert documentation files
          if [ -d "bytehot/docs" ]; then
            for file in bytehot/docs/*.org bytehot/docs/*.md; do
              if [ -f "$file" ]; then
                basename=$(basename "$file" .org)
                basename=$(basename "$basename" .md)
                if [[ "$file" == *.org ]]; then
                  pandoc -f org -t html5 -s --css=../style.css --toc "$file" -o "bytehot/docs/${basename}.html" || echo "Failed to convert $file"
                else
                  pandoc -f markdown -t html5 -s --css=../style.css --toc "$file" -o "bytehot/docs/${basename}.html" || echo "Failed to convert $file"
                fi
              fi
            done
          fi
          
          # Convert flow documentation
          if [ -d "bytehot/docs/flows" ]; then
            for file in bytehot/docs/flows/*.org; do
              if [ -f "$file" ]; then
                basename=$(basename "$file" .org)
                pandoc -f org -t html5 -s --css=../../style.css --toc "$file" -o "bytehot/docs/flows/${basename}.html" || echo "Failed to convert $file"
              fi
            done
          fi

      - name: Create site README
        run: |
          # Create comprehensive README.md for the documentation site
          echo "# ByteHot Documentation Site" > bytehot/README.md
          echo "" >> bytehot/README.md
          echo "Welcome to the comprehensive documentation for **ByteHot** - the revolutionary JVM agent that enables real-time bytecode hot-swapping during application runtime." >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "## üöÄ Quick Start" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "- **[üìñ Start Here - ByteHot Story](index.html)** - Complete project vision, architecture, and development philosophy" >> bytehot/README.md
          echo "- **[‚öôÔ∏è Configuration Guide](docs/configuration.html)** - Get up and running with ByteHot in minutes" >> bytehot/README.md
          echo "- **[üìã API Reference](javadocs/index.html)** - Complete Javadoc documentation for developers" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "## üìö Documentation Sections" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "### Core Documentation" >> bytehot/README.md
          echo "- **[üè† Home - Project Story](index.html)** - Vision, goals, and architectural overview" >> bytehot/README.md
          echo "- **[üìù Development Journal](journal.html)** - Detailed development history and technical decisions" >> bytehot/README.md
          echo "- **[‚öôÔ∏è Configuration Reference](docs/configuration.html)** - Complete setup and configuration guide" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "### API & Architecture" >> bytehot/README.md
          echo "- **[üìñ API Documentation](javadocs/index.html)** - Complete Javadoc API reference" >> bytehot/README.md
          echo "- **[üë§ User Management](docs/User.html)** - User aggregate and domain model documentation" >> bytehot/README.md
          echo "- **[üîÑ User Flow](docs/flows/user-management-flow.html)** - Complete user lifecycle documentation" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "## üèóÔ∏è Site Structure" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "\`\`\`" >> bytehot/README.md
          echo "bytehot-docs/" >> bytehot/README.md
          echo "‚îú‚îÄ‚îÄ index.html              # Main documentation hub" >> bytehot/README.md
          echo "‚îú‚îÄ‚îÄ journal.html            # Development journal" >> bytehot/README.md
          echo "‚îú‚îÄ‚îÄ style.css               # Site styling" >> bytehot/README.md
          echo "‚îú‚îÄ‚îÄ javadocs/               # API documentation" >> bytehot/README.md
          echo "‚îÇ   ‚îî‚îÄ‚îÄ index.html" >> bytehot/README.md
          echo "‚îú‚îÄ‚îÄ docs/" >> bytehot/README.md
          echo "‚îÇ   ‚îú‚îÄ‚îÄ configuration.html  # Configuration guide" >> bytehot/README.md
          echo "‚îÇ   ‚îú‚îÄ‚îÄ User.html          # User domain model" >> bytehot/README.md
          echo "‚îÇ   ‚îî‚îÄ‚îÄ flows/             # Process flows" >> bytehot/README.md
          echo "‚îî‚îÄ‚îÄ README.md              # This file" >> bytehot/README.md
          echo "\`\`\`" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "## üöÄ Current Status" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "**Implementation Status:** Milestone 6C completed with 159/160 tests passing (99.4% success rate)" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "### ‚úÖ Completed Features" >> bytehot/README.md
          echo "- **EventSourcing Infrastructure** - Complete event persistence and replay" >> bytehot/README.md
          echo "- **User Management Domain** - Auto-discovery, authentication, session tracking" >> bytehot/README.md
          echo "- **Event-Driven Testing** - Revolutionary Given/When/Then framework" >> bytehot/README.md
          echo "- **Hexagonal Architecture** - Clean boundaries with Ports & Adapters" >> bytehot/README.md
          echo "- **Instance Management** - Object state preservation across redefinitions" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "### üìã Next Milestones" >> bytehot/README.md
          echo "- **Milestone 6D:** Event-Driven Bug Reporting" >> bytehot/README.md
          echo "- **Milestone 6E:** Flow Detection" >> bytehot/README.md
          echo "- **Milestone 6F:** Java-Commons Refactoring" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "## üîó External Links" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "- **[GitHub Repository](https://github.com/rydnr/bytehot)** - Source code and development" >> bytehot/README.md
          echo "- **[Issues & Discussions](https://github.com/rydnr/bytehot/issues)** - Bug reports and feature requests" >> bytehot/README.md
          echo "- **[Releases](https://github.com/rydnr/bytehot/releases)** - Download ByteHot releases" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "---" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "*This documentation site is automatically generated and updated via GitHub Actions.*" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "**Last Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> bytehot/README.md

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './bytehot'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-docs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4