name: Build and Deploy Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC to keep documentation fresh
    - cron: '0 2 * * *'

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper git operations

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc

      - name: Verify Pandoc installation
        run: pandoc --version

      - name: Build project and install dependencies
        run: |
          # Build and install the multi-module project from root
          mvn clean install -DskipTests -q

      - name: Generate Javadocs
        run: |
          # Generate Javadocs using multiple approaches
          echo "üîß Attempting to generate Javadocs..."
          
          # Create javadocs directories for all modules
          mkdir -p target/site/apidocs
          
          # Strategy 1: Try Maven aggregate javadoc for all modules
          echo "üìã Strategy 1: Maven aggregate javadoc for all modules..."
          mvn javadoc:aggregate \
            -DfailOnError=false \
            -Dadditionalparam="-Xdoclint:none" \
            -Dmaven.javadoc.skip=false \
            -Dquiet=false || echo "Maven aggregate javadoc failed"
          
          # Strategy 2: Try individual module javadocs
          if [ ! -d "target/site/apidocs" ] || [ -z "$(ls -A target/site/apidocs 2>/dev/null)" ]; then
            echo "üìã Strategy 2: Individual module javadocs..."
            for module in java-commons bytehot-domain bytehot-application bytehot-infrastructure; do
              echo "Generating javadoc for $module..."
              mvn javadoc:javadoc -pl $module \
                -DfailOnError=false \
                -Dadditionalparam="-Xdoclint:none" || echo "Javadoc failed for $module"
            done
            
            # Aggregate individual module docs
            mkdir -p target/site/apidocs
            for module in java-commons bytehot-domain bytehot-application bytehot-infrastructure; do
              if [ -d "$module/target/site/apidocs" ]; then
                cp -r "$module/target/site/apidocs/"* target/site/apidocs/ 2>/dev/null || true
                echo "‚úÖ Copied javadocs from $module"
              fi
            done
          fi
          
          # Strategy 3: Direct javadoc command
          if [ ! -d "target/site/apidocs" ] || [ -z "$(ls -A target/site/apidocs 2>/dev/null)" ]; then
            echo "üìã Strategy 3: Direct javadoc command for all modules..."
            
            # Build comprehensive classpath from all modules
            echo "Building classpath from all modules..."
            CLASSPATH=""
            for module in java-commons bytehot-domain bytehot-application bytehot-infrastructure; do
              if [ -d "$module" ]; then
                MODULE_CP=$(mvn dependency:build-classpath -pl $module -Dmdep.outputFile=/dev/stdout -q 2>/dev/null | tail -1)
                if [ -n "$MODULE_CP" ]; then
                  CLASSPATH="$CLASSPATH:$MODULE_CP:$module/target/classes"
                fi
              fi
            done
            echo "Total classpath length: ${#CLASSPATH}"
            
            # Generate Javadocs directly for all source paths
            echo "Running direct javadoc command..."
            SOURCEPATHS=""
            for module in java-commons bytehot-domain bytehot-application bytehot-infrastructure; do
              if [ -d "$module/src/main/java" ]; then
                SOURCEPATHS="$SOURCEPATHS:$module/src/main/java"
              fi
            done
            SOURCEPATHS=${SOURCEPATHS#:}  # Remove leading colon
            
            javadoc -d target/site/apidocs \
              -sourcepath "$SOURCEPATHS" \
              -classpath "$CLASSPATH" \
              -subpackages org.acmsl.bytehot \
              -windowtitle "ByteHot API Documentation" \
              -doctitle "ByteHot - JVM Bytecode Hot-Swapping Agent" \
              -header "ByteHot v1.0" \
              -bottom "Copyright ¬© 2025 ByteHot Project. Licensed under GPL v3." \
              -use -version -author \
              -Xdoclint:none \
              -quiet || echo "Direct javadoc also failed"
          fi
          
          # Check all possible locations for javadocs
          echo "üîç Checking all possible javadoc locations..."
          find . -name "*apidocs*" -type d 2>/dev/null || echo "No apidocs directories found"
          find . -path "*/target/site*" -type d 2>/dev/null || echo "No target/site directories found"
          
          # Check results and create fallback if needed
          echo "üìä Final check for generated Javadocs:"
          if [ -d "target/site/apidocs" ] && [ -n "$(ls -A target/site/apidocs 2>/dev/null)" ]; then
            echo "‚úÖ Javadocs generated successfully!"
            echo "Files in apidocs (first 10):"
            ls -la target/site/apidocs/ | head -10
            echo "Total files: $(find target/site/apidocs -type f | wc -l)"
          else
            echo "‚ùå Javadoc generation failed completely"
            echo "üîß Creating fallback Javadocs..."
            mkdir -p target/site/apidocs
            # Create better fallback HTML using echo statements
            echo '<!DOCTYPE html>' > target/site/apidocs/index.html
            echo '<html>' >> target/site/apidocs/index.html
            echo '<head>' >> target/site/apidocs/index.html
            echo '    <title>ByteHot API Documentation</title>' >> target/site/apidocs/index.html
            echo '    <style>' >> target/site/apidocs/index.html
            echo '        body{font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif;line-height:1.6;color:#333;max-width:800px;margin:0 auto;padding:20px}' >> target/site/apidocs/index.html
            echo '        .error{color:#d73027;background:#fee;padding:20px;border-radius:8px;margin:20px 0;border-left:4px solid #d73027}' >> target/site/apidocs/index.html
            echo '        .info{background:#e7f3ff;padding:20px;border-radius:8px;margin:20px 0;border-left:4px solid #2196F3}' >> target/site/apidocs/index.html
            echo '        h1{color:#2c3e50;border-bottom:2px solid #3498db;padding-bottom:10px}' >> target/site/apidocs/index.html
            echo '        a{color:#3498db;text-decoration:none}' >> target/site/apidocs/index.html
            echo '        a:hover{text-decoration:underline}' >> target/site/apidocs/index.html
            echo '    </style>' >> target/site/apidocs/index.html
            echo '</head>' >> target/site/apidocs/index.html
            echo '<body>' >> target/site/apidocs/index.html
            echo '    <h1>ByteHot API Documentation</h1>' >> target/site/apidocs/index.html
            echo '    <div class="error">' >> target/site/apidocs/index.html
            echo '        <h2>‚ö†Ô∏è Documentation Generation Failed</h2>' >> target/site/apidocs/index.html
            echo '        <p>The automated Javadoc generation process encountered issues. This may be due to:</p>' >> target/site/apidocs/index.html
            echo '        <ul>' >> target/site/apidocs/index.html
            echo '            <li>Strict documentation linting requirements</li>' >> target/site/apidocs/index.html
            echo '            <li>Missing documentation comments</li>' >> target/site/apidocs/index.html
            echo '            <li>Classpath resolution issues</li>' >> target/site/apidocs/index.html
            echo '        </ul>' >> target/site/apidocs/index.html
            echo '    </div>' >> target/site/apidocs/index.html
            echo '    <div class="info">' >> target/site/apidocs/index.html
            echo '        <h3>üìã Alternative Documentation Sources</h3>' >> target/site/apidocs/index.html
            echo '        <p>While we work on resolving the Javadoc generation, you can explore:</p>' >> target/site/apidocs/index.html
            echo '        <ul>' >> target/site/apidocs/index.html
            echo '            <li><a href="../../../index.html">üè† ByteHot Documentation Home</a></li>' >> target/site/apidocs/index.html
            echo '            <li><a href="https://github.com/rydnr/bytehot">üìÇ Source Code on GitHub</a></li>' >> target/site/apidocs/index.html
            echo '            <li><a href="../../../docs/configuration.html">‚öôÔ∏è Configuration Guide</a></li>' >> target/site/apidocs/index.html
            echo '        </ul>' >> target/site/apidocs/index.html
            echo '    </div>' >> target/site/apidocs/index.html
            echo '    <p><em>This page was generated automatically. Check the <a href="https://github.com/rydnr/bytehot/actions">GitHub Actions logs</a> for more details.</em></p>' >> target/site/apidocs/index.html
            echo '</body>' >> target/site/apidocs/index.html
            echo '</html>' >> target/site/apidocs/index.html
            echo "üìÑ Created fallback documentation page"
          fi

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Prepare documentation files before branch switch
        run: |
          # Create a temporary directory to store generated docs
          mkdir -p /tmp/bytehot-docs
          
          # Find and copy Javadocs from any location
          echo "üîç Searching for generated Javadocs..."
          JAVADOC_PATHS=(
            "target/site/apidocs"
            "java-commons/target/site/apidocs"
            "bytehot-domain/target/site/apidocs"
            "bytehot-application/target/site/apidocs"
            "bytehot-infrastructure/target/site/apidocs"
            "target/apidocs"
          )
          
          JAVADOCS_FOUND=false
          for path in "${JAVADOC_PATHS[@]}"; do
            if [ -d "$path" ] && [ -n "$(ls -A "$path" 2>/dev/null)" ]; then
              echo "‚úÖ Found Javadocs in: $path"
              cp -r "$path" /tmp/bytehot-docs/javadocs
              JAVADOCS_FOUND=true
              echo "üìã Javadocs directory contents:"
              ls -la /tmp/bytehot-docs/javadocs/ | head -10
              echo "üìä Total files: $(find /tmp/bytehot-docs/javadocs -type f | wc -l)"
              break
            fi
          done
          
          if [ "$JAVADOCS_FOUND" = false ]; then
            echo "‚ùå No Javadocs found in any expected location"
            echo "üîç Searching entire workspace for apidocs..."
            find . -name "*apidocs*" -type d 2>/dev/null | head -5 || echo "No apidocs directories found anywhere"
            
            mkdir -p /tmp/bytehot-docs/javadocs
            echo "üîß Creating placeholder Javadoc index..."
            echo '<!DOCTYPE html>' > /tmp/bytehot-docs/javadocs/index.html
            echo '<html>' >> /tmp/bytehot-docs/javadocs/index.html
            echo '<head><title>ByteHot API Documentation</title></head>' >> /tmp/bytehot-docs/javadocs/index.html
            echo '<body>' >> /tmp/bytehot-docs/javadocs/index.html
            echo '    <h1>ByteHot API Documentation</h1>' >> /tmp/bytehot-docs/javadocs/index.html
            echo '    <p><strong>Note:</strong> Javadocs are being generated. Please check back later or view the source code directly.</p>' >> /tmp/bytehot-docs/javadocs/index.html
            echo '    <p><a href="https://github.com/rydnr/bytehot">View Source Code on GitHub</a></p>' >> /tmp/bytehot-docs/javadocs/index.html
            echo '</body>' >> /tmp/bytehot-docs/javadocs/index.html
            echo '</html>' >> /tmp/bytehot-docs/javadocs/index.html
          fi
          
          # Copy source files for conversion (from root directory)
          echo "üìÅ Copying source files from root directory..."
          echo "üìç Current directory: $(pwd)"
          echo "üìã Files in current directory:"
          ls -la | grep -E '\.(org|md)$|^docs' || echo "No org/md files or docs directory found in current directory"
          
          echo "üîç Looking for files in repository root..."
          ls -la | head -20
          
          # Find and copy story.org
          if [ -f "story.org" ]; then
            cp story.org /tmp/bytehot-docs/
            echo "‚úÖ story.org copied from root"
          elif [ -f "../story.org" ]; then
            cp ../story.org /tmp/bytehot-docs/
            echo "‚úÖ story.org copied from parent directory"
          else
            echo "‚ùå story.org not found in $(pwd) or parent directory"
            echo "üîç Searching for story.org..."
            find . -name "story.org" -type f 2>/dev/null || echo "story.org not found anywhere"
          fi
          
          # Find and copy journal.org
          if [ -f "journal.org" ]; then
            cp journal.org /tmp/bytehot-docs/
            echo "‚úÖ journal.org copied from root"
          elif [ -f "../journal.org" ]; then
            cp ../journal.org /tmp/bytehot-docs/
            echo "‚úÖ journal.org copied from parent directory"
          else
            echo "‚ùå journal.org not found in $(pwd) or parent directory"
            echo "üîç Searching for journal.org..."
            find . -name "journal.org" -type f 2>/dev/null || echo "journal.org not found anywhere"
          fi
          
          # Find and copy docs directory
          if [ -d "docs" ]; then
            cp -r docs /tmp/bytehot-docs/
            echo "‚úÖ docs/ directory copied from root"
          elif [ -d "../docs" ]; then
            cp -r ../docs /tmp/bytehot-docs/
            echo "‚úÖ docs/ directory copied from parent directory"
          else
            echo "‚ùå docs/ directory not found in $(pwd) or parent directory"
            echo "üîç Searching for docs directory..."
            find . -name "docs" -type d 2>/dev/null || echo "docs directory not found anywhere"
          fi
          
          # Also copy specs directory if it exists
          if [ -d "specs" ]; then
            cp -r specs /tmp/bytehot-docs/
            echo "‚úÖ specs/ directory copied from root"
          elif [ -d "../specs" ]; then
            cp -r ../specs /tmp/bytehot-docs/
            echo "‚úÖ specs/ directory copied from parent directory"
          else
            echo "‚ÑπÔ∏è specs/ directory not found (this is optional)"
          fi
          
          echo "üìä Final temp directory contents:"
          ls -la /tmp/bytehot-docs/

      - name: Create or checkout gh-pages branch
        run: |
          # Check if remote gh-pages branch exists
          if git ls-remote --exit-code --heads origin gh-pages > /dev/null 2>&1; then
            echo "Remote gh-pages branch exists, checking out..."
            git fetch origin gh-pages
            git checkout -B gh-pages origin/gh-pages
          else
            echo "Creating new gh-pages branch..."
            git checkout --orphan gh-pages
            # Remove all files more safely
            git reset --hard
            git clean -fd
            # Create initial commit
            echo "# ByteHot Documentation" > README.md
            git add README.md
            git commit -m "üìö Initialize gh-pages branch for documentation"
          fi

      - name: Copy files to gh-pages and convert
        run: |
          # Ensure we're on gh-pages branch (should already be from previous step)
          git checkout gh-pages
          
          # Create bytehot directory
          mkdir -p bytehot
          
          # Copy all prepared documentation from temp directory
          echo "üìÅ Copying documentation from temp directory..."
          cp -r /tmp/bytehot-docs/* bytehot/ 2>/dev/null || echo "Some files could not be copied (this might be normal)"
          
          # List what we have
          echo "üìã Files in bytehot directory after copy:"
          ls -la bytehot/
          
          # Show which org files are available for conversion
          echo "üìÑ Org files available for conversion:"
          find bytehot/ -name "*.org" -type f 2>/dev/null || echo "No .org files found"
          
          # Show which md files are available for conversion
          echo "üìÑ Markdown files available for conversion:"
          find bytehot/ -name "*.md" -type f 2>/dev/null || echo "No .md files found"

      - name: Convert documentation files to HTML
        run: |
          # Copy the comprehensive ByteHot CSS styling
          echo "üìé Copying ByteHot CSS styling..."
          if cp .github/resources/bytehot-style.css bytehot/style.css; then
            echo "‚úÖ ByteHot CSS successfully copied"
          else
            echo "‚ö†Ô∏è Fallback: Creating comprehensive CSS styling..."
            echo "/* ByteHot Documentation Styling - Fallback */" > bytehot/style.css
            echo "body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif; max-width: 1280px; margin: 0 auto; padding: 0; line-height: 1.6; color: #333; }" >> bytehot/style.css
            echo "h1 { color: #2c3e50; font-size: 2.5rem; border-bottom: 3px solid #3498db; padding-bottom: 0.5rem; }" >> bytehot/style.css
            echo "h2 { color: #34495e; font-size: 1.8rem; border-left: 4px solid #3498db; padding-left: 1rem; }" >> bytehot/style.css
            echo "code { background: #f8f9fa; color: #e74c3c; padding: 0.2rem 0.4rem; border-radius: 4px; font-weight: 600; }" >> bytehot/style.css
            echo "pre { background: #f8f9fa; border: 1px solid #e1e8ed; padding: 1.5rem; border-radius: 8px; overflow-x: auto; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }" >> bytehot/style.css
            echo ".navigation { background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%); color: white; padding: 0.75rem 1rem; margin-bottom: 2rem; width: 100%; box-sizing: border-box; display: flex; flex-wrap: wrap; align-items: center; }" >> bytehot/style.css
            echo ".navigation a { color: #ecf0f1; text-decoration: none; padding: 0.4rem 0.8rem; margin: 0.2rem 0.3rem; border-radius: 4px; white-space: nowrap; }" >> bytehot/style.css
            echo ".navigation a:hover { background: rgba(255,255,255,0.1); }" >> bytehot/style.css
            echo ".footer { background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%); color: #ecf0f1; text-align: center; padding: 0.5rem 0; margin-top: 2rem; width: 100%; box-sizing: border-box; font-size: 0.9rem; }" >> bytehot/style.css
            echo ".footer a { color: #3498db; text-decoration: none; }" >> bytehot/style.css
            echo ".footer a:hover { text-decoration: underline; }" >> bytehot/style.css
            echo "main { padding: 2rem; }" >> bytehot/style.css
            echo "ul, ol { text-align: left; margin: 1rem 0; padding-left: 2rem; }" >> bytehot/style.css
            echo "li { margin: 0.5rem 0; text-align: left; }" >> bytehot/style.css
            echo "ul li { list-style-type: disc; list-style-position: outside; }" >> bytehot/style.css
            echo "ol li { list-style-type: decimal; list-style-position: outside; }" >> bytehot/style.css
            echo "@media (max-width: 768px) { .navigation { padding: 0.5rem; } .navigation a { padding: 0.3rem 0.6rem; margin: 0.1rem 0.2rem; font-size: 0.9rem; } main { padding: 1rem; } }" >> bytehot/style.css
            echo "@media (max-width: 480px) { .navigation { flex-direction: column; align-items: stretch; } .navigation a { margin: 0.1rem 0; text-align: center; } }" >> bytehot/style.css
          fi
          
          # Convert story.org to index.html with navigation (check if file exists in bytehot directory)
          if [ -f "bytehot/story.org" ]; then
            # Convert content only, then wrap in proper HTML structure
            pandoc -f org -t html5 --toc bytehot/story.org -o bytehot/index_content.html --metadata title="ByteHot - Revolutionary JVM Hot-Swapping Agent" || echo "story.org conversion failed, using fallback"
            
            # Create complete HTML structure
            cat > bytehot/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>ByteHot - Revolutionary JVM Hot-Swapping Agent</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
EOF
            
            # Add content if it exists
            if [ -f "bytehot/index_content.html" ]; then
              cat bytehot/index_content.html >> bytehot/index.html
              rm bytehot/index_content.html
            fi
            
            # Close HTML structure
            echo '</body></html>' >> bytehot/index.html
          else
            echo "story.org not found in bytehot directory, creating fallback index.html"
            echo "<html><head><title>ByteHot Documentation</title><link rel='stylesheet' href='style.css'></head><body><h1>ByteHot Documentation</h1><p>Documentation generation in progress...</p></body></html>" > bytehot/index.html
          fi
          
          # Create enhanced navigation and footer components
          echo "üé® Creating enhanced navigation and footer components..."
          
          # Create navigation component
          echo '<div class="navigation">' > temp_nav.html
          echo '  <div class="container">' >> temp_nav.html
          echo '    <strong>ByteHot Documentation</strong>' >> temp_nav.html
          echo '    <a href="index.html">üè† Home</a>' >> temp_nav.html
          echo '    <a href="GETTING_STARTED.html" class="getting-started">üöÄ Getting Started</a>' >> temp_nav.html
          echo '    <a href="implementation.html">‚öôÔ∏è Implementation</a>' >> temp_nav.html
          echo '    <a href="specs/README.html">üìã Specifications</a>' >> temp_nav.html
          echo '    <a href="javadocs/index.html">üìñ API Docs</a>' >> temp_nav.html
          echo '    <a href="journal.html">üìù Journal</a>' >> temp_nav.html
          echo '    <a href="docs/configuration.html">üîß Config</a>' >> temp_nav.html
          echo '    <a href="docs/flows/index.html">üîÑ Flows</a>' >> temp_nav.html
          echo '    <a href="https://github.com/rydnr/bytehot">üîó GitHub</a>' >> temp_nav.html
          echo '  </div>' >> temp_nav.html
          echo '</div>' >> temp_nav.html
          
          # Create compact footer component
          echo '<footer class="footer">' > temp_footer.html
          echo '  <p><strong>ByteHot</strong> - Revolutionary JVM Hot-Swapping Agent | ' >> temp_footer.html
          echo '  <a href="https://github.com/rydnr/bytehot">GitHub</a> | ' >> temp_footer.html
          echo '  <a href="GETTING_STARTED.html">Getting Started</a> | ' >> temp_footer.html
          echo '  <a href="javadocs/index.html">API Docs</a> | ' >> temp_footer.html
          echo '  <a href="https://github.com/rydnr/bytehot/blob/main/LICENSE">GPL v3</a></p>' >> temp_footer.html
          echo '</footer>' >> temp_footer.html
          
          # Convert journal.org to journal.html
          if [ -f "bytehot/journal.org" ]; then
            # Convert content only, then wrap in proper HTML structure
            pandoc -f org -t html5 --toc bytehot/journal.org -o bytehot/journal_content.html --metadata title="ByteHot Development Journal" || echo "journal.org conversion failed"
            
            # Create complete HTML structure
            cat > bytehot/journal.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>ByteHot Development Journal</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
EOF
            
            # Add content if it exists
            if [ -f "bytehot/journal_content.html" ]; then
              cat bytehot/journal_content.html >> bytehot/journal.html
              rm bytehot/journal_content.html
            fi
            
            # Close HTML structure
            echo '</body></html>' >> bytehot/journal.html
          else
            echo "journal.org not found, creating fallback"
            echo "<html><head><title>ByteHot Development Journal</title><link rel='stylesheet' href='style.css'></head><body><h1>Development Journal</h1><p>Journal content not available</p></body></html>" > bytehot/journal.html
          fi
          
          # Convert docs/*.org files if they exist
          mkdir -p bytehot/docs bytehot/docs/flows bytehot/specs
          
          # Convert documentation files
          if [ -d "bytehot/docs" ]; then
            echo "üìÑ Converting docs/*.org and *.md files..."
            for file in bytehot/docs/*.org bytehot/docs/*.md; do
              if [ -f "$file" ]; then
                basename=$(basename "$file" .org)
                basename=$(basename "$basename" .md)
                echo "Converting: $file -> bytehot/docs/${basename}.html"
                # Create proper HTML structure for each file
                cat > "bytehot/docs/${basename}.html" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>${basename} - ByteHot Documentation</title>
    <link rel="stylesheet" href="../style.css">
</head>
<body>
EOF
                
                if [[ "$file" == *.org ]]; then
                  pandoc -f org -t html5 --toc "$file" -o "bytehot/docs/${basename}_content.html" || echo "Failed to convert $file"
                else
                  pandoc -f markdown -t html5 --toc "$file" -o "bytehot/docs/${basename}_content.html" || echo "Failed to convert $file"
                fi
                
                # Add content if it exists
                if [ -f "bytehot/docs/${basename}_content.html" ]; then
                  cat "bytehot/docs/${basename}_content.html" >> "bytehot/docs/${basename}.html"
                  rm "bytehot/docs/${basename}_content.html"
                fi
                
                # Close HTML structure
                echo '</body></html>' >> "bytehot/docs/${basename}.html"
              fi
            done
          fi
          
          # Convert flow documentation
          if [ -d "bytehot/docs/flows" ]; then
            echo "üìÑ Converting docs/flows/*.org files..."
            for file in bytehot/docs/flows/*.org; do
              if [ -f "$file" ]; then
                basename=$(basename "$file" .org)
                echo "Converting flow: $file -> bytehot/docs/flows/${basename}.html"
                pandoc -f org -t html5 -s --css=../../style.css --toc "$file" -o "bytehot/docs/flows/${basename}.html" || echo "Failed to convert $file"
              fi
            done
            
            # Create flows index page
            echo "üìÑ Creating flows index page..."
            echo '<!DOCTYPE html>' > bytehot/docs/flows/index.html
            echo '<html>' >> bytehot/docs/flows/index.html
            echo '<head>' >> bytehot/docs/flows/index.html
            echo '    <title>ByteHot Process Flows</title>' >> bytehot/docs/flows/index.html
            echo '    <link rel="stylesheet" href="../../style.css">' >> bytehot/docs/flows/index.html
            echo '</head>' >> bytehot/docs/flows/index.html
            echo '<body>' >> bytehot/docs/flows/index.html
            echo '    <div class="navigation">' >> bytehot/docs/flows/index.html
            echo '        <strong>ByteHot Documentation</strong> |' >> bytehot/docs/flows/index.html
            echo '        <a href="../../index.html">üè† Home</a>' >> bytehot/docs/flows/index.html
            echo '        <a href="../../GETTING_STARTED.html" class="getting-started">üöÄ Getting Started</a>' >> bytehot/docs/flows/index.html
            echo '        <a href="../../implementation.html">‚öôÔ∏è Implementation</a>' >> bytehot/docs/flows/index.html
            echo '        <a href="../../specs/README.html">üìã Specifications</a>' >> bytehot/docs/flows/index.html
            echo '        <a href="../../javadocs/index.html">üìñ API Docs</a>' >> bytehot/docs/flows/index.html
            echo '        <a href="../../journal.html">üìù Journal</a>' >> bytehot/docs/flows/index.html
            echo '        <a href="../configuration.html">üîß Config</a>' >> bytehot/docs/flows/index.html
            echo '        <a href="index.html">üîÑ Flows</a>' >> bytehot/docs/flows/index.html
            echo '        <a href="https://github.com/rydnr/bytehot">üîó GitHub</a>' >> bytehot/docs/flows/index.html
            echo '    </div>' >> bytehot/docs/flows/index.html
            echo '    <h1>ByteHot Process Flows</h1>' >> bytehot/docs/flows/index.html
            echo '    <p>This section documents the key process flows in the ByteHot system, showing how different components interact during various operations.</p>' >> bytehot/docs/flows/index.html
            echo '    <div class="flow-grid">' >> bytehot/docs/flows/index.html
            echo '        <div class="flow-card">' >> bytehot/docs/flows/index.html
            echo '            <h3><a href="agent-startup-flow.html">üöÄ Agent Startup Flow</a></h3>' >> bytehot/docs/flows/index.html
            echo '            <p>Documents the JVM agent initialization process, from attachment to ready state.</p>' >> bytehot/docs/flows/index.html
            echo '        </div>' >> bytehot/docs/flows/index.html
            echo '        <div class="flow-card">' >> bytehot/docs/flows/index.html
            echo '            <h3><a href="error-recovery-flow.html">‚ùå Error Recovery Flow</a></h3>' >> bytehot/docs/flows/index.html
            echo '            <p>Describes error handling and recovery procedures for various failure scenarios.</p>' >> bytehot/docs/flows/index.html
            echo '        </div>' >> bytehot/docs/flows/index.html
            echo '        <div class="flow-card">' >> bytehot/docs/flows/index.html
            echo '            <h3><a href="framework-integration-flow.html">üîß Framework Integration Flow</a></h3>' >> bytehot/docs/flows/index.html
            echo '            <p>Shows how ByteHot integrates with external frameworks and libraries.</p>' >> bytehot/docs/flows/index.html
            echo '        </div>' >> bytehot/docs/flows/index.html
            echo '        <div class="flow-card">' >> bytehot/docs/flows/index.html
            echo '            <h3><a href="hot-swap-complete-flow.html">üîÑ Hot-Swap Complete Flow</a></h3>' >> bytehot/docs/flows/index.html
            echo '            <p>Complete lifecycle of a hot-swap operation from file change to completion.</p>' >> bytehot/docs/flows/index.html
            echo '        </div>' >> bytehot/docs/flows/index.html
            echo '        <div class="flow-card">' >> bytehot/docs/flows/index.html
            echo '            <h3><a href="rollback-coordination-flow.html">üîô Rollback Coordination Flow</a></h3>' >> bytehot/docs/flows/index.html
            echo '            <p>Rollback and recovery coordination when hot-swap operations fail.</p>' >> bytehot/docs/flows/index.html
            echo '        </div>' >> bytehot/docs/flows/index.html
            echo '        <div class="flow-card">' >> bytehot/docs/flows/index.html
            echo '            <h3><a href="user-management-flow.html">üë§ User Management Flow</a></h3>' >> bytehot/docs/flows/index.html
            echo '            <p>User lifecycle and session management throughout the system.</p>' >> bytehot/docs/flows/index.html
            echo '        </div>' >> bytehot/docs/flows/index.html
            echo '    </div>' >> bytehot/docs/flows/index.html
            echo '</body>' >> bytehot/docs/flows/index.html
            echo '</html>' >> bytehot/docs/flows/index.html
          fi
          
          # Convert specs documentation
          if [ -d "bytehot/specs" ]; then
            echo "üìÑ Converting specs/*.md files..."
            for file in bytehot/specs/*.md; do
              if [ -f "$file" ]; then
                basename=$(basename "$file" .md)
                echo "Converting spec: $file -> bytehot/specs/${basename}.html"
                pandoc -f markdown -t html5 -s --css=../style.css --toc "$file" -o "bytehot/specs/${basename}.html" || echo "Failed to convert $file"
              fi
            done
          fi
          
          # Create Implementation index page
          echo "üìÑ Creating implementation index page..."
          echo '<!DOCTYPE html>' > bytehot/implementation.html
          echo '<html>' >> bytehot/implementation.html
          echo '<head>' >> bytehot/implementation.html
          echo '    <title>ByteHot Implementation - Literate Programming Documentation</title>' >> bytehot/implementation.html
          echo '    <link rel="stylesheet" href="style.css">' >> bytehot/implementation.html
          echo '</head>' >> bytehot/implementation.html
          echo '<body>' >> bytehot/implementation.html
          echo '    <div class="navigation">' >> bytehot/implementation.html
          echo '        <strong>ByteHot Documentation</strong> |' >> bytehot/implementation.html
          echo '        <a href="index.html">üè† Home</a>' >> bytehot/implementation.html
          echo '        <a href="GETTING_STARTED.html" class="getting-started">üöÄ Getting Started</a>' >> bytehot/implementation.html
          echo '        <a href="implementation.html">‚öôÔ∏è Implementation</a>' >> bytehot/implementation.html
          echo '        <a href="literate-docs.html" class="literate-docs">üìö Literate Docs</a>' >> bytehot/implementation.html
          echo '        <a href="specs/README.html">üìã Specifications</a>' >> bytehot/implementation.html
          echo '        <a href="javadocs/index.html">üìñ API Docs</a>' >> bytehot/implementation.html
          echo '        <a href="journal.html">üìù Journal</a>' >> bytehot/implementation.html
          echo '        <a href="docs/configuration.html">üîß Config</a>' >> bytehot/implementation.html
          echo '        <a href="docs/flows/index.html">üîÑ Flows</a>' >> bytehot/implementation.html
          echo '        <a href="https://github.com/rydnr/bytehot">üîó GitHub</a>' >> bytehot/implementation.html
          echo '    </div>' >> bytehot/implementation.html
          echo '    <h1>ByteHot Implementation</h1>' >> bytehot/implementation.html
          echo '    <p class="revolutionary-banner">üî• Revolutionary Literate Programming Documentation üî•</p>' >> bytehot/implementation.html
          echo '    <p>This section contains comprehensive literate programming documentation for all ByteHot components, following Domain-Driven Design principles and hexagonal architecture patterns.</p>' >> bytehot/implementation.html
          echo '    ' >> bytehot/implementation.html
          echo '    <h2>üèóÔ∏è Core Architecture</h2>' >> bytehot/implementation.html
          echo '    <div class="flow-grid">' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="ByteHot.html">üéØ ByteHot Core</a></h3>' >> bytehot/implementation.html
          echo '            <p>Main domain aggregate managing hot-swap operations and system coordination.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="ByteHotApplication.html">üì± Application Layer</a></h3>' >> bytehot/implementation.html
          echo '            <p>Application coordination and event routing for the entire system.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="HandlesByteHotAttached.html">üîó Attachment Handler</a></h3>' >> bytehot/implementation.html
          echo '            <p>Interface for handling JVM agent attachment requests and initialization.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="Ports.html">üö™ Ports System</a></h3>' >> bytehot/implementation.html
          echo '            <p>Dependency injection and port resolution for hexagonal architecture.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '    </div>' >> bytehot/implementation.html
          echo '    ' >> bytehot/implementation.html
          echo '    <h2>üé≠ Domain Layer</h2>' >> bytehot/implementation.html
          echo '    <div class="flow-grid">' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="User.html">üë§ User Management</a></h3>' >> bytehot/implementation.html
          echo '            <p>User aggregate with session management and authentication.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="InstanceTracker.html">üìä Instance Tracking</a></h3>' >> bytehot/implementation.html
          echo '            <p>Object instance management and state preservation during hot-swaps.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="ErrorHandler.html">üõ°Ô∏è Error Handling</a></h3>' >> bytehot/implementation.html
          echo '            <p>Comprehensive error management and recovery strategies.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="FrameworkIntegration.html">üîß Framework Integration</a></h3>' >> bytehot/implementation.html
          echo '            <p>Integration patterns for external frameworks and libraries.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '    </div>' >> bytehot/implementation.html
          echo '    ' >> bytehot/implementation.html
          echo '    <h2>üîå Domain Services & Adapters</h2>' >> bytehot/implementation.html
          echo '    <div class="flow-grid">' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="InstrumentationService.html">üîß Instrumentation Service</a></h3>' >> bytehot/implementation.html
          echo '            <p>Core domain service providing JVM instrumentation capabilities and class redefinition operations.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="FileWatcherPort.html">üëÅÔ∏è File Watcher Port</a></h3>' >> bytehot/implementation.html
          echo '            <p>Domain interface for file system monitoring operations.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="FileWatcherAdapter.html">üìÅ File Watcher Adapter</a></h3>' >> bytehot/implementation.html
          echo '            <p>Infrastructure implementation of file system monitoring.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '    </div>' >> bytehot/implementation.html
          echo '    ' >> bytehot/implementation.html
          echo '    <h2>‚ö° Events & Messaging</h2>' >> bytehot/implementation.html
          echo '    <div class="flow-grid">' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="events/ByteHotAttachRequested.html">üîó Attach Requested</a></h3>' >> bytehot/implementation.html
          echo '            <p>Event triggered when JVM agent attachment is requested.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="events/ClassFileChanged.html">üìù Class File Changed</a></h3>' >> bytehot/implementation.html
          echo '            <p>Event triggered when a class file is modified on disk.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="events/HotSwapRequested.html">üîÑ Hot-Swap Requested</a></h3>' >> bytehot/implementation.html
          echo '            <p>Event triggered when a hot-swap operation is initiated.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="events/UserSessionStarted.html">üë§ User Session Started</a></h3>' >> bytehot/implementation.html
          echo '            <p>Event triggered when a user session is established.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '    </div>' >> bytehot/implementation.html
          echo '    ' >> bytehot/implementation.html
          echo '    <h2>üìä Advanced Components</h2>' >> bytehot/implementation.html
          echo '    <div class="flow-grid">' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="RollbackManager.html">‚Ü©Ô∏è Rollback Management</a></h3>' >> bytehot/implementation.html
          echo '            <p>Sophisticated rollback and recovery coordination system.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="StatePreserver.html">üíæ State Preservation</a></h3>' >> bytehot/implementation.html
          echo '            <p>Object state preservation and restoration during redefinitions.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="ErrorRecoveryManager.html">üöë Error Recovery</a></h3>' >> bytehot/implementation.html
          echo '            <p>Automated error recovery and system resilience management.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '        <div class="flow-card">' >> bytehot/implementation.html
          echo '            <h3><a href="Flow.html">üåä Flow Detection</a></h3>' >> bytehot/implementation.html
          echo '            <p>Dynamic process flow discovery and documentation system.</p>' >> bytehot/implementation.html
          echo '        </div>' >> bytehot/implementation.html
          echo '    </div>' >> bytehot/implementation.html
          echo '    ' >> bytehot/implementation.html
          echo '    <div class="revolutionary-banner">' >> bytehot/implementation.html
          echo '        <h2>üé® Revolutionary Architecture</h2>' >> bytehot/implementation.html
          echo '        <p>ByteHot'"'"'s literate programming approach combines Domain-Driven Design with hexagonal architecture, creating a self-documenting system where code and documentation evolve together in perfect harmony.</p>' >> bytehot/implementation.html
          echo '    </div>' >> bytehot/implementation.html
          echo '    ' >> bytehot/implementation.html
          echo '    <h2>üìñ Documentation Principles</h2>' >> bytehot/implementation.html
          echo '    <p>All implementation documentation follows strict literate programming principles:</p>' >> bytehot/implementation.html
          echo '    <ul>' >> bytehot/implementation.html
          echo '        <li><strong>Invariant Documentation:</strong> Each class documents its assumptions and guarantees</li>' >> bytehot/implementation.html
          echo '        <li><strong>Behavior Documentation:</strong> Complete explanation of class responsibilities and collaborations</li>' >> bytehot/implementation.html
          echo '        <li><strong>Architecture Compliance:</strong> Strict adherence to hexagonal architecture boundaries</li>' >> bytehot/implementation.html
          echo '        <li><strong>Code Tangling:</strong> Documentation fragments that generate actual implementation</li>' >> bytehot/implementation.html
          echo '        <li><strong>Living Documentation:</strong> Documentation that evolves with the codebase</li>' >> bytehot/implementation.html
          echo '    </ul>' >> bytehot/implementation.html
          echo '</body>' >> bytehot/implementation.html
          echo '</html>' >> bytehot/implementation.html

      - name: Apply navigation and footer to all HTML files
        run: |
          echo "üé® Applying enhanced navigation and footer to all HTML pages..."
          
          # Function to add navigation and footer to HTML files
          add_nav_footer() {
            local file="$1"
            local relative_path="$2"
            
            # Skip if file doesn't exist or is empty
            if [ ! -f "$file" ] || [ ! -s "$file" ]; then
              return
            fi
            
            echo "  üìÑ Processing: $file"
            
            # Create temporary file with navigation
            sed "s|href=\"|href=\"${relative_path}|g" temp_nav.html > "temp_nav_${file//\//_}.html"
            
            # Create temporary file with footer  
            sed "s|href=\"|href=\"${relative_path}|g" temp_footer.html > "temp_footer_${file//\//_}.html"
            
            # Apply navigation and footer using a simple and reliable approach
            local nav_file="temp_nav_${file//\//_}.html"
            local footer_file="temp_footer_${file//\//_}.html"
            
            # Method 1: Insert navigation after <body> tag
            if grep -q "<body>" "$file"; then
              sed -i "/<body>/r $nav_file" "$file"
            fi
            
            # Method 2: Insert footer before </body> tag using a simpler approach
            if grep -q "</body>" "$file"; then
              # Split file at </body>, insert footer, then rejoin
              grep -B 999999 "</body>" "$file" | head -n -1 > "${file}.before"
              cat "$footer_file" > "${file}.footer_content"
              grep -A 999999 "</body>" "$file" > "${file}.after"
              cat "${file}.before" "${file}.footer_content" "${file}.after" > "$file"
              rm -f "${file}.before" "${file}.footer_content" "${file}.after"
            fi
            
            # Ensure proper container wrapper for main content
            # Skip this complex operation for now to avoid sed issues
            # The navigation and footer contain their own styling
            
            # Clean up temp files
            rm -f "temp_nav_${file//\//_}.html" "temp_footer_${file//\//_}.html"
          }
          
          # Apply to main HTML files in bytehot directory
          for file in bytehot/*.html; do
            if [ -f "$file" ]; then
              add_nav_footer "$file" ""
            fi
          done
          
          # Apply to docs HTML files  
          for file in bytehot/docs/*.html; do
            if [ -f "$file" ]; then
              add_nav_footer "$file" "../"
            fi
          done
          
          # Apply to docs/flows HTML files
          for file in bytehot/docs/flows/*.html; do
            if [ -f "$file" ]; then
              add_nav_footer "$file" "../../"
            fi
          done
          
          # Apply to specs HTML files
          for file in bytehot/specs/*.html; do
            if [ -f "$file" ]; then
              add_nav_footer "$file" "../"
            fi
          done
          
          # Apply to javadocs if they exist and are our generated fallback
          if [ -f "bytehot/javadocs/index.html" ] && grep -q "ByteHot API Documentation" "bytehot/javadocs/index.html"; then
            add_nav_footer "bytehot/javadocs/index.html" "../"
          fi
          
          # Clean up temporary files
          rm -f temp_nav.html temp_footer.html
          
          echo "‚úÖ Navigation and footer applied to all HTML files"

      - name: Create site README
        run: |
          # Create comprehensive README.md for the documentation site
          echo "# ByteHot Documentation Site" > bytehot/README.md
          echo "" >> bytehot/README.md
          echo "Welcome to the comprehensive documentation for **ByteHot** - the revolutionary JVM agent that enables real-time bytecode hot-swapping during application runtime." >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "## üöÄ Quick Start" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "- **[üìñ Start Here - ByteHot Story](index.html)** - Complete project vision, architecture, and development philosophy" >> bytehot/README.md
          echo "- **[üìã Project Specifications](specs/README.html)** - Milestone specifications and technical requirements" >> bytehot/README.md
          echo "- **[‚öôÔ∏è Configuration Guide](docs/configuration.html)** - Get up and running with ByteHot in minutes" >> bytehot/README.md
          echo "- **[üìñ API Reference](javadocs/index.html)** - Complete Javadoc documentation for developers" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "## üìö Documentation Sections" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "### Core Documentation" >> bytehot/README.md
          echo "- **[üè† Home - Project Story](index.html)** - Vision, goals, and architectural overview" >> bytehot/README.md
          echo "- **[üìù Development Journal](journal.html)** - Detailed development history and technical decisions" >> bytehot/README.md
          echo "- **[‚öôÔ∏è Configuration Reference](docs/configuration.html)** - Complete setup and configuration guide" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "### Project Specifications" >> bytehot/README.md
          echo "- **[üìã Specifications Overview](specs/README.html)** - Complete project specifications index" >> bytehot/README.md
          echo "- **[üîÑ CI/CD Pipeline](specs/github-actions-cicd.html)** - GitHub Actions automation specifications" >> bytehot/README.md
          echo "- **[üìÅ File System Monitoring](specs/milestone-1-file-system-monitoring.html)** - Milestone 1 specifications" >> bytehot/README.md
          echo "- **[üîç Bytecode Analysis](specs/milestone-2-bytecode-analysis.html)** - Milestone 2 specifications" >> bytehot/README.md
          echo "- **[üîÑ Hot-Swap Operations](specs/milestone-3-hotswap-operations.html)** - Milestone 3 specifications" >> bytehot/README.md
          echo "- **[üì¶ Instance Management](specs/milestone-4-instance-management.html)** - Milestone 4 specifications" >> bytehot/README.md
          echo "- **[üß™ Integration Testing](specs/milestone-5-integration-testing.html)** - Milestone 5 specifications" >> bytehot/README.md
          echo "- **[üìä Event Sourcing](specs/milestone-6a-basic-eventsourcing.html)** - Milestone 6A specifications" >> bytehot/README.md
          echo "- **[üß™ Event-Driven Testing](specs/milestone-6b-event-driven-testing.html)** - Milestone 6B specifications" >> bytehot/README.md
          echo "- **[üë§ User Management](specs/milestone-6c-user-management.html)** - Milestone 6C specifications" >> bytehot/README.md
          echo "- **[üöÄ GitHub Actions CI/CD](specs/milestone-6e-github-actions-setup.html)** - Milestone 6E specifications" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "### API & Architecture" >> bytehot/README.md
          echo "- **[üìñ API Documentation](javadocs/index.html)** - Complete Javadoc API reference" >> bytehot/README.md
          echo "- **[üë§ User Management](docs/User.html)** - User aggregate and domain model documentation" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "### Process Flows" >> bytehot/README.md
          echo "- **[üöÄ Agent Startup Flow](docs/flows/agent-startup-flow.html)** - JVM agent initialization process" >> bytehot/README.md
          echo "- **[‚ùå Error Recovery Flow](docs/flows/error-recovery-flow.html)** - Error handling and recovery procedures" >> bytehot/README.md
          echo "- **[üîß Framework Integration Flow](docs/flows/framework-integration-flow.html)** - Integration with external frameworks" >> bytehot/README.md
          echo "- **[üîÑ Hot-Swap Complete Flow](docs/flows/hot-swap-complete-flow.html)** - Complete hot-swap operation lifecycle" >> bytehot/README.md
          echo "- **[üîô Rollback Coordination Flow](docs/flows/rollback-coordination-flow.html)** - Rollback and recovery coordination" >> bytehot/README.md
          echo "- **[üë§ User Management Flow](docs/flows/user-management-flow.html)** - User lifecycle and session management" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "## üèóÔ∏è Site Structure" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "\`\`\`" >> bytehot/README.md
          echo "bytehot-docs/" >> bytehot/README.md
          echo "‚îú‚îÄ‚îÄ index.html              # Main documentation hub" >> bytehot/README.md
          echo "‚îú‚îÄ‚îÄ journal.html            # Development journal" >> bytehot/README.md
          echo "‚îú‚îÄ‚îÄ style.css               # Site styling" >> bytehot/README.md
          echo "‚îú‚îÄ‚îÄ javadocs/               # API documentation" >> bytehot/README.md
          echo "‚îÇ   ‚îî‚îÄ‚îÄ index.html" >> bytehot/README.md
          echo "‚îú‚îÄ‚îÄ specs/                  # Project specifications" >> bytehot/README.md
          echo "‚îÇ   ‚îú‚îÄ‚îÄ README.html         # Specifications overview" >> bytehot/README.md
          echo "‚îÇ   ‚îú‚îÄ‚îÄ github-actions-cicd.html" >> bytehot/README.md
          echo "‚îÇ   ‚îú‚îÄ‚îÄ milestone-1-file-system-monitoring.html" >> bytehot/README.md
          echo "‚îÇ   ‚îú‚îÄ‚îÄ milestone-2-bytecode-analysis.html" >> bytehot/README.md
          echo "‚îÇ   ‚îú‚îÄ‚îÄ milestone-3-hotswap-operations.html" >> bytehot/README.md
          echo "‚îÇ   ‚îú‚îÄ‚îÄ milestone-4-instance-management.html" >> bytehot/README.md
          echo "‚îÇ   ‚îú‚îÄ‚îÄ milestone-5-integration-testing.html" >> bytehot/README.md
          echo "‚îÇ   ‚îú‚îÄ‚îÄ milestone-6a-basic-eventsourcing.html" >> bytehot/README.md
          echo "‚îÇ   ‚îú‚îÄ‚îÄ milestone-6b-event-driven-testing.html" >> bytehot/README.md
          echo "‚îÇ   ‚îú‚îÄ‚îÄ milestone-6c-user-management.html" >> bytehot/README.md
          echo "‚îÇ   ‚îî‚îÄ‚îÄ milestone-6e-github-actions-setup.html" >> bytehot/README.md
          echo "‚îú‚îÄ‚îÄ docs/" >> bytehot/README.md
          echo "‚îÇ   ‚îú‚îÄ‚îÄ configuration.html  # Configuration guide" >> bytehot/README.md
          echo "‚îÇ   ‚îú‚îÄ‚îÄ User.html          # User domain model" >> bytehot/README.md
          echo "‚îÇ   ‚îî‚îÄ‚îÄ flows/             # Process flows" >> bytehot/README.md
          echo "‚îÇ       ‚îú‚îÄ‚îÄ agent-startup-flow.html" >> bytehot/README.md
          echo "‚îÇ       ‚îú‚îÄ‚îÄ error-recovery-flow.html" >> bytehot/README.md
          echo "‚îÇ       ‚îú‚îÄ‚îÄ framework-integration-flow.html" >> bytehot/README.md
          echo "‚îÇ       ‚îú‚îÄ‚îÄ hot-swap-complete-flow.html" >> bytehot/README.md
          echo "‚îÇ       ‚îú‚îÄ‚îÄ rollback-coordination-flow.html" >> bytehot/README.md
          echo "‚îÇ       ‚îî‚îÄ‚îÄ user-management-flow.html" >> bytehot/README.md
          echo "‚îî‚îÄ‚îÄ README.md              # This file" >> bytehot/README.md
          echo "\`\`\`" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "## üöÄ Current Status" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "**Implementation Status:** Milestone 6C completed with 159/160 tests passing (99.4% success rate)" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "### ‚úÖ Completed Features" >> bytehot/README.md
          echo "- **EventSourcing Infrastructure** - Complete event persistence and replay" >> bytehot/README.md
          echo "- **User Management Domain** - Auto-discovery, authentication, session tracking" >> bytehot/README.md
          echo "- **Event-Driven Testing** - Revolutionary Given/When/Then framework" >> bytehot/README.md
          echo "- **Hexagonal Architecture** - Clean boundaries with Ports & Adapters" >> bytehot/README.md
          echo "- **Instance Management** - Object state preservation across redefinitions" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "### üìã Next Milestones" >> bytehot/README.md
          echo "- **Milestone 6D:** Event-Driven Bug Reporting" >> bytehot/README.md
          echo "- **Milestone 6F:** Flow Detection" >> bytehot/README.md
          echo "- **Milestone 6G:** Java-Commons Refactoring" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "## üîó External Links" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "- **[GitHub Repository](https://github.com/rydnr/bytehot)** - Source code and development" >> bytehot/README.md
          echo "- **[Issues & Discussions](https://github.com/rydnr/bytehot/issues)** - Bug reports and feature requests" >> bytehot/README.md
          echo "- **[Releases](https://github.com/rydnr/bytehot/releases)** - Download ByteHot releases" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "---" >> bytehot/README.md
          echo "" >> bytehot/README.md
          echo "*This documentation site is automatically generated and updated via GitHub Actions.*" >> bytehot/README.md

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './bytehot'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-docs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4