name: Build and Deploy Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC to keep documentation fresh
    - cron: '0 2 * * *'

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper git operations

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc

      - name: Verify Pandoc installation
        run: pandoc --version

      - name: Build project and install dependencies
        run: |
          # Build and install the multi-module project from root
          mvn clean install -DskipTests -q

      - name: Generate Javadocs
        run: |
          # Generate Javadocs using multiple approaches
          echo "🔧 Attempting to generate Javadocs..."
          
          # Create javadocs directories for all modules
          mkdir -p target/site/apidocs
          
          # Strategy 1: Try Maven aggregate javadoc for all modules
          echo "📋 Strategy 1: Maven aggregate javadoc for all modules..."
          mvn javadoc:aggregate \
            -DfailOnError=false \
            -Dadditionalparam="-Xdoclint:none" \
            -Dmaven.javadoc.skip=false \
            -Dquiet=false || echo "Maven aggregate javadoc failed"
          
          # Strategy 2: Try individual module javadocs
          if [ ! -d "target/site/apidocs" ] || [ -z "$(ls -A target/site/apidocs 2>/dev/null)" ]; then
            echo "📋 Strategy 2: Individual module javadocs..."
            mkdir -p target/site/apidocs
            
            for module in bytehot-domain bytehot-application bytehot-infrastructure; do
              echo "Generating javadoc for $module..."
              mvn javadoc:javadoc -pl $module \
                -DfailOnError=false \
                -Dadditionalparam="-Xdoclint:none" \
                -Dquiet=true || echo "Javadoc failed for $module"
              
              # Copy individual module docs if they exist
              if [ -d "$module/target/site/apidocs" ]; then
                echo "Copying javadocs from $module..."
                cp -r "$module/target/site/apidocs/"* target/site/apidocs/ 2>/dev/null || true
                echo "✅ Copied javadocs from $module"
              fi
            done
            
            # Check if we got any content
            if [ -n "$(ls -A target/site/apidocs 2>/dev/null)" ]; then
              echo "✅ Individual module javadocs successful"
            fi
          fi
          
          # Strategy 3: Direct javadoc command
          if [ ! -d "target/site/apidocs" ] || [ -z "$(ls -A target/site/apidocs 2>/dev/null)" ]; then
            echo "📋 Strategy 3: Direct javadoc command for all modules..."
            
            # Build comprehensive classpath from all modules
            echo "Building classpath from all modules..."
            CLASSPATH=""
            
            # Add Maven dependencies for all modules
            for module in java-commons bytehot-domain bytehot-application bytehot-infrastructure; do
              if [ -d "$module" ]; then
                module_cp=$(mvn -pl $module dependency:build-classpath -Dmdep.outputFile=/dev/stdout -q 2>/dev/null || echo "")
                if [ -n "$module_cp" ]; then
                  CLASSPATH="$CLASSPATH:$module_cp"
                fi
                
                # Add module's target/classes if it exists
                if [ -d "$module/target/classes" ]; then
                  CLASSPATH="$CLASSPATH:$module/target/classes"
                fi
              fi
            done
            
            # Find all Java source files across modules
            SOURCE_FILES=""
            for module in java-commons bytehot-domain bytehot-application bytehot-infrastructure; do
              if [ -d "$module/src/main/java" ]; then
                module_sources=$(find "$module/src/main/java" -name "*.java" 2>/dev/null || echo "")
                if [ -n "$module_sources" ]; then
                  SOURCE_FILES="$SOURCE_FILES $module_sources"
                fi
              fi
            done
            
            if [ -n "$SOURCE_FILES" ]; then
              echo "Found source files, generating javadocs..."
              mkdir -p target/site/apidocs
              javadoc -d target/site/apidocs \
                -sourcepath "java-commons/src/main/java:bytehot-domain/src/main/java:bytehot-application/src/main/java:bytehot-infrastructure/src/main/java" \
                -classpath "$CLASSPATH" \
                -Xdoclint:none \
                $SOURCE_FILES || echo "Direct javadoc command failed"
            else
              echo "No source files found for javadoc generation"
            fi
          fi
          
          # Verify javadocs were generated
          if [ -d "target/site/apidocs" ] && [ -n "$(ls -A target/site/apidocs 2>/dev/null)" ]; then
            echo "✅ Javadocs generated successfully"
            ls -la target/site/apidocs/
          else
            echo "⚠️ Javadocs generation failed, will create better placeholder"
            mkdir -p target/site/apidocs
            cat > target/site/apidocs/index.html << 'HTML_EOF'
<!DOCTYPE html>
<html>
<head>
    <title>ByteHot API Documentation</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px; }
        h1 { color: #2c3e50; border-bottom: 2px solid #3498db; }
        .notice { background: #f39c12; color: white; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .module { background: #ecf0f1; padding: 15px; margin: 10px 0; border-left: 4px solid #3498db; }
    </style>
</head>
<body>
    <h1>ByteHot API Documentation</h1>
    <p><em>Revolutionary JVM Hot-Swapping Agent</em></p>
    
    <div class="notice">
        <strong>Notice:</strong> Javadoc generation is currently being improved. 
        Please check back soon or refer to the source code documentation.
    </div>
    
    <h2>Core Architecture</h2>
    <div class="module">
        <h3>Domain Layer: org.acmsl.bytehot.domain</h3>
        <p>Core business logic, aggregates, entities, and domain services</p>
    </div>
    
    <div class="module">
        <h3>Application Layer: org.acmsl.bytehot.application</h3>
        <p>Application coordination and port/adapter integration</p>
    </div>
    
    <div class="module">
        <h3>Infrastructure Layer: org.acmsl.bytehot.infrastructure</h3>
        <p>Technology-specific implementations and adapters</p>
    </div>
    
    <h2>Alternative Documentation</h2>
    <ul>
        <li><a href="../docs/">Comprehensive Documentation</a> - Detailed architectural documentation</li>
        <li><a href="../implementation.html">Implementation Guide</a> - Complete implementation reference</li>
        <li><a href="https://github.com/rydnr/bytehot">Source Code</a> - Browse the source code directly</li>
    </ul>
    
    <hr>
    <p><small>ByteHot - Revolutionary JVM Hot-Swapping Agent</small></p>
</body>
</html>
HTML_EOF
          fi

      - name: Generate Documentation
        run: |
          echo "🚀 Starting documentation generation with shell scripts..."
          chmod +x .github/scripts/*.sh
          bash ./.github/scripts/generate-docs.sh

      - name: Debug generated files
        run: |
          echo "🔍 Debugging generated documentation structure..."
          echo "Root files:"
          ls -la bytehot/ 2>/dev/null || echo "No bytehot directory"
          echo "Sample file content (first 20 lines):"
          if [ -f "bytehot/index.html" ]; then
            echo "=== bytehot/index.html ==="
            head -20 bytehot/index.html
          fi
          if [ -f "bytehot/implementation.html" ]; then
            echo "=== bytehot/implementation.html ==="
            head -10 bytehot/implementation.html
          fi

      - name: Copy Javadocs to documentation
        run: |
          echo "📖 Copying Javadocs to documentation site..."
          if [ -d "target/site/apidocs" ]; then
            cp -r target/site/apidocs/* bytehot/javadocs/ 2>/dev/null || true
            echo "✅ Javadocs copied to documentation site"
          else
            echo "⚠️ No Javadocs found to copy"
          fi

      - name: List generated files
        run: |
          echo "📋 Generated documentation files:"
          find bytehot -name "*.html" -type f 2>/dev/null | head -20 || echo "No HTML files found"
          echo "📊 Total HTML files: $(find bytehot -name "*.html" -type f 2>/dev/null | wc -l)"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'bytehot'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4