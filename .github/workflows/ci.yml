name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [17]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Verify Maven configuration
      run: |
        echo "=== Maven version ==="
        mvn --version
        echo "=== Java version ==="
        java -version
        echo "=== Project structure ==="
        find . -name "pom.xml" -type f
        
    - name: Build project (install all modules)
      run: mvn clean install -DskipTests -B
      
    - name: Verify agent JAR exists
      run: |
        echo "=== Checking for agent JAR ==="
        find . -name "*agent.jar" -type f
        echo "=== Directory structure ==="
        ls -la */target/ || echo "No target directories found"
        
    - name: Run tests
      run: mvn test -B
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: '**/target/surefire-reports/*.xml'
        reporter: java-junit
        fail-on-error: true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-java-${{ matrix.java-version }}
        path: |
          **/target/surefire-reports/
          **/target/site/
          
    - name: Check for security vulnerabilities (optional)
      run: |
        echo "=== Security Vulnerability Check Diagnostics ==="
        
        # Check if NVD API key is available
        if [ -n "${{ secrets.NVD_API_KEY }}" ]; then
          echo "‚úÖ NVD_API_KEY is configured (length: ${#{{ secrets.NVD_API_KEY }}})"
          echo "üîë API Key format check: $(echo '${{ secrets.NVD_API_KEY }}' | head -c 20)..."
        else
          echo "‚ùå NVD_API_KEY is not configured"
        fi
        
        # Test NVD API connectivity
        echo "üåê Testing NVD API connectivity..."
        curl -s --max-time 10 "https://services.nvd.nist.gov/rest/json/cves/2.0/?resultsPerPage=1" \
          -H "Accept: application/json" \
          && echo "‚úÖ NVD API is reachable" \
          || echo "‚ùå NVD API connectivity failed"
        
        # Try dependency tree analysis
        echo "üì¶ Running dependency tree analysis..."
        mvn dependency:tree -B -q || echo "Dependency tree analysis failed"
        
        # Attempt OWASP check with diagnostics
        echo "üõ°Ô∏è Attempting OWASP Dependency Check..."
        if [ -n "${{ secrets.NVD_API_KEY }}" ]; then
          echo "Using API key for OWASP check..."
          mvn org.owasp:dependency-check-maven:check -B \
            -Dnvd.api.key=${{ secrets.NVD_API_KEY }} \
            -Dnvd.api.delay=4000 \
            -DfailBuildOnCVSS=0 \
            -X || {
              echo "‚ùå OWASP check with API key failed"
              echo "üìã Alternative: Check GitHub Security tab for Dependabot alerts"
              echo "üîó Security alerts: https://github.com/rydnr/bytehot/security/dependabot"
            }
        else
          echo "No API key available, skipping OWASP check"
          echo "üìã Alternative: Check GitHub Security tab for Dependabot alerts"
          echo "üîó Security alerts: https://github.com/rydnr/bytehot/security/dependabot"
        fi
        
        # Create report
        mkdir -p target
        echo "<html><body><h1>Security Scan</h1><p>Check logs for detailed diagnostics. GitHub Dependabot provides vulnerability reports.</p></body></html>" > target/security-report.html
      continue-on-error: true
      timeout-minutes: 8
      
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: '**/target/security-report.html'
        
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Run SpotBugs analysis
      run: mvn spotbugs:check -B
      continue-on-error: true
      
    - name: Run PMD analysis
      run: mvn pmd:check -B
      continue-on-error: true
      
    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          **/target/spotbugsXml.xml
          **/target/pmd.xml