name: Automated Release with Enhanced Changelog

on:
  push:
    tags:
      - 'v*'              # Version tags (v1.0.0, v1.1.0-milestone-7-complete)
      - 'milestone-*'     # Milestone tags
      - '*-v*'            # Any tag ending with version

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  release:
    name: Create Enhanced Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code with full history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comprehensive changelog
        
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Extract enhanced metadata from tag and commits
      id: metadata
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=${TAG#v}" >> $GITHUB_OUTPUT
        
        # Determine release type based on tag patterns
        if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "release_type=stable" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        elif [[ "$TAG" =~ milestone ]]; then
          echo "release_type=milestone" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "release_type=development" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        fi
        
        # Extract milestone number if present
        if [[ "$TAG" =~ milestone-([0-9]+) ]]; then
          echo "milestone_number=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
        fi
        
        # Get build timestamp
        echo "build_date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_OUTPUT
        echo "build_timestamp=$(date -u +%s)" >> $GITHUB_OUTPUT
        
        # Get short commit hash
        echo "commit_short=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
        
    - name: Run comprehensive tests
      run: |
        echo "🧪 Running comprehensive test suite for release ${{ steps.metadata.outputs.tag }}"
        mvn clean verify -B -Dskip.unit.tests=false -Dskip.integration.tests=false
        
    - name: Build release artifacts
      run: |
        echo "🔨 Building release artifacts"
        mvn package -DskipTests -B
        
        # Create versioned artifacts
        mkdir -p release-artifacts
        
        # Find and copy JAR files with proper naming
        find . -name "bytehot-*.jar" -path "*/target/*" | while read jar; do
          basename=$(basename "$jar")
          # Create version-specific name
          versioned_name=$(echo "$basename" | sed "s/latest-SNAPSHOT/${{ steps.metadata.outputs.tag }}/g")
          cp "$jar" "release-artifacts/$versioned_name"
          # Also keep original name for compatibility
          cp "$jar" "release-artifacts/$basename"
        done
        
        # Copy additional artifacts
        find . -name "java-commons-*.jar" -path "*/target/*" -exec cp {} release-artifacts/ \;
        
        echo "📦 Release artifacts created:"
        ls -la release-artifacts/
        
    - name: Generate comprehensive changelog
      id: changelog
      run: |
        # Get previous tag for comparison
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          echo "📝 Generating changelog from project start"
          COMMIT_RANGE=""
        else
          echo "📝 Generating changelog since $LAST_TAG"
          COMMIT_RANGE="$LAST_TAG..HEAD"
        fi
        
        # Create comprehensive changelog
        cat > CHANGELOG.md << 'EOF'
        # ${{ steps.metadata.outputs.tag }}
        
        > **Release Type:** ${{ steps.metadata.outputs.release_type }}  
        > **Build Date:** ${{ steps.metadata.outputs.build_date }}  
        > **Commit:** [${{ steps.metadata.outputs.commit_short }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
        
        ## 🔥 Highlights
        
        EOF
        
        # Extract commit categories using ByteHot's emoji conventions
        echo "### 🧪 Tests & Bug Fixes" >> CHANGELOG.md
        git log $COMMIT_RANGE --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" --no-merges --grep="🧪\|🐛\|🔧" >> CHANGELOG.md || echo "- No test or bug fix commits" >> CHANGELOG.md
        echo -e "\n" >> CHANGELOG.md
        
        echo "### ✅ Features & Enhancements" >> CHANGELOG.md
        git log $COMMIT_RANGE --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" --no-merges --grep="✅\|🔥\|✨\|🚀" >> CHANGELOG.md || echo "- No feature commits" >> CHANGELOG.md
        echo -e "\n" >> CHANGELOG.md
        
        echo "### 📚 Documentation" >> CHANGELOG.md
        git log $COMMIT_RANGE --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" --no-merges --grep="📚\|📖\|📝" >> CHANGELOG.md || echo "- No documentation commits" >> CHANGELOG.md
        echo -e "\n" >> CHANGELOG.md
        
        echo "### 🔒 Security & Dependencies" >> CHANGELOG.md
        git log $COMMIT_RANGE --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" --no-merges --grep="🔒\|⬆️\|🛡️" >> CHANGELOG.md || echo "- No security or dependency updates" >> CHANGELOG.md
        echo -e "\n" >> CHANGELOG.md
        
        echo "### 🏗️ Infrastructure & Build" >> CHANGELOG.md
        git log $COMMIT_RANGE --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" --no-merges --grep="🏗️\|⚙️\|🔨" >> CHANGELOG.md || echo "- No infrastructure changes" >> CHANGELOG.md
        echo -e "\n" >> CHANGELOG.md
        
        # Add other commits that don't match categories
        echo "### 📋 Other Changes" >> CHANGELOG.md
        git log $COMMIT_RANGE --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" --no-merges --invert-grep --grep="🧪\|🐛\|🔧\|✅\|🔥\|✨\|🚀\|📚\|📖\|📝\|🔒\|⬆️\|🛡️\|🏗️\|⚙️\|🔨" >> CHANGELOG.md || echo "- No other changes" >> CHANGELOG.md
        echo -e "\n" >> CHANGELOG.md
        
        # Add technical details
        cat >> CHANGELOG.md << 'EOF'
        ## 🛠️ Technical Details
        
        **System Requirements:**
        - Java 17 or later
        - Maven 3.6+ (for building from source)
        
        **Architecture:**
        - Domain-Driven Design (DDD)
        - Hexagonal Architecture (Ports & Adapters)
        - Event-driven with Event Sourcing
        - Test-Driven Development (TDD)
        
        **Build Information:**
        - **Java Version:** ${{ env.JAVA_VERSION }}
        - **Build Tool:** Maven
        - **Test Coverage:** Comprehensive unit and integration tests
        - **Artifacts:** Shaded JAR with all dependencies included
        
        ## 📦 Release Artifacts
        
        | Artifact | Description | Size | Usage |
        |----------|-------------|------|-------|
        | `bytehot-${{ steps.metadata.outputs.tag }}-agent.jar` | Main ByteHot JVM agent | ~14MB | Production use |
        | `bytehot-${{ steps.metadata.outputs.tag }}.jar` | Slim version without dependencies | ~300KB | Development |
        | `bytehot-latest-SNAPSHOT-agent.jar` | Compatibility alias | ~14MB | CI/CD scripts |
        
        ## 🚀 Quick Start
        
        ### Basic Usage
        ```bash
        # Download the agent JAR from this release
        java -javaagent:bytehot-${{ steps.metadata.outputs.tag }}-agent.jar \
             -Dbytehot.watch.paths=target/classes \
             -cp target/classes \
             com.example.YourApplication
        ```
        
        ### Configuration Options
        ```bash
        # System properties
        -Dbytehot.watch.paths=target/classes,build/classes
        
        # External YAML configuration
        -Dbhconfig=/path/to/bytehot.yml
        
        # Environment variables
        export BYTEHOT_WATCH_PATHS="target/classes"
        ```
        
        ### Sample Configuration File
        ```yaml
        bytehot:
          watch:
            - path: "target/classes"
              patterns: ["*.class"]
              recursive: true
        ```
        
        ## 📖 Documentation
        
        - **[Getting Started Guide](https://github.com/${{ github.repository }}/blob/main/GETTING_STARTED.md)** - Complete setup and usage instructions
        - **[Architecture Documentation](https://github.com/${{ github.repository }}/tree/main/docs)** - Technical deep-dive
        - **[Specifications](https://github.com/${{ github.repository }}/tree/main/specs)** - Feature specifications and roadmap
        - **[Development Journal](https://github.com/${{ github.repository }}/blob/main/journal.org)** - Development process and decisions
        
        ## 🧪 Testing & Quality Assurance
        
        This release includes comprehensive testing:
        - **Unit Tests:** Core functionality validation
        - **Integration Tests:** End-to-end scenario verification  
        - **Configuration Tests:** All configuration loading approaches verified
        - **TDD Methodology:** Test-driven development throughout
        
        ### Test Coverage Highlights
        - Configuration loading: 10 tests covering all approaches
        - Event-driven architecture: Comprehensive event flow testing
        - Hot-swap operations: Bytecode validation and class redefinition
        - User management: Session tracking and identification
        
        ## ⚠️ Breaking Changes
        
        EOF
        
        if [ -n "$LAST_TAG" ]; then
          # Check for breaking changes by looking for BREAKING in commit messages
          BREAKING_CHANGES=$(git log $COMMIT_RANGE --pretty=format:"- %s" --no-merges --grep="BREAKING\|breaking change" || echo "")
          if [ -n "$BREAKING_CHANGES" ]; then
            echo "$BREAKING_CHANGES" >> CHANGELOG.md
          else
            echo "- No breaking changes in this release" >> CHANGELOG.md
          fi
        else
          echo "- Initial release - no breaking changes" >> CHANGELOG.md
        fi
        
        cat >> CHANGELOG.md << 'EOF'
        
        ## 📈 Migration Guide
        
        EOF
        
        # Add migration guide for milestone releases
        if [[ "${{ steps.metadata.outputs.tag }}" =~ milestone ]]; then
          cat >> CHANGELOG.md << 'EOF'
        This is a milestone release. To migrate from previous versions:
        
        1. **Update JAR file:** Replace your existing ByteHot agent JAR
        2. **Review configuration:** Check updated GETTING_STARTED.md for any configuration changes
        3. **Test thoroughly:** Milestone releases may include experimental features
        4. **Update documentation:** Review any new specifications or documentation
        
        EOF
        else
          cat >> CHANGELOG.md << 'EOF'
        This is a stable release. Standard migration applies:
        
        1. **Download new JAR:** Replace existing ByteHot agent JAR
        2. **Update configuration:** Review GETTING_STARTED.md for any new options
        3. **Restart applications:** Apply the new agent to your applications
        
        EOF
        fi
        
        cat >> CHANGELOG.md << 'EOF'
        ## 🔗 Links
        
        - **[Release Downloads](https://github.com/${{ github.repository }}/releases/tag/${{ steps.metadata.outputs.tag }})** - Download artifacts
        - **[Issues](https://github.com/${{ github.repository }}/issues)** - Report bugs or request features  
        - **[Discussions](https://github.com/${{ github.repository }}/discussions)** - Community support
        - **[Contributing](https://github.com/${{ github.repository }}/blob/main/CLAUDE.md)** - Development guidelines
        
        ---
        
        🤖 **Automated Release**: Generated by GitHub Actions  
        🕒 **Build Time**: ${{ steps.metadata.outputs.build_date }}  
        📋 **Workflow**: [${{ github.workflow }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        
        EOF
        
        echo "📄 Generated comprehensive changelog:"
        echo "$(wc -l < CHANGELOG.md) lines"
        
    - name: Validate release artifacts
      run: |
        echo "🔍 Validating release artifacts"
        
        # Check that main artifacts exist
        if [ ! -f "release-artifacts/bytehot-${{ steps.metadata.outputs.tag }}-agent.jar" ]; then
          echo "❌ Main agent JAR not found!"
          exit 1
        fi
        
        # Validate JAR files can be read
        for jar in release-artifacts/*.jar; do
          if ! jar tf "$jar" >/dev/null 2>&1; then
            echo "❌ Invalid JAR file: $jar"
            exit 1
          fi
          echo "✅ Validated: $jar"
        done
        
        # Check artifact sizes (agent should be substantial)
        AGENT_SIZE=$(stat -c%s "release-artifacts/bytehot-${{ steps.metadata.outputs.tag }}-agent.jar")
        if [ "$AGENT_SIZE" -lt 1000000 ]; then  # Less than 1MB
          echo "⚠️ Warning: Agent JAR seems too small ($AGENT_SIZE bytes)"
        fi
        
        echo "✅ All artifacts validated successfully"
        
    - name: Generate release checksums
      run: |
        echo "🔐 Generating checksums for release artifacts"
        cd release-artifacts
        
        # Generate checksums
        sha256sum *.jar > SHA256SUMS
        sha512sum *.jar > SHA512SUMS
        
        echo "📋 SHA256 checksums:"
        cat SHA256SUMS
        
        cd ..
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.metadata.outputs.tag }}
        name: "ByteHot ${{ steps.metadata.outputs.tag }} - ${{ steps.metadata.outputs.release_type == 'milestone' && 'Milestone Release' || steps.metadata.outputs.release_type == 'stable' && 'Stable Release' || 'Development Release' }}"
        body_path: CHANGELOG.md
        files: |
          release-artifacts/*.jar
          release-artifacts/SHA256SUMS
          release-artifacts/SHA512SUMS
        draft: false
        prerelease: ${{ steps.metadata.outputs.is_prerelease }}
        generate_release_notes: false  # We generate our own comprehensive notes
        make_latest: ${{ steps.metadata.outputs.release_type == 'stable' }}
        
    - name: Update documentation
      if: ${{ steps.metadata.outputs.release_type == 'stable' }}
      run: |
        echo "📚 Updating documentation for stable release"
        # Here you could trigger documentation updates, update version badges, etc.
        
    - name: Post-release notifications
      run: |
        echo "🎉 Release ${{ steps.metadata.outputs.tag }} completed successfully!"
        echo ""
        echo "📊 Release Summary:"
        echo "  Tag: ${{ steps.metadata.outputs.tag }}"
        echo "  Type: ${{ steps.metadata.outputs.release_type }}"
        echo "  Prerelease: ${{ steps.metadata.outputs.is_prerelease }}"
        echo "  Build: ${{ steps.metadata.outputs.build_date }}"
        echo "  Commit: ${{ steps.metadata.outputs.commit_short }}"
        echo ""
        echo "📦 Artifacts:"
        ls -la release-artifacts/
        echo ""
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.metadata.outputs.tag }}"
        echo "📋 Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"