name: Enhanced Documentation Build with Code Block Fixes

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC to keep documentation fresh
    - cron: '0 2 * * *'

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper git operations

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Enhanced Documentation Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc emacs-nox
          
          # Note: pandoc-citeproc is now built into pandoc (deprecated since pandoc 2.11)
          # Modern pandoc includes citeproc functionality by default
          
          echo "üìã Installed tools versions:"
          pandoc --version | head -2
          emacs --version | head -1

      - name: Verify Enhanced Pandoc installation
        run: |
          pandoc --version
          echo "üìã Pandoc filters available:"
          pandoc --list-highlight-languages | head -10
          
          echo "üìã Pandoc writers available:"
          pandoc --list-output-formats | grep -E 'html|org' || echo "HTML and org formats available"

      - name: Build project and install dependencies
        run: |
          # Build and install the multi-module project from root
          mvn clean install -DskipTests -q

      - name: Pre-process org files to fix code blocks
        run: |
          echo "üîß Pre-processing org files to ensure proper code block formatting..."
          
          # Create a simple Python script to fix org-mode code blocks using echo
          echo "import re" > fix_org.py
          echo "import os" >> fix_org.py
          echo "from pathlib import Path" >> fix_org.py
          echo "" >> fix_org.py
          echo "def fix_org_code_blocks(content):" >> fix_org.py
          echo "    content = re.sub(r'^```(\w+)?\s*$', lambda m: f'#+begin_src {m.group(1) or \"\"}', content, flags=re.MULTILINE)" >> fix_org.py
          echo "    content = re.sub(r'^```\s*$', '#+end_src', content, flags=re.MULTILINE)" >> fix_org.py
          echo "    return content" >> fix_org.py
          echo "" >> fix_org.py
          echo "processed_count = 0" >> fix_org.py
          echo "for org_file in Path('.').rglob('*.org'):" >> fix_org.py
          echo "    try:" >> fix_org.py
          echo "        with open(org_file, 'r', encoding='utf-8') as f:" >> fix_org.py
          echo "            content = f.read()" >> fix_org.py
          echo "        fixed_content = fix_org_code_blocks(content)" >> fix_org.py
          echo "        if fixed_content != content:" >> fix_org.py
          echo "            with open(org_file, 'w', encoding='utf-8') as f:" >> fix_org.py
          echo "                f.write(fixed_content)" >> fix_org.py
          echo "            print(f'Fixed: {org_file}')" >> fix_org.py
          echo "            processed_count += 1" >> fix_org.py
          echo "    except Exception as e:" >> fix_org.py
          echo "        print(f'Error: {org_file}: {e}')" >> fix_org.py
          echo "print(f'Processed {processed_count} files')" >> fix_org.py
          
          # Run the Python script
          python3 fix_org.py

      - name: Generate enhanced Javadocs
        run: |
          echo "üìö Generating enhanced Javadocs..."
          mvn javadoc:aggregate -q || echo "Javadoc generation had issues, creating fallback"
          
          # Enhanced fallback with better content
          if [ ! -d "target/site/apidocs" ] || [ -z "$(ls -A target/site/apidocs 2>/dev/null)" ]; then
            echo "üîß Creating enhanced fallback Javadocs..."
            mkdir -p target/site/apidocs
            
            # Create fallback HTML using echo to avoid YAML heredoc issues
            echo "<!DOCTYPE html>" > target/site/apidocs/index.html
            echo "<html><head><title>ByteHot API Documentation</title>" >> target/site/apidocs/index.html
            echo "<style>body{font-family:Arial,sans-serif;max-width:1200px;margin:0 auto;padding:2rem}</style>" >> target/site/apidocs/index.html
            echo "</head><body>" >> target/site/apidocs/index.html
            echo "<h1>üî• ByteHot API Documentation</h1>" >> target/site/apidocs/index.html
            echo "<p>Revolutionary JVM Hot-Swapping Agent</p>" >> target/site/apidocs/index.html
            echo "<h2>Core Architecture</h2>" >> target/site/apidocs/index.html
            echo "<ul><li><strong>Domain Layer:</strong> org.acmsl.bytehot.domain</li>" >> target/site/apidocs/index.html
            echo "<li><strong>Application Layer:</strong> org.acmsl.bytehot.application</li>" >> target/site/apidocs/index.html
            echo "<li><strong>Infrastructure Layer:</strong> org.acmsl.bytehot.infrastructure</li></ul>" >> target/site/apidocs/index.html
            echo "<h2>Status</h2><p>Version 1.2.1 - Core Foundation Complete</p>" >> target/site/apidocs/index.html
            echo "<p>Last Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')</p>" >> target/site/apidocs/index.html
            echo "</body></html>" >> target/site/apidocs/index.html
            echo "üìÑ Created enhanced fallback documentation"
          else
            echo "‚úÖ Javadocs generated successfully!"
            echo "Files in apidocs (first 10):"
            ls -la target/site/apidocs/ | head -10
          fi

      - name: Organize documentation structure
        run: |
          echo "üìÅ Organizing documentation structure..."
          
          # Create documentation structure
          mkdir -p bytehot/{docs,javadocs}
          
          # Copy Javadocs if they exist
          if [ -d "target/site/apidocs" ]; then
            cp -r target/site/apidocs/* bytehot/javadocs/ 2>/dev/null || echo "No apidocs to copy"
          fi
          
          # Copy other documentation sources
          find . -name "*.org" -not -path "./.git/*" -not -path "./target/*" | while read file; do
            rel_path=$(dirname "$file" | sed 's|^\./||')
            if [ "$rel_path" != "." ]; then
              mkdir -p "bytehot/docs/$rel_path"
              cp "$file" "bytehot/docs/$rel_path/"
            else
              cp "$file" "bytehot/"
            fi
          done
          
          # List what we have
          echo "üìã Documentation structure:"
          find bytehot/ -type f | head -20

      - name: Convert documentation files to HTML
        run: |
          # Create simple CSS file without heredoc to avoid YAML issues
          echo "Creating ByteHot CSS styling..."
          echo "/* ByteHot Documentation Styling */" > bytehot/style.css
          echo "body { font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 2rem; }" >> bytehot/style.css
          echo "h1 { color: #333; border-bottom: 2px solid #007acc; padding-bottom: 0.5rem; }" >> bytehot/style.css
          echo "h2 { color: #007acc; margin-top: 2rem; }" >> bytehot/style.css
          echo "code { background: #f5f5f5; padding: 0.2rem 0.4rem; border-radius: 3px; }" >> bytehot/style.css
          echo "pre { background: #f8f8f8; border: 1px solid #ddd; padding: 1rem; border-radius: 5px; overflow-x: auto; }" >> bytehot/style.css
          echo "table { border-collapse: collapse; width: 100%; margin: 1rem 0; }" >> bytehot/style.css
          echo "th, td { border: 1px solid #ddd; padding: 0.75rem; text-align: left; }" >> bytehot/style.css
          echo "th { background-color: #f2f2f2; }" >> bytehot/style.css
          
          # Convert story.org to index.html with navigation (check if file exists in bytehot directory)
          if [ -f "bytehot/story.org" ]; then
            pandoc -f org -t html5 -s --css=style.css --toc bytehot/story.org -o bytehot/index.html --metadata title="ByteHot - Revolutionary JVM Hot-Swapping Agent" || echo "story.org conversion failed, using fallback"
          else
            echo "‚ÑπÔ∏è No story.org found, creating simple index.html"
            echo "<h1>ByteHot Documentation</h1><p>Revolutionary JVM Hot-Swapping Agent</p>" > bytehot/index.html
          fi
          
          # Convert other org files
          find bytehot/ -name "*.org" -type f | while read orgfile; do
            htmlfile="${orgfile%.org}.html"
            echo "Converting: $orgfile -> $htmlfile"
            pandoc -f org -t html5 -s --css=../style.css "$orgfile" -o "$htmlfile" || echo "Failed to convert $orgfile"
          done

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'bytehot'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-docs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4