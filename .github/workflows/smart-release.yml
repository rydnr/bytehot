name: Smart Release with Metadata

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Semver without v prefix
      - 'milestone-*'
      - 'test-*'  # Allow test tags for workflow validation

env:
  JAVA_VERSION: '17'

jobs:
  smart-release:
    name: Smart Release Generation
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout with full history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-
        
    - name: Extract tag metadata and validate semver
      id: meta
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        
        # Validate and determine release type
        if [[ "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "type=stable" >> $GITHUB_OUTPUT
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "title=ByteHot Release" >> $GITHUB_OUTPUT
          
          # Extract version components
          IFS='.' read -r major minor patch <<< "$TAG"
          echo "major=$major" >> $GITHUB_OUTPUT
          echo "minor=$minor" >> $GITHUB_OUTPUT  
          echo "patch=$patch" >> $GITHUB_OUTPUT
          
          # Determine phase based on major version
          if [ "$major" -eq 0 ]; then
            echo "phase=Development" >> $GITHUB_OUTPUT
          elif [ "$major" -eq 1 ]; then
            echo "phase=Core Foundation Complete" >> $GITHUB_OUTPUT
          elif [ "$major" -eq 2 ]; then
            echo "phase=EventSourcing Complete" >> $GITHUB_OUTPUT
          elif [ "$major" -eq 3 ]; then
            echo "phase=Advanced Features" >> $GITHUB_OUTPUT
          else
            echo "phase=Future Phase" >> $GITHUB_OUTPUT
          fi
          
        elif [[ "$TAG" =~ milestone ]]; then
          echo "type=milestone" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "title=Milestone Release" >> $GITHUB_OUTPUT
          echo "phase=Milestone" >> $GITHUB_OUTPUT
          # Extract milestone number
          if [[ "$TAG" =~ milestone-([0-9a-zA-Z]+) ]]; then
            echo "milestone=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          fi
        elif [[ "$TAG" =~ ^test- ]]; then
          echo "type=test" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "title=Test Release" >> $GITHUB_OUTPUT
          echo "phase=Testing" >> $GITHUB_OUTPUT
        else
          echo "❌ Invalid tag format: $TAG"
          echo "✅ Valid formats: X.Y.Z (semver), milestone-*, test-*"
          exit 1
        fi
        
        echo "build_date=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        echo "commit_short=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
        
    - name: Build and test
      run: |
        echo "🔨 Building ByteHot ${{ steps.meta.outputs.tag }}"
        mvn clean verify -B
        
    - name: Package release artifacts
      run: |
        mvn package -DskipTests -B
        
        mkdir -p artifacts
        
        # Copy and rename artifacts
        find . -name "bytehot-*.jar" -path "*/target/*" | while read jar; do
          basename=$(basename "$jar")
          # Create version-specific names
          versioned=$(echo "$basename" | sed "s/latest-SNAPSHOT/${{ steps.meta.outputs.tag }}/g")
          cp "$jar" "artifacts/$versioned"
          cp "$jar" "artifacts/$basename"  # Keep original for compatibility
        done
        
        # Copy commons jar
        find . -name "java-commons-*.jar" -path "*/target/*" -exec cp {} artifacts/ \;
        
        # Generate checksums
        cd artifacts
        sha256sum *.jar > SHA256SUMS
        cd ..
        
        echo "📦 Release artifacts:"
        ls -la artifacts/
        
    - name: Generate smart changelog
      id: changelog
      run: |
        # Get previous tag for comparison
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Smart commit analysis using ByteHot emoji conventions
        python3 - << 'PYTHON_EOF'
        import subprocess
        import re
        import sys
        from datetime import datetime
        
        def get_commits(commit_range):
            if commit_range:
                cmd = f"git log {commit_range} --pretty=format:'%h|%s|%an|%ae|%ad' --date=short --no-merges"
            else:
                cmd = "git log --pretty=format:'%h|%s|%an|%ae|%ad' --date=short --no-merges"
            
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            return result.stdout.strip().split('\n') if result.stdout.strip() else []
        
        def categorize_commit(subject):
            categories = {
                '🧪': ('Tests & Validation', ['test', 'spec', 'validation']),
                '✅': ('Features & Implementation', ['implement', 'add', 'feature']),
                '🔥': ('Major Features', ['major', 'milestone', 'revolutionary']),
                '📚': ('Documentation', ['docs', 'documentation', 'readme']),
                '🔒': ('Security & Dependencies', ['security', 'upgrade', 'vulnerability']),
                '🏗️': ('Infrastructure', ['infrastructure', 'build', 'ci']),
                '🐛': ('Bug Fixes', ['fix', 'bug', 'issue']),
                '🚀': ('Performance & Optimization', ['performance', 'optimize', 'improve']),
                '📝': ('Content Updates', ['update', 'modify', 'change']),
            }
            
            for emoji, (category, keywords) in categories.items():
                if emoji in subject or any(keyword in subject.lower() for keyword in keywords):
                    return emoji, category
            
            return '📋', 'Other Changes'
        
        def extract_issue_refs(subject):
            # Extract issue references like [#123], #123, or [Configuration Loading Issue]
            patterns = [
                r'\[#(\d+)\]',
                r'#(\d+)',
                r'\[([^\]]+)\]'
            ]
            
            refs = []
            for pattern in patterns:
                matches = re.findall(pattern, subject)
                refs.extend(matches)
            
            return refs
        
        # Get commit range
        previous_tag = "${{ env.PREVIOUS_TAG || '' }}"
        if previous_tag:
            commit_range = f"{previous_tag}..HEAD"
            range_desc = f"since {previous_tag}"
        else:
            commit_range = ""
            range_desc = "from project start"
        
        commits = get_commits(commit_range)
        
        # Categorize commits
        categories = {}
        commit_details = []
        
        for commit_line in commits:
            if not commit_line.strip():
                continue
                
            parts = commit_line.split('|')
            if len(parts) < 5:
                continue
                
            hash_short, subject, author, email, date = parts
            
            emoji, category = categorize_commit(subject)
            
            if category not in categories:
                categories[category] = []
            
            # Create commit entry with metadata
            issue_refs = extract_issue_refs(subject)
            commit_entry = {
                'hash': hash_short,
                'subject': subject,
                'author': author,
                'email': email,
                'date': date,
                'emoji': emoji,
                'issue_refs': issue_refs
            }
            
            categories[category].append(commit_entry)
            commit_details.append(commit_entry)
        
        # Generate changelog
        changelog = f"""# ByteHot ${{ steps.meta.outputs.tag }}
        
        > **Release Type:** ${{ steps.meta.outputs.type }}  
        > **Build Date:** ${{ steps.meta.outputs.build_date }}  
        > **Commit:** [${{ steps.meta.outputs.commit_short }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})  
        > **Changes:** {len(commit_details)} commits {range_desc}
        
        ## 🚀 Quick Start
        
        ```bash
        # Download the agent JAR from this release
        java -javaagent:bytehot-${{ steps.meta.outputs.tag }}-agent.jar \\
             -Dbytehot.watch.paths=target/classes \\
             -cp target/classes \\
             com.example.YourApplication
        ```
        
        ## What's Changed
        
        """
        
        # Add categorized changes
        priority_order = [
            '🔥 Major Features',
            '✅ Features & Implementation', 
            '🧪 Tests & Validation',
            '🐛 Bug Fixes',
            '📚 Documentation',
            '🔒 Security & Dependencies',
            '🚀 Performance & Optimization',
            '🏗️ Infrastructure',
            '📝 Content Updates',
            '📋 Other Changes'
        ]
        
        for category_name in priority_order:
            category_key = category_name.split(' ', 1)[1]  # Remove emoji prefix
            if category_key in categories:
                commits_in_category = categories[category_key]
                changelog += f"### {category_name}\n\n"
                
                for commit in commits_in_category:
                    # Format commit with metadata
                    commit_link = f"[{commit['hash']}](https://github.com/${{ github.repository }}/commit/{commit['hash']})"
                    
                    # Add issue references if present
                    issue_info = ""
                    if commit['issue_refs']:
                        issue_links = []
                        for ref in commit['issue_refs']:
                            if ref.isdigit():
                                issue_links.append(f"[#{ref}](https://github.com/${{ github.repository }}/issues/{ref})")
                            else:
                                issue_links.append(f"[{ref}]")
                        if issue_links:
                            issue_info = f" ({', '.join(issue_links)})"
                    
                    changelog += f"- {commit['subject']} ({commit_link}){issue_info}\\n"
                
                changelog += "\\n"
        
        # Add technical details
        changelog += """## 🛠️ Technical Details
        
        **System Requirements:**
        - Java 17 or later
        - Maven 3.6+ (for building from source)
        
        **Architecture:**
        - Domain-Driven Design (DDD) + Hexagonal Architecture
        - Event-driven with comprehensive event sourcing
        - Test-Driven Development methodology
        - User session tracking and flow detection
        
        **Build Information:**
        - **Java Version:** ${{ env.JAVA_VERSION }}
        - **Build Tool:** Maven with shade plugin
        - **Test Coverage:** Comprehensive unit and integration tests
        - **Artifact Type:** Shaded JAR with all dependencies
        
        ## 📦 Release Artifacts
        
        | Artifact | Description | Size | Checksum |
        |----------|-------------|------|----------|
        | `bytehot-${{ steps.meta.outputs.tag }}-agent.jar` | Main ByteHot agent (recommended) | ~14MB | See SHA256SUMS |
        | `bytehot-${{ steps.meta.outputs.tag }}.jar` | Slim version without dependencies | ~300KB | See SHA256SUMS |
        | `bytehot-latest-SNAPSHOT-agent.jar` | Compatibility alias | ~14MB | For CI/CD |
        
        ## 📖 Documentation & Resources
        
        - **[Getting Started Guide](https://github.com/${{ github.repository }}/blob/main/GETTING_STARTED.md)** - Complete setup instructions
        - **[Architecture Documentation](https://github.com/${{ github.repository }}/tree/main/docs)** - Technical deep-dive  
        - **[Feature Specifications](https://github.com/${{ github.repository }}/tree/main/specs)** - Detailed feature specs
        - **[Development Journal](https://github.com/${{ github.repository }}/blob/main/journal.org)** - Development process log
        
        ## 🧪 Quality Assurance
        
        This release includes comprehensive testing:"""
        
        # Add milestone-specific info if applicable
        if "${{ steps.meta.outputs.type }}" == "milestone":
            changelog += """
        
        ## 🎯 Milestone Information
        
        This is **Milestone ${{ steps.meta.outputs.milestone || 'X' }}** of ByteHot development."""
            
            if "${{ steps.meta.outputs.milestone }}" == "7":
                changelog += """
        
        **Milestone 7 Focus:** Documentation Introspection System
        - Self-documenting capabilities
        - Runtime documentation URL generation  
        - Flow detection and documentation
        - Enhanced user experience with accurate guides"""
        
        changelog += """
        
        ---
        
        🤖 **Automated Release**  
        📋 **Workflow:** [${{ github.workflow }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})  
        🔗 **Repository:** [ByteHot](https://github.com/${{ github.repository }})
        """
        
        # Write to file
        with open('RELEASE_NOTES.md', 'w') as f:
            f.write(changelog)
        
        print(f"Generated changelog with {len(commit_details)} commits across {len(categories)} categories")
        PYTHON_EOF
        
        echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
        
        echo "📝 Generated comprehensive release notes:"
        echo "$(wc -l < RELEASE_NOTES.md) lines"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.meta.outputs.tag }}
        name: "ByteHot ${{ steps.meta.outputs.tag }} - ${{ steps.meta.outputs.title }}"
        body_path: RELEASE_NOTES.md
        files: |
          artifacts/*.jar
          artifacts/SHA256SUMS
        draft: false
        prerelease: ${{ steps.meta.outputs.prerelease }}
        generate_release_notes: false
        make_latest: ${{ steps.meta.outputs.type == 'stable' }}
        
    - name: Release summary
      run: |
        echo "🎉 ByteHot ${{ steps.meta.outputs.tag }} released successfully!"
        echo ""
        echo "📊 Release Information:"
        echo "  🏷️  Tag: ${{ steps.meta.outputs.tag }}"
        echo "  📋 Type: ${{ steps.meta.outputs.type }}"
        echo "  🚀 Title: ${{ steps.meta.outputs.title }}"
        echo "  ⚠️  Prerelease: ${{ steps.meta.outputs.prerelease }}"
        echo "  🕒 Built: ${{ steps.meta.outputs.build_date }}"
        echo ""
        echo "📦 Artifacts:"
        ls -la artifacts/
        echo ""
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.meta.outputs.tag }}"