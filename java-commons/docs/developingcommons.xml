<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBk XML V4.1.2//EN" "/usr/share/sgml/docbook/xml-dtd-4.1.2/docbookx.dtd" []>
<article>
  <title>Developing Commons</title>
  <sect1>
    <title>Introduction</title>
    <sect2>
      <title>Background</title>
      <para>
        <acronym>ACM-SL</acronym> <emphasis>Commons</emphasis> is a
        collection of general-purpose packages used in all
        <acronym>ACM-SL</acronym> projects. 
      </para>
      <para>
        Most of such packages were initially conceived as stand-alone,
        independent units. In practice, however, they were somehow
        dependent on each other, so they were unified into the single
        module called <emphasis>Commons</emphasis>.
      </para>
      <para>
        Basically, the semantic classification of this module is the
        following:
        <itemizedlist>
          <listitem><para>utils</para>
            <para>Facades and helper classes around JDK API, to
              simplify basic operations, i.e. reading/writing
              files, which otherwise become duplicated wherever such
              operations are required.
            </para>
          </listitem>
          <listitem><para>regexp-plugin</para>
            <para>
              API layer to isolate <emphasis>regexp</emphasis> engines
              (providers) from the client code which uses
              <emphasis>regexp</emphasis>-based logic.
            </para>
          </listitem>
          <listitem><para>versionable</para>
            <para>
              Simplistic API to export and manage CVS information
              available at development time, per CVS-managed file.
            </para>
          </listitem>
          <listitem><para>patterns</para>
            <para>
              Design patterns interfaces and implementations.
            </para>
          </listitem>
          <listitem><para>automata</para>
            <para>
              Used to simplify the design and modelling of stateful
              entities.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </sect2>
    <sect2>
      <title>Motivations</title>
      <para>
        <acronym>ACM-SL</acronym> projects, as they grew in size and
        complexity, eventually needed a common horizontal layer of
        utilities, abstractions and services.
      </para>
      <para>
        Such horizontal layer would also evolve as long as its
        customers required more features and bug-fixes. That's why the
        development of <emphasis>Commons</emphasis> has followed a
        continuous iteration-based process, to satisfy the needs of
        the other (vertical or horizontal) projects.
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title>Requirements</title>
    <sect2>
      <title>Introduction</title>
      <para>
      </para>
    </sect2>
    <sect2>
      <title>Functional requirements</title>
      <para>
        The funcional requirements are described next:
        <itemizedlist>
          <listitem>
            <para>
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </sect2>
    <sect2>
      <title>Non-functional requirements</title>
      <para>
        There're also non-functional requirements. Some of them are
        part of ACM-SL development standard.
        <itemizedlist>
          <listitem>
            <para>
              The project should have a <emphasis>Developing
              Undigester</emphasis> document (usually this one), that
              explains each decision that was taken while
              developing the module.
            </para>
          </listitem>
          <listitem>
            <para>
              The code should include Javadoc comments, and be
              designed using patterns as much as possible. For that,
              it'll use already existing ACM-SL packages.
            </para>
          </listitem>
          <listitem>
            <para>
              The project should follow ACM-SL's folder structure.
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis>Ant</emphasis> is the core tool for compiling,
              building and testing the module. Also, the project's
              <emphasis>Ant</emphasis> script will use the one that is
              shared along all ACM-SL projects.
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis>JUnit</emphasis> usage is highly desirable. At
              least, it provides minimal confiability of the overall
              quality.
            </para>
          </listitem>
          <listitem>
            <para>
              As all other projects at ACM-SL,
              <emphasis>Undigester</emphasis> should use
              <emphasis>Bugzilla</emphasis> to register missing
              features as well as eventual bugs. ACM-SL doesn't
              associate growing bug count with bad quality, usually
              the opposite, since the bugs and their state are known,
              and therefore can be managed.
            </para>
          </listitem>
          <listitem>
            <para>
              Recently, we introduced <emphasis>Maven</emphasis> as a
              standard tool in future developments, so the project
              should include the files required for
              <emphasis>Maven</emphasis> to successfully generate all
              reports. The <function>navigation.xml</function> will be the
              same as other ACM-SL projects.
            </para>
          </listitem>
          <listitem>
            <para>
              The Java source files should respect ACM-SL coding
              standards, and include such definition in a file called
              <function>code-conventions.txt</function>.
            </para>
          </listitem>
          <listitem>
            <para>
              Last, but not least, as required by the GPL license, the
              file <function>LICENSE.txt</function> should be present as well.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title>Development</title>
    <sect2>
      <title>Defining concepts</title>
      <sect3>
        <title>Introduction</title>
        <para>
        </para>
      </sect3>
    </sect2>
    <sect2>
      <title>Difficulties</title>
      <para>
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title>Competitors</title>
    <para>
    </para>
  </sect1>
  <sect1>
    <title>Technical documentation</title>
    <sect2>
      <title>Introduction</title>
      <para>
        This chapter tries to describe in more detail the reasons
        behind most important <emphasis>Undigester</emphasis>
        classes.
      </para>
      <para>
        Don't expect here Javadoc-like descriptions of the
        classes. That's not the purpose. The idea is to clarify the
        essential motivations and results of some of the classes. Not
        only describing the final result, but also the initial
        approach and its evolution.
      </para>
    </sect2>
    <sect2>
      <title>Class description</title>
      <sect3>
        <title>Rule</title>
        <para>
        </para>
      </sect3>
    </sect2>
  </sect1>
</article>
