#+TITLE: BaseConfigurationAdapter - Reusable Configuration Infrastructure Foundation
#+AUTHOR: ByteHot Development Team  
#+DATE: [2025-06-27]

* Overview

The ~BaseConfigurationAdapter<T>~ class provides a sophisticated, reusable foundation for configuration management across DDD/Hexagonal Architecture projects. This abstract base class implements the template method pattern to provide hierarchical configuration loading from multiple sources while allowing project-specific customization through well-defined extension points. It serves as the cornerstone of the ~java-commons-infrastructure~ module's configuration management strategy, enabling consistent configuration patterns across different projects and domains.

* Architectural Design and Reusability

** Template Method Pattern Implementation
BaseConfigurationAdapter leverages the template method pattern for configuration loading:
- Defines a fixed algorithm for hierarchical configuration source processing
- Provides extension points for project-specific configuration sources and transformations
- Ensures consistent configuration loading behavior across different implementations
- Enables code reuse while maintaining flexibility for domain-specific requirements

** Hierarchical Configuration Source Priority
The adapter implements a sophisticated configuration source hierarchy:
1. **System Properties**: Highest priority for runtime overrides and debugging
2. **Environment Variables**: Second priority for containerized and deployment configurations  
3. **Project-Specific Sources**: Third priority for application-specific configuration files
4. **Default Configuration**: Lowest priority providing sensible fallback values

** Generic Type Safety and Flexibility
The implementation provides type-safe configuration loading:
- Generic type parameter ~<T>~ ensures compile-time type safety for configuration objects
- Abstract methods force concrete implementations to specify configuration types
- Type-safe transformation methods prevent runtime configuration errors
- Flexible enough to support any configuration object structure

* Core Configuration Loading Algorithm

** Primary Configuration Loading Interface
#+BEGIN_SRC java :tangle ../java-commons-infrastructure/src/main/java/org/acmsl/commons/infrastructure/config/BaseConfigurationAdapter.java
/**
 * Loads configuration from the configured sources.
 * 
 * @return the loaded configuration
 * @throws ConfigurationException if configuration loading fails
 */
@NonNull
public T loadConfiguration() throws ConfigurationException {
    if (configurationLoaded && cachedConfiguration != null) {
        return cachedConfiguration;
    }

    try {
        final T configuration = loadConfigurationInternal();
        cachedConfiguration = configuration;
        configurationLoaded = true;
        return configuration;
    } catch (final Exception e) {
        throw new ConfigurationException("Failed to load configuration", e);
    }
}
#+END_SRC

** Configuration Availability and Health Monitoring
#+BEGIN_SRC java :tangle ../java-commons-infrastructure/src/main/java/org/acmsl/commons/infrastructure/config/BaseConfigurationAdapter.java
/**
 * Checks if configuration is currently available from any source.
 * 
 * @return true if configuration is available
 */
public boolean isConfigurationAvailable() {
    return hasSystemPropertyConfiguration() ||
           hasEnvironmentVariableConfiguration() ||
           hasProjectSpecificConfiguration() ||
           canCreateDefaultConfiguration();
}

/**
 * Returns a description of the configuration source being used.
 * 
 * @return configuration source description
 */
@NonNull
public String getConfigurationSource() {
    if (hasSystemPropertyConfiguration()) {
        return "System Properties";
    }
    if (hasEnvironmentVariableConfiguration()) {
        return "Environment Variables";
    }
    if (hasProjectSpecificConfiguration()) {
        return "Project Configuration Files";
    }
    return "Default Configuration";
}
#+END_SRC

** Hierarchical Configuration Source Processing
#+BEGIN_SRC java :tangle ../java-commons-infrastructure/src/main/java/org/acmsl/commons/infrastructure/config/BaseConfigurationAdapter.java
/**
 * Internal configuration loading implementation.
 * 
 * @return loaded configuration
 * @throws ConfigurationException if loading fails
 */
@NonNull
protected T loadConfigurationInternal() throws ConfigurationException {
    // Try system properties first
    final Optional<T> systemPropsConfig = loadFromSystemProperties();
    if (systemPropsConfig.isPresent()) {
        final T config = systemPropsConfig.get();
        validateConfiguration(config);
        return config;
    }

    // Try environment variables
    final Optional<T> envConfig = loadFromEnvironmentVariables();
    if (envConfig.isPresent()) {
        final T config = envConfig.get();
        validateConfiguration(config);
        return config;
    }

    // Try project-specific sources
    for (final ConfigurationSource source : getProjectSpecificSources()) {
        final Optional<T> sourceConfig = loadFromSource(source);
        if (sourceConfig.isPresent()) {
            final T config = sourceConfig.get();
            validateConfiguration(config);
            return config;
        }
    }

    // Fall back to default configuration
    final T defaultConfig = createDefaultConfiguration();
    validateConfiguration(defaultConfig);
    return defaultConfig;
}
#+END_SRC

* Extension Points for Project Customization

** Abstract Methods for Project-Specific Implementation
#+BEGIN_SRC java :tangle ../java-commons-infrastructure/src/main/java/org/acmsl/commons/infrastructure/config/BaseConfigurationAdapter.java
/**
 * Returns the configuration class for type safety.
 * 
 * @return the configuration class
 */
@NonNull
protected abstract Class<T> getConfigurationClass();

/**
 * Returns the list of project-specific configuration sources.
 * 
 * @return list of configuration sources
 */
@NonNull
protected abstract List<ConfigurationSource> getProjectSpecificSources();

/**
 * Creates a default configuration when no other sources are available.
 * 
 * @return default configuration instance
 */
@NonNull
protected abstract T createDefaultConfiguration();
#+END_SRC

** Customizable Configuration Processing
#+BEGIN_SRC java :tangle ../java-commons-infrastructure/src/main/java/org/acmsl/commons/infrastructure/config/BaseConfigurationAdapter.java
/**
 * Returns the environment variable prefix for this configuration.
 * 
 * @return environment variable prefix
 */
@NonNull
protected String getEnvironmentPrefix() {
    return getConfigurationClass().getSimpleName().toUpperCase() + "_";
}

/**
 * Returns the system property prefix for this configuration.
 * 
 * @return system property prefix
 */
@NonNull
protected String getSystemPropertyPrefix() {
    return getConfigurationClass().getSimpleName().toLowerCase() + ".";
}

/**
 * Transforms raw configuration data into the target configuration type.
 * 
 * @param rawConfiguration the raw configuration data
 * @return transformed configuration
 */
@NonNull
protected T transformConfiguration(@NonNull final Object rawConfiguration) {
    // Default implementation assumes no transformation needed
    return getConfigurationClass().cast(rawConfiguration);
}

/**
 * Validates the loaded configuration.
 * 
 * @param configuration the configuration to validate
 * @throws ConfigurationException if validation fails
 */
protected void validateConfiguration(@NonNull final T configuration) throws ConfigurationException {
    // Default implementation does no validation
    // Subclasses can override to add specific validation logic
}
#+END_SRC

* Configuration Source Integration

** System Properties Integration
The adapter provides automatic system properties integration:
- Uses configurable property prefixes for namespacing
- Automatically converts system properties to configuration maps
- Supports type conversion and property hierarchy flattening
- Provides debugging support through property inspection

** Environment Variables Integration  
The adapter includes comprehensive environment variable support:
- Configurable environment variable prefixes for deployment flexibility
- Automatic case conversion (UPPER_CASE to lower.case mapping)
- Container and cloud deployment compatibility
- Kubernetes ConfigMap and Secret integration support

** Project-Specific Configuration Sources
The design enables flexible project-specific configuration:
- Support for multiple configuration file formats (YAML, Properties, JSON)
- Classpath and external file system loading capabilities
- Custom configuration source implementations
- Priority-based configuration source ordering

* Performance Optimization and Caching

** Configuration Caching Strategy
#+BEGIN_SRC java :tangle ../java-commons-infrastructure/src/main/java/org/acmsl/commons/infrastructure/config/BaseConfigurationAdapter.java
/**
 * Cached configuration instance.
 */
@Nullable
private T cachedConfiguration;

/**
 * Whether configuration has been loaded.
 */
private boolean configurationLoaded = false;

/**
 * Clears the cached configuration, forcing reload on next access.
 */
public void clearCache() {
    cachedConfiguration = null;
    configurationLoaded = false;
}
#+END_SRC

** Lazy Loading and Performance Optimization
The implementation provides several performance optimizations:
- **Lazy Loading**: Configuration loaded only when first accessed
- **Single Load Guarantee**: Configuration loaded once and cached for subsequent access
- **Efficient Source Checking**: Fast availability checking without full loading
- **Memory Efficiency**: Minimal memory footprint with optional caching

** Error Handling and Resilience
The adapter implements comprehensive error handling:
- **Graceful Degradation**: Continues processing despite individual source failures
- **Detailed Error Information**: Comprehensive error messages for troubleshooting
- **Fallback Mechanisms**: Automatic fallback to alternative configuration sources
- **Configuration Health Monitoring**: Proactive configuration availability checking

* Integration with Configuration Sources

** Built-in Configuration Source Support
The adapter integrates with standard configuration sources:
- **SystemPropertyConfigurationSource**: System properties with configurable prefixes
- **EnvironmentVariableConfigurationSource**: Environment variables with naming conventions
- **YamlConfigurationSource**: YAML file loading with classpath and file system support
- **PropertiesConfigurationSource**: Java properties file support

** Custom Configuration Source Support
The design enables custom configuration source implementations:
- **ConfigurationSource Interface**: Standard interface for configuration source implementations
- **Priority-Based Loading**: Configurable priority ordering for multiple sources
- **Source Availability Checking**: Health monitoring for configuration source reliability
- **Error Recovery**: Automatic source failover and recovery mechanisms

* Usage Examples and Implementation Patterns

** Basic Project Configuration Adapter
#+begin_src java
public class ProjectConfigurationAdapter 
    extends BaseConfigurationAdapter<ProjectConfiguration>
    implements ProjectConfigurationPort {
    
    @Override
    protected Class<ProjectConfiguration> getConfigurationClass() {
        return ProjectConfiguration.class;
    }
    
    @Override
    protected List<ConfigurationSource> getProjectSpecificSources() {
        return Arrays.asList(
            new YamlConfigurationSource("project-config.yml"),
            new PropertiesConfigurationSource("project.properties")
        );
    }
    
    @Override
    protected ProjectConfiguration createDefaultConfiguration() {
        return new ProjectConfiguration.Builder()
            .withDefaultSettings()
            .build();
    }
    
    @Override
    public Class<ProjectConfigurationPort> adapts() {
        return ProjectConfigurationPort.class;
    }
}
#+end_src

** Advanced Configuration with Validation
#+begin_src java
public class EnterpriseConfigurationAdapter 
    extends BaseConfigurationAdapter<EnterpriseConfiguration> {
    
    @Override
    protected void validateConfiguration(@NonNull final EnterpriseConfiguration config) 
        throws ConfigurationException {
        if (config.getDatabaseUrl() == null) {
            throw new ConfigurationException("Database URL is required");
        }
        if (config.getMaxConnections() <= 0) {
            throw new ConfigurationException("Max connections must be positive");
        }
        // Additional enterprise validation rules
    }
    
    @Override
    protected EnterpriseConfiguration transformConfiguration(@NonNull final Object raw) {
        // Custom transformation logic for enterprise configuration
        if (raw instanceof Map) {
            return EnterpriseConfigurationMapper.fromMap((Map<String, Object>) raw);
        }
        return super.transformConfiguration(raw);
    }
}
#+end_src

** Composition Pattern Implementation
#+begin_src java
public class CompositeConfigurationAdapter implements ConfigurationPort {
    
    private final BaseConfigurationAdapter<CoreConfiguration> baseAdapter;
    private final CustomConfigurationProcessor customProcessor;
    
    public CompositeConfigurationAdapter() {
        this.baseAdapter = new CoreConfigurationAdapter();
        this.customProcessor = new CustomConfigurationProcessor();
    }
    
    @Override
    public Configuration loadConfiguration() throws ConfigurationException {
        final CoreConfiguration baseConfig = baseAdapter.loadConfiguration();
        return customProcessor.enhanceConfiguration(baseConfig);
    }
}
#+end_src

* Integration with DDD/Hexagonal Architecture

** Port-Adapter Pattern Compliance
The BaseConfigurationAdapter maintains strict architectural boundaries:
- **Infrastructure Layer Implementation**: Concrete infrastructure concerns separated from domain
- **Port Interface Compatibility**: Can implement any configuration port from the domain layer
- **Domain Model Integration**: Works with any domain configuration objects
- **Cross-Cutting Concern Management**: Handles configuration as infrastructure cross-cutting concern

** Domain-Driven Design Principles
The implementation follows DDD principles:
- **Generic Infrastructure**: Reusable across different bounded contexts and domains
- **Configuration as Value Objects**: Supports rich domain configuration objects
- **Event-Driven Capabilities**: Can be extended to emit configuration events
- **Aggregate Support**: Handles complex configuration aggregates and relationships

** Testing and Mockability
The design supports comprehensive testing:
- **Interface-Based Testing**: Mock configuration sources for unit testing
- **Test Configuration Sources**: Special test configuration source implementations
- **Configuration Validation Testing**: Separate testing of validation logic
- **Performance Testing**: Benchmarking configuration loading performance

* Future Enhancement Opportunities

** Advanced Configuration Features
The foundation supports future enhancements:
- **Configuration Hot-Reload**: Dynamic configuration updates without restart
- **Configuration Encryption**: Encrypted configuration sections and secret management
- **Configuration Versioning**: Configuration change tracking and rollback capabilities
- **Distributed Configuration**: Shared configuration across multiple application instances

** Cloud-Native Configuration
The design enables cloud-native configuration patterns:
- **Service Discovery Integration**: Configuration through service discovery mechanisms
- **Secret Management Integration**: Integration with cloud secret management services
- **Configuration Server Support**: External configuration server and management platforms
- **Microservices Configuration**: Distributed configuration for microservices architectures

** Advanced Validation and Monitoring
Future enhancements may include:
- **Schema-Based Validation**: JSON Schema and other schema validation mechanisms
- **Configuration Drift Detection**: Monitoring for unexpected configuration changes
- **Configuration Performance Metrics**: Detailed metrics for configuration loading performance
- **Configuration Audit Trails**: Comprehensive audit logging for configuration operations

The BaseConfigurationAdapter provides a robust, reusable foundation for configuration management that maintains clean architectural boundaries while enabling sophisticated configuration strategies across diverse project requirements and deployment scenarios.