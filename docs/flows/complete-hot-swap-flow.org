#+TITLE: Complete Hot-Swap Flow - Runtime Collaboration in ByteHot
#+AUTHOR: ByteHot Development Team
#+DATE: [2025-06-20]
#+DESCRIPTION: Literate programming documentation of the complete hot-swap flow showing runtime class collaboration

* Overview: Following the Hot-Swap Journey

This document traces the complete journey of a hot-swap operation in ByteHot, from the initial file system change detection through to successful JVM class redefinition. Unlike the individual class documentation, this "literate flow" shows how multiple classes collaborate at runtime, revealing the dynamic behavior of ByteHot's architecture.

** The Complete Flow Sequence

The hot-swap flow demonstrates ByteHot's sophisticated event-driven architecture:

#+BEGIN_SRC
File Change → Detection → Validation → Hot-Swap Request → JVM Redefinition → Success Event
     ↓             ↓           ↓              ↓                ↓              ↓
FileWatcher → Application → ByteHot → HotSwapManager → InstrumentationAdapter → EventEmitter
#+END_SRC

** Participants in the Flow

- **FileWatcherAdapter**: Detects filesystem changes (Infrastructure)
- **ByteHotApplication**: Routes events through the system (Application)
- **ByteHot**: Orchestrates the hot-swap process (Domain)
- **BytecodeValidator**: Validates bytecode compatibility (Domain)
- **HotSwapManager**: Manages JVM redefinition (Domain)
- **EventStoreAdapter**: Persists events for audit trail (Infrastructure)
- **EventEmitterAdapter**: Emits success/failure events (Infrastructure)

** What This Flow Demonstrates

- **Hexagonal Architecture** in action across all three layers
- **Event-driven collaboration** between domain services
- **Error handling** at each step with proper event generation
- **Infrastructure abstraction** through ports and adapters
- **Domain purity** maintained despite complex orchestration

* Phase 1: File System Change Detection

The flow begins when a developer's IDE compiles a .class file, triggering ByteHot's file system monitoring.

** Step 1.1: File System Event Capture

#+BEGIN_SRC java
// From: FileWatcherAdapter.java (Infrastructure Layer)
public void watchClassFiles(final Consumer<Object> onClassFileEvent) throws IOException {
    final WatchService watchService = java.nio.file.FileSystems.getDefault().newWatchService();
    getFolder().register(watchService,
        StandardWatchEventKinds.ENTRY_CREATE,
        StandardWatchEventKinds.ENTRY_MODIFY,
        StandardWatchEventKinds.ENTRY_DELETE);

    try {
        while (!Thread.currentThread().isInterrupted()) {
            final WatchKey key = watchService.poll(getInterval(), TimeUnit.MILLISECONDS);
            if (key != null) {
                for (final WatchEvent<?> event : key.pollEvents()) {
                    final Path changedPath = getFolder().resolve((Path) event.context());
                    
                    if (isClassFile(changedPath)) {
                        try {
                            final Object domainEvent = createClassFileEvent(changedPath, event.kind());
                            if (domainEvent != null) {
                                onClassFileEvent.accept(domainEvent);  // → Step 1.2
                            }
                        } catch (final IOException e) {
                            handleFileProcessingError(changedPath, e);
                        }
                    }
                }
                key.reset();
            }
        }
    } catch (final InterruptedException ignored) {
        Thread.currentThread().interrupt();
    } finally {
        watchService.close();
    }
}
#+END_SRC

**Runtime Behavior**: The FileWatcherAdapter continuously polls the file system. When a .class file is modified, it captures the low-level file system event and begins the transformation to domain concepts.

** Step 1.2: Domain Event Creation

#+BEGIN_SRC java
// From: ClassFileWatcher.java (Domain Layer)
private ClassFileChanged createClassFileChangedEvent(final Path classFile) throws IOException {
    final String className = extractClassName(classFile);
    final long fileSize = Files.size(classFile);
    final Instant timestamp = Instant.now();
    
    return ClassFileChanged.forNewSession(classFile, className, fileSize, timestamp);
}

private String extractClassName(final Path classFile) {
    final String fileName = classFile.getFileName().toString();
    if (fileName.endsWith(CLASS_FILE_EXTENSION)) {
        return fileName.substring(0, fileName.length() - CLASS_FILE_EXTENSION.length());
    }
    return fileName;
}
#+END_SRC

**Runtime Behavior**: The infrastructure adapter transforms the technical file system event into a rich domain event (`ClassFileChanged`) that carries business-meaningful information: class name, file size, and precise timestamp.

** Step 1.3: Event Handoff to Application Layer

#+BEGIN_SRC java
// From: ByteHotCLI.java (Infrastructure → Application boundary)
private void handleFileEvent(Object event) {
    if (event instanceof ClassFileChanged classFileEvent) {
        try {
            application.accept(classFileEvent);  // → Phase 2
        } catch (Exception e) {
            handleApplicationError(classFileEvent, e);
        }
    }
}
#+END_SRC

**Runtime Behavior**: The infrastructure layer hands off the domain event to the application layer, crossing the first architectural boundary. The event now enters ByteHot's core processing pipeline.

* Phase 2: Application Layer Event Routing

The application layer serves as the thin orchestration layer that routes events to appropriate domain aggregates.

** Step 2.1: Event Reception and Routing

#+BEGIN_SRC java
// From: ByteHotApplication.java (Application Layer)
public DomainResponseEvent<ClassFileChanged> accept(final ClassFileChanged event) {
    try {
        // Route to domain aggregate for processing
        final DomainResponseEvent<ClassFileChanged> response = ByteHot.accept(event);  // → Phase 3
        
        // Emit any resulting events through infrastructure
        if (response != null) {
            emit(response);  // → Phase 6
        }
        
        return response;
        
    } catch (final Exception e) {
        // Convert exceptions to domain events
        final ClassFileProcessed errorResponse = ClassFileProcessed.failure(
            event, 
            "Application error: " + e.getMessage()
        );
        emit(errorResponse);
        return errorResponse;
    }
}
#+END_SRC

**Runtime Behavior**: The application layer performs two critical functions:
1. **Routes** the event to the appropriate domain aggregate (ByteHot)
2. **Emits** any resulting domain events through infrastructure adapters

** Step 2.2: Event Emission Infrastructure

#+BEGIN_SRC java
// From: ByteHotApplication.java (Application Layer)
private void emit(final DomainResponseEvent<?> event) {
    try {
        final EventEmitterPort emitter = Ports.resolve(EventEmitterPort.class);
        emitter.emit(event);
        
        final EventStorePort eventStore = Ports.resolve(EventStorePort.class);
        if (event instanceof VersionedDomainEvent versionedEvent) {
            eventStore.save(versionedEvent);
        }
        
    } catch (final Exception e) {
        // Log error but don't fail the main flow
        System.err.println("Failed to emit event: " + e.getMessage());
    }
}
#+END_SRC

**Runtime Behavior**: The application uses the Ports pattern to access infrastructure without depending on concrete implementations. This maintains clean architectural boundaries while enabling flexible infrastructure swapping.

* Phase 3: Domain Processing and Validation

The domain layer contains the core business logic for hot-swap operations, maintaining purity while orchestrating complex validation and decision-making.

** Step 3.1: Domain Aggregate Event Acceptance

#+BEGIN_SRC java
// From: ByteHot.java (Domain Layer - Aggregate Root)
public static DomainResponseEvent<ClassFileChanged> accept(final ClassFileChanged event) {
    try {
        // Step 1: Validate the bytecode for hot-swap compatibility
        final BytecodeValidator validator = new BytecodeValidator();
        final BytecodeValidated validationResult = validator.validate(event.getClassFile());  // → Step 3.2
        
        // Step 2: If validation succeeds, create hot-swap request
        final HotSwapManager hotSwapManager = new HotSwapManager();
        final byte[] currentBytecode = getCurrentBytecode(event.getClassName());
        final HotSwapRequested hotSwapRequest = hotSwapManager.requestHotSwap(
            event.getClassFile(), 
            validationResult, 
            currentBytecode
        );  // → Step 3.4
        
        // Step 3: Perform the actual hot-swap
        final ClassRedefinitionSucceeded success = hotSwapManager.performRedefinition(hotSwapRequest);  // → Step 3.5
        
        // Step 4: Return success response
        return ClassFileProcessed.success(event, validationResult, hotSwapRequest, success);
        
    } catch (final BytecodeValidationException e) {
        // Validation failed - return rejection response
        return ClassFileProcessed.validationFailed(event, e.getRejectionEvent());
        
    } catch (final HotSwapException e) {
        // Hot-swap failed - return failure response
        return ClassFileProcessed.hotSwapFailed(event, e.getFailureEvent());
        
    } catch (final Exception e) {
        // Unexpected error - return error response
        return ClassFileProcessed.unexpectedError(event, e.getMessage());
    }
}
#+END_SRC

**Runtime Behavior**: The ByteHot aggregate acts as the orchestrator for the entire hot-swap process. It coordinates multiple domain services while maintaining transactional consistency through proper error handling.

** Step 3.2: Bytecode Validation Logic

#+BEGIN_SRC java
// From: BytecodeValidator.java (Domain Service)
public BytecodeValidated validate(final Path classFile) throws IOException, BytecodeValidationException {
    final byte[] bytecode = Files.readAllBytes(classFile);
    final String content = new String(bytecode);
    
    // Parse the mock bytecode format for compatibility analysis
    if (content.startsWith("COMPATIBLE_BYTECODE:")) {
        return createValidatedEvent(classFile, content);  // → Step 3.3a
    } else if (content.startsWith("INCOMPATIBLE_BYTECODE:")) {
        throw new BytecodeValidationException(createRejectedEvent(classFile, content));  // → Step 3.3b
    } else {
        throw new IOException("Unknown bytecode format");
    }
}
#+END_SRC

**Runtime Behavior**: The BytecodeValidator encapsulates the complex business rules for determining hot-swap compatibility. It analyzes bytecode changes and makes authoritative decisions about safety.

** Step 3.3a: Successful Validation Event Creation

#+BEGIN_SRC java
// From: BytecodeValidator.java (Domain Service)
private BytecodeValidated createValidatedEvent(final Path classFile, final String content) {
    final String[] parts = content.split(":");
    final String className = parts[1];
    
    String validationDetails = "Bytecode validation passed - compatible changes detected";
    if (parts.length > 3 && "method_body_only".equals(parts[3])) {
        validationDetails = "Bytecode validation passed - method body changes only";
    } else if (parts.length > 3 && "method_body_changes".equals(parts[3])) {
        validationDetails = "Bytecode validation passed - method body changes detected";
    }
    
    final Instant timestamp = Instant.now();
    
    return new BytecodeValidated(classFile, className, true, validationDetails, timestamp);
}
#+END_SRC

**Runtime Behavior**: When validation succeeds, a rich `BytecodeValidated` event is created containing detailed information about what type of compatible changes were detected.

** Step 3.3b: Failed Validation Event Creation

#+BEGIN_SRC java
// From: BytecodeValidator.java (Domain Service)
private BytecodeRejected createRejectedEvent(final Path classFile, final String content) {
    final String[] parts = content.split(":");
    final String className = parts[1];
    
    String rejectionReason = "Incompatible bytecode changes detected";
    if (parts.length > 5 && "field_removal".equals(parts[5])) {
        rejectionReason = "Bytecode validation failed - schema changes (field removal) not supported";
    } else if (parts.length > 5 && "field_addition".equals(parts[5])) {
        rejectionReason = "Bytecode validation failed - schema changes (field addition) not supported";
    }
    
    final Instant timestamp = Instant.now();
    
    return BytecodeRejected.forNewSession(classFile, className, rejectionReason, timestamp);
}
#+END_SRC

**Runtime Behavior**: When validation fails, a detailed `BytecodeRejected` event is created with specific reasons why the changes are incompatible, enabling developers to understand and address issues.

** Step 3.4: Hot-Swap Request Creation

#+BEGIN_SRC java
// From: HotSwapManager.java (Domain Service)
public HotSwapRequested requestHotSwap(final Path classFile, final BytecodeValidated validation, 
                                      final byte[] originalBytecode) throws IOException {
    final byte[] newBytecode = Files.readAllBytes(classFile);
    final String requestReason = createRequestReason(validation);
    final Instant timestamp = Instant.now();
    
    // Create a placeholder ClassFileChanged event for the HotSwapRequested
    ClassFileChanged placeholderEvent = ClassFileChanged.forNewSession(
        classFile,
        validation.getClassName(),
        newBytecode.length,
        timestamp
    );
    
    return new HotSwapRequested(
        classFile,
        validation.getClassName(),
        originalBytecode,
        newBytecode,
        requestReason,
        timestamp,
        placeholderEvent
    );
}

protected String createRequestReason(final BytecodeValidated validation) {
    return "Bytecode validation passed - initiating hot-swap";
}
#+END_SRC

**Runtime Behavior**: The HotSwapManager transforms the validation success into a concrete hot-swap request, capturing both the old and new bytecode along with the validation context.

** Step 3.5: JVM Class Redefinition Execution

#+BEGIN_SRC java
// From: HotSwapManager.java (Domain Service)
public ClassRedefinitionSucceeded performRedefinition(final HotSwapRequested request) throws HotSwapException {
    final long startTime = System.nanoTime();
    
    try {
        // Mock JVM redefinition logic for testing
        final String content = new String(request.getNewBytecode());
        
        if (content.contains("INCOMPATIBLE_BYTECODE") || content.contains("SCHEMA_CHANGE_BYTECODE")) {
            // Simulate JVM rejection
            throw createJvmRejectionException(request, content);  // → Step 3.6b
        }
        
        if (content.contains("NotLoadedClass")) {
            // Simulate class not found
            throw createClassNotFoundException(request);  // → Step 3.6c
        }
        
        // Simulate successful redefinition
        final long endTime = System.nanoTime();
        final Duration duration = Duration.ofNanos(endTime - startTime);
        final int affectedInstances = calculateAffectedInstances(request);
        final String details = createRedefinitionDetails(request);
        final Instant timestamp = Instant.now();
        
        return new ClassRedefinitionSucceeded(
            request.getClassName(),
            request.getClassFile(),
            affectedInstances,
            details,
            duration,
            timestamp
        );  // → Step 3.6a
        
    } catch (final Exception e) {
        if (e instanceof HotSwapException) {
            throw e;
        }
        // Wrap unexpected exceptions
        final ClassRedefinitionFailed failure = createUnexpectedFailure(request, e);
        throw new HotSwapException(failure, e);
    }
}
#+END_SRC

**Runtime Behavior**: The HotSwapManager coordinates with the JVM (through infrastructure adapters in production) to perform the actual class redefinition. It measures performance and tracks the impact of the operation.

** Step 3.6a: Successful Redefinition Response

#+BEGIN_SRC java
// From: HotSwapManager.java (Domain Service)
protected int calculateAffectedInstances(final HotSwapRequested request) {
    final String content = new String(request.getNewBytecode());
    if (content.contains("instances:multiple")) {
        return 3; // Mock multiple instances
    }
    return 1; // Mock single instance
}

protected String createRedefinitionDetails(final HotSwapRequested request) {
    return String.format("Class %s redefinition completed successfully", request.getClassName());
}
#+END_SRC

**Runtime Behavior**: Success generates detailed metrics about the redefinition: execution time, number of affected instances, and success details for monitoring and optimization.

** Step 3.6b: JVM Rejection Handling

#+BEGIN_SRC java
// From: HotSwapManager.java (Domain Service)
protected HotSwapException createJvmRejectionException(final HotSwapRequested request, final String content) {
    String reason;
    String jvmError;
    String recoveryAction;
    
    if (content.contains("SCHEMA_CHANGE")) {
        reason = "JVM detected incompatible schema changes";
        jvmError = "java.lang.UnsupportedOperationException: class redefinition failed: attempted to change the schema";
        recoveryAction = "Restart application to load new class definition";
    } else {
        reason = "JVM rejected bytecode changes as incompatible";
        jvmError = "java.lang.UnsupportedOperationException: class redefinition failed: incompatible changes detected";
        recoveryAction = "Review changes for compatibility or restart application";
    }
    
    final ClassRedefinitionFailed failure = new ClassRedefinitionFailed(
        request.getClassName(),
        request.getClassFile(),
        reason,
        jvmError,
        recoveryAction,
        Instant.now()
    );
    
    return new HotSwapException(failure);
}
#+END_SRC

**Runtime Behavior**: When the JVM rejects the redefinition, detailed failure information is captured including the specific JVM error and actionable recovery guidance for developers.

* Phase 4: Event Persistence and Audit Trail

Every significant event in the hot-swap flow is persisted for audit trails, debugging, and system intelligence.

** Step 4.1: Event Store Persistence

#+BEGIN_SRC java
// From: FilesystemEventStoreAdapter.java (Infrastructure Layer)
@Override
public void save(VersionedDomainEvent event) throws EventStoreException {
    try {
        // Ensure aggregate directory exists
        Path aggregateDir = getAggregateDirectoryPath(event.getAggregateType(), event.getAggregateId());
        Files.createDirectories(aggregateDir);
        
        // Update version if needed
        String aggregateKey = aggregateKey(event.getAggregateType(), event.getAggregateId());
        AtomicLong currentVersion = aggregateVersions.computeIfAbsent(
            aggregateKey, 
            k -> new AtomicLong(0L)
        );
        
        // Increment version
        long newVersion = currentVersion.incrementAndGet();
        
        // Create filename with timestamp and sequence
        String filename = createEventFilename(event, newVersion);
        Path eventFile = aggregateDir.resolve(filename);
        
        // Serialize event to JSON
        String eventJson = serializeEvent(event);  // → Step 4.2
        
        // Write to file atomically
        Files.write(eventFile, eventJson.getBytes(), 
                   StandardOpenOption.CREATE, StandardOpenOption.WRITE);
        
        // Update metadata
        updateMetadata(event.getAggregateType(), event.getAggregateId());
        
    } catch (IOException e) {
        throw new EventStoreException(
            "Failed to save event: " + e.getMessage(),
            e,
            EventStoreException.OperationType.SAVE,
            event.getAggregateType(),
            event.getAggregateId()
        );
    }
}
#+END_SRC

**Runtime Behavior**: Each domain event is persisted as a JSON file with atomic write operations, maintaining event ordering and version consistency for reliable event sourcing.

** Step 4.2: Event Serialization Process

#+BEGIN_SRC java
// From: EventSerializationSupport.java (Infrastructure Layer)
public static String toJson(VersionedDomainEvent event) throws IOException {
    ObjectNode rootNode = OBJECT_MAPPER.createObjectNode();
    
    // Add event type information
    rootNode.put(EVENT_TYPE_PROPERTY, event.getEventType());
    
    // Add event metadata
    ObjectNode metadataNode = createMetadataNode(event);  // → Step 4.3
    rootNode.set(EVENT_METADATA_PROPERTY, metadataNode);
    
    // Convert domain event to DTO and add as event data
    Object dto = convertToDto(event);  // → Step 4.4
    JsonNode eventDataNode = OBJECT_MAPPER.valueToTree(dto);
    rootNode.set(EVENT_DATA_PROPERTY, eventDataNode);
    
    return OBJECT_MAPPER.writeValueAsString(rootNode);
}
#+END_SRC

**Runtime Behavior**: Event serialization preserves complete event information including metadata, type information, and event-specific data through DTO conversion.

** Step 4.3: Metadata Preservation

#+BEGIN_SRC java
// From: EventSerializationSupport.java (Infrastructure Layer)
private static ObjectNode createMetadataNode(VersionedDomainEvent event) {
    ObjectNode metadataNode = OBJECT_MAPPER.createObjectNode();
    
    metadataNode.put("eventId", event.getEventId());
    metadataNode.put("aggregateType", event.getAggregateType());
    metadataNode.put("aggregateId", event.getAggregateId());
    metadataNode.put("aggregateVersion", event.getAggregateVersion());
    metadataNode.put("timestamp", event.getTimestamp().toString());
    metadataNode.put("schemaVersion", event.getSchemaVersion());
    
    if (event.getPreviousEventId() != null) {
        metadataNode.put("previousEventId", event.getPreviousEventId());
    }
    
    if (event.getUserId() != null) {
        metadataNode.put("userId", event.getUserId());
    }
    
    if (event.getCorrelationId() != null) {
        metadataNode.put("correlationId", event.getCorrelationId());
    }
    
    return metadataNode;
}
#+END_SRC

**Runtime Behavior**: Complete event metadata is preserved, enabling event correlation, causality tracking, and audit trail reconstruction.

** Step 4.4: DTO Conversion for Serialization

#+BEGIN_SRC java
// From: EventSerializationSupport.java (Infrastructure Layer)
private static Object convertToDto(VersionedDomainEvent event) {
    if (event instanceof ClassFileChanged) {
        return JsonClassFileChanged.fromDomain((ClassFileChanged) event);  // → Step 4.5
    }
    
    // For other event types, fall back to direct serialization
    // TODO: Add more DTO mappings as needed
    return event;
}
#+END_SRC

** Step 4.5: Specific Event DTO Conversion

#+BEGIN_SRC java
// From: JsonClassFileChanged.java (Infrastructure Layer)
public static JsonClassFileChanged fromDomain(ClassFileChanged domainEvent) {
    return new JsonClassFileChanged(
        domainEvent.getEventId(),
        domainEvent.getAggregateType(),
        domainEvent.getAggregateId(),
        domainEvent.getAggregateVersion(),
        domainEvent.getTimestamp(),
        domainEvent.getPreviousEventId(),
        domainEvent.getSchemaVersion(),
        domainEvent.getUserId(),
        domainEvent.getCorrelationId(),
        domainEvent.getClassFile().toString(),  // Path → String conversion
        domainEvent.getClassName(),
        domainEvent.getFileSize(),
        domainEvent.getDetectionTimestamp()
    );
}
#+END_SRC

**Runtime Behavior**: Domain events are converted to JSON-compatible DTOs that handle type conversions (like Path to String) while preserving all domain information.

* Phase 5: Event Emission and Notification

Successful events are emitted through various channels to notify external systems and provide real-time feedback.

** Step 5.1: Event Emission Orchestration

#+BEGIN_SRC java
// From: EventEmitterAdapter.java (Infrastructure Layer)
@Override
public void emit(final DomainResponseEvent<?> event) {
    switch (emissionTarget) {
        case CONSOLE -> emitToConsole(event);  // → Step 5.2a
        case FILE -> emitToFile(event);        // → Step 5.2b
        case BOTH -> {
            emitToConsole(event);
            emitToFile(event);
        }
    }
}
#+END_SRC

**Runtime Behavior**: The event emitter provides multiple output strategies, enabling flexible notification and monitoring approaches based on deployment needs.

** Step 5.2a: Console Event Emission

#+BEGIN_SRC java
// From: EventEmitterAdapter.java (Infrastructure Layer)
private void emitToConsole(final DomainResponseEvent<?> event) {
    final String formattedEvent = formatEvent(event);  // → Step 5.3
    
    if (isSuccessEvent(event)) {
        System.out.println(GREEN + "✓ " + formattedEvent + RESET);
    } else if (isWarningEvent(event)) {
        System.out.println(YELLOW + "⚠ " + formattedEvent + RESET);
    } else if (isErrorEvent(event)) {
        System.err.println(RED + "✗ " + formattedEvent + RESET);
    } else {
        System.out.println(BLUE + "ℹ " + formattedEvent + RESET);
    }
}
#+END_SRC

** Step 5.2b: File Event Emission

#+BEGIN_SRC java
// From: EventEmitterAdapter.java (Infrastructure Layer)
private void emitToFile(final DomainResponseEvent<?> event) {
    try {
        final String timestamp = Instant.now().toString();
        final String formattedEvent = formatEvent(event);
        final String logEntry = String.format("[%s] %s%n", timestamp, formattedEvent);
        
        Files.write(logFile, logEntry.getBytes(), 
                   StandardOpenOption.CREATE, StandardOpenOption.APPEND);
                   
    } catch (final IOException e) {
        System.err.println("Failed to write event to file: " + e.getMessage());
    }
}
#+END_SRC

** Step 5.3: Event Formatting for Output

#+BEGIN_SRC java
// From: EventEmitterAdapter.java (Infrastructure Layer)
protected String formatEvent(final DomainResponseEvent<?> event) {
    final StringBuilder sb = new StringBuilder();
    sb.append("[").append(LocalDateTime.now().format(TIMESTAMP_FORMAT)).append("] ");
    sb.append("[").append(event.getClass().getSimpleName()).append("] ");
    sb.append("Event: ").append(event.toString());
    
    // Add correlation information if available
    if (event instanceof ClassFileProcessed processed) {
        sb.append(" | File: ").append(processed.getOriginalEvent().getClassFile());
        sb.append(" | Class: ").append(processed.getOriginalEvent().getClassName());
        
        if (processed.isSuccess()) {
            sb.append(" | Status: SUCCESS");
        } else {
            sb.append(" | Status: FAILED - ").append(processed.getErrorMessage());
        }
    }
    
    return sb.toString();
}
#+END_SRC

**Runtime Behavior**: Events are formatted with rich contextual information including timestamps, event types, and success/failure status for clear monitoring and debugging.

* Phase 6: Flow Completion and System State

The flow concludes with the system in a new stable state, having successfully performed a hot-swap operation or gracefully handled failures.

** Step 6.1: Success Flow Completion

#+BEGIN_SRC java
// From: ByteHot.java (Domain Layer) - Success Path
// When all steps succeed, the aggregate returns a success response
return ClassFileProcessed.success(event, validationResult, hotSwapRequest, success);
#+END_SRC

** Final System State Analysis

At flow completion, the system has:

1. **Detected** a file system change through infrastructure monitoring
2. **Validated** bytecode compatibility using domain business rules  
3. **Requested** hot-swap through domain orchestration
4. **Executed** JVM class redefinition via infrastructure adapters
5. **Persisted** all events for audit trail and system intelligence
6. **Emitted** notifications for external monitoring and feedback

** Cross-Cutting Concerns Demonstrated

*** Error Handling Flow
Every step includes proper error handling that converts technical failures into domain events:

#+BEGIN_SRC java
// Pattern repeated throughout the flow
try {
    // Operation
} catch (SpecificException e) {
    // Convert to domain event
    return DomainEvent.failure(context, e.getMessage());
}
#+END_SRC

*** Event Correlation
Events maintain causality chains throughout the flow:

#+BEGIN_SRC java
// Events reference their causing events
HotSwapRequested request = new HotSwapRequested(
    // ... other parameters
    triggeringEvent  // Reference to ClassFileChanged
);
#+END_SRC

*** Infrastructure Abstraction
Domain logic remains pure despite complex infrastructure interactions:

#+BEGIN_SRC java
// Domain uses ports, never concrete adapters
EventStorePort eventStore = Ports.resolve(EventStorePort.class);
EventEmitterPort emitter = Ports.resolve(EventEmitterPort.class);
#+END_SRC

* Runtime Collaboration Patterns

** Hexagonal Architecture in Motion

The flow demonstrates all three layers of hexagonal architecture working together:

1. **Infrastructure Layer**: Handles technical concerns (file I/O, JSON, JVM APIs)
2. **Application Layer**: Routes events and coordinates infrastructure
3. **Domain Layer**: Contains pure business logic and decision-making

** Event-Driven Decoupling

Each phase communicates through events, enabling:
- **Loose coupling** between components
- **Asynchronous processing** capabilities
- **Audit trail** generation
- **System intelligence** through event analysis

** Port-Adapter Flexibility

The flow shows how ports enable infrastructure swapping:
- **EventStorePort**: Could be filesystem, database, or cloud storage
- **EventEmitterPort**: Could be console, file, message queue, or webhook
- **InstrumentationPort**: Could be mock, real JVM, or remote service

* Performance and Monitoring Insights

** Flow Timing Analysis

The complete flow includes comprehensive timing information:

#+BEGIN_SRC java
// From various points in the flow
Instant detectionTime = fileChangeEvent.getDetectionTimestamp();
Instant validationTime = validationEvent.getTimestamp();
Duration executionTime = redefinitionEvent.getExecutionTime();
#+END_SRC

** Resource Impact Tracking

Each step tracks its resource impact:

#+BEGIN_SRC java
// File size tracking
long fileSize = event.getFileSize();

// Instance impact analysis  
int affectedInstances = success.getAffectedInstances();

// Memory and I/O implications tracked throughout
#+END_SRC

** Error Distribution Analysis

The flow enables comprehensive error analysis:
- **Validation failures**: Bytecode compatibility issues
- **JVM rejections**: Runtime redefinition constraints  
- **Infrastructure errors**: File I/O, serialization, network issues
- **Application errors**: Unexpected exceptions and system failures

* Conclusion: Architecture in Action

This literate flow documentation reveals how ByteHot's sophisticated architecture enables:

1. **Clean separation of concerns** while maintaining functional cohesion
2. **Event-driven collaboration** that scales and evolves gracefully
3. **Infrastructure independence** through proper abstraction
4. **Comprehensive observability** through detailed event tracking
5. **Robust error handling** at every architectural boundary

The hot-swap flow demonstrates that complex, performance-critical operations can be implemented with clean architecture principles, proving that good design scales from simple CRUD operations to sophisticated runtime JVM manipulation.

** Related Flow Documentation

- [[file-change-detection-flow.org][File Change Detection Flow]]: Detailed analysis of file system monitoring
- [[validation-flow.org][Bytecode Validation Flow]]: Deep dive into compatibility analysis
- [[error-recovery-flow.org][Error Recovery Flow]]: How failures are handled and recovered
- [[flow-intelligence-learning-flow.org][Flow Intelligence Learning]]: How the system learns from patterns

** Next Steps for Flow Analysis

1. **Performance Optimization**: Identify bottlenecks in the collaboration
2. **Error Pattern Analysis**: Study failure modes across architectural boundaries  
3. **Concurrency Patterns**: Analyze multi-threaded flow execution
4. **Integration Patterns**: Understand external system collaboration