#+TITLE: ByteHotApplication - Application Layer Orchestrator
#+AUTHOR: ByteHot Development Team  
#+DATE: [2025-06-19]

* Overview

The ~ByteHotApplication~ class serves as the central orchestrator in the Application Layer of ByteHot's hexagonal architecture. It bridges the gap between the pure domain logic and the infrastructure adapters, managing the critical responsibilities of adapter discovery, dependency injection, and event routing.

* Architectural Role

** Application Layer Position
Within the Domain-Driven Design and Hexagonal Architecture framework, ~ByteHotApplication~ occupies the application layer, which has these essential responsibilities:

- *Port-Adapter Wiring*: Discovers and injects infrastructure adapters into domain ports
- *Event Routing*: Routes incoming events to appropriate domain aggregates
- *Lifecycle Management*: Manages the initialization and configuration of the entire system
- *Adapter Discovery*: Automatically discovers available infrastructure implementations

** Hexagonal Architecture Integration
The application layer acts as the composition root, implementing the dependency inversion principle by:

#+BEGIN_SRC
Infrastructure Layer ← Application Layer → Domain Layer
    (Adapters)            (Wiring)         (Ports)
#+END_SRC

* Class Structure and Design Patterns

** Singleton Pattern Implementation
ByteHotApplication implements the Singleton pattern using the Initialization-on-demand holder idiom:

#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/application/ByteHotApplication.java
/**
 * Returns the singleton instance of ByteHotApplication.
 * @return the singleton instance.
 */
public static ByteHotApplication getInstance() {
    return Holder.INSTANCE;
}

/**
 * Holder class for the singleton instance of ByteHotApplication.
 */
protected static class Holder {
    private static final ByteHotApplication INSTANCE = new ByteHotApplication();
}
#+END_SRC

*Design Rationale*: The holder idiom provides thread-safe lazy initialization without synchronization overhead, ensuring exactly one application instance manages the system's lifecycle.

** Initialization State Management
Thread-safe initialization prevents race conditions during adapter discovery:

#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/application/ByteHotApplication.java
/**
 * Whether adapters have been initialized
 */
private static volatile boolean adaptersInitialized = false;

/**
 * Initializes the application with the given instrumentation
 */
public static void initialize(final Instrumentation instrumentation) {
    if (!adaptersInitialized) {
        synchronized (ByteHotApplication.class) {
            if (!adaptersInitialized) {
                discoverAndInjectAdapters(instrumentation);
                adaptersInitialized = true;
            }
        }
    }
}
#+END_SRC

*Double-Checked Locking*: Ensures thread safety while minimizing synchronization overhead for subsequent calls.

* Event Processing Architecture

** Primary Event Handler Implementation
Implements the ~HandlesByteHotAttached~ interface to process attachment requests:

#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/application/ByteHotApplication.java
/**
 * Accepts a ByteHotAttachRequested event.
 * @param event such event.
 * @return A list of events in response.
 */
@Override
public List<DomainResponseEvent<ByteHotAttachRequested>> accept(final ByteHotAttachRequested event) {
    // Ensure adapters are initialized
    if (!adaptersInitialized) {
        throw new IllegalStateException("Application not initialized. Call initialize() with Instrumentation first.");
    }
    
    final List<DomainResponseEvent<ByteHotAttachRequested>> responseEvents = Arrays.asList(ByteHot.accept(event));
    
    // Emit the response events
    try {
        final EventEmitterPort eventEmitter = Ports.resolve(EventEmitterPort.class);
        final List<DomainResponseEvent<?>> genericEvents = new ArrayList<>();
        for (final DomainResponseEvent<ByteHotAttachRequested> responseEvent : responseEvents) {
            genericEvents.add(responseEvent);
        }
        eventEmitter.emit(genericEvents);
    } catch (final Exception e) {
        System.err.println("Failed to emit response events: " + e.getMessage());
    }
    
    return responseEvents;
}
#+END_SRC

** Event Processing Flow
1. *Precondition Validation*: Ensures application is properly initialized
2. *Domain Delegation*: Routes event to appropriate domain aggregate (~ByteHot~)
3. *Response Collection*: Collects resulting domain events
4. *Event Emission*: Publishes events through infrastructure adapters
5. *Error Resilience*: Continues operation even if event emission fails

* Adapter Discovery and Injection System

** Built-in Adapter Registration
The application layer knows about and registers core infrastructure adapters:

#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/application/ByteHotApplication.java
/**
 * Injects the built-in infrastructure adapters
 */
@SuppressWarnings("unchecked")
protected static void injectBuiltInAdapters(final Ports ports, final Instrumentation instrumentation) {
    try {
        // Inject ConfigurationAdapter
        final ConfigurationAdapter configAdapter = new ConfigurationAdapter();
        ports.inject(ConfigurationPort.class, (Adapter<ConfigurationPort>) configAdapter);

        // Inject FileWatcherAdapter
        final FileWatcherAdapter fileWatcherAdapter = new FileWatcherAdapter();
        ports.inject(FileWatcherPort.class, (Adapter<FileWatcherPort>) fileWatcherAdapter);

        // Inject InstrumentationAdapter (only if instrumentation is available)
        if (instrumentation != null) {
            final InstrumentationAdapter instrumentationAdapter = new InstrumentationAdapter(instrumentation);
            ports.inject(InstrumentationPort.class, (Adapter<InstrumentationPort>) instrumentationAdapter);
        }

        // Inject EventEmitterAdapter
        final EventEmitterAdapter eventEmitterAdapter = new EventEmitterAdapter();
        ports.inject(EventEmitterPort.class, (Adapter<EventEmitterPort>) eventEmitterAdapter);

        System.out.println("Built-in adapters injected successfully");

    } catch (final Exception e) {
        System.err.println("Failed to inject built-in adapters: " + e.getMessage());
        e.printStackTrace();
    }
}
#+END_SRC

** Core Adapters Registered
- *ConfigurationAdapter*: Handles system configuration access
- *FileWatcherAdapter*: Monitors file system changes
- *InstrumentationAdapter*: Provides JVM instrumentation capabilities (if available)
- *EventEmitterAdapter*: Manages event publication and routing

* Dynamic Adapter Discovery

** Classpath Scanning Strategy
The application automatically discovers additional adapters from the classpath:

#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/application/ByteHotApplication.java
/**
 * Discovers additional adapters from the classpath
 */
protected static void discoverAdaptersFromClasspath(final Ports ports) {
    try {
        final List<Class<?>> adapterClasses = findAdapterClasses();
        
        for (final Class<?> adapterClass : adapterClasses) {
            if (isValidAdapter(adapterClass)) {
                instantiateAndInjectAdapter(ports, adapterClass);
            }
        }
        
        if (!adapterClasses.isEmpty()) {
            System.out.println("Discovered " + adapterClasses.size() + " additional adapter(s) from classpath");
        }

    } catch (final Exception e) {
        System.err.println("Failed to discover adapters from classpath: " + e.getMessage());
    }
}
#+END_SRC

** Discovery Algorithm
1. *Package Scanning*: Searches predefined infrastructure packages
2. *File System Support*: Handles both file system and JAR-based classes
3. *Validation*: Ensures discovered classes are valid adapters
4. *Automatic Registration*: Instantiates and injects valid adapters

** Adapter Validation Logic
Comprehensive validation ensures only proper adapters are registered:

#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/application/ByteHotApplication.java
/**
 * Checks if a class is a valid adapter
 */
protected static boolean isValidAdapter(final Class<?> clazz) {
    return clazz != null 
        && !clazz.isInterface() 
        && !java.lang.reflect.Modifier.isAbstract(clazz.getModifiers())
        && Adapter.class.isAssignableFrom(clazz)
        && Port.class.isAssignableFrom(getPortInterface(clazz));
}
#+END_SRC

*Validation Criteria*:
- Must be a concrete class (not interface or abstract)
- Must implement the ~Adapter~ interface
- Must adapt a valid ~Port~ interface
- Must be instantiable with default constructor

* File System and JAR Scanning Implementation

** File System Scanning
Recursive directory traversal for development environments:

#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/application/ByteHotApplication.java
/**
 * Scans file system directory for adapter classes
 */
protected static List<Class<?>> scanFileSystemForAdapters(final File directory, final String packageName, final ClassLoader classLoader) {
    final List<Class<?>> adapterClasses = new ArrayList<>();
    
    if (!directory.exists() || !directory.isDirectory()) {
        return adapterClasses;
    }
    
    final File[] files = directory.listFiles();
    if (files != null) {
        for (final File file : files) {
            if (file.isDirectory()) {
                adapterClasses.addAll(scanFileSystemForAdapters(file, packageName + "." + file.getName(), classLoader));
            } else if (file.getName().endsWith(".class")) {
                final String className = packageName + "." + file.getName().substring(0, file.getName().length() - 6);
                final Class<?> clazz = loadClass(className, classLoader);
                if (clazz != null && isValidAdapter(clazz)) {
                    adapterClasses.add(clazz);
                }
            }
        }
    }
    
    return adapterClasses;
}
#+END_SRC

** JAR File Scanning  
Supports deployment scenarios with JAR packaging:

#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/application/ByteHotApplication.java
/**
 * Scans JAR file for adapter classes
 */
protected static List<Class<?>> scanJarForAdapters(final URL jarUrl, final String packagePath, final ClassLoader classLoader) {
    final List<Class<?>> adapterClasses = new ArrayList<>();
    
    try {
        final String jarPath = jarUrl.getPath().substring(5, jarUrl.getPath().indexOf("!"));
        final JarFile jarFile = new JarFile(jarPath);
        final Enumeration<JarEntry> entries = jarFile.entries();
        
        while (entries.hasMoreElements()) {
            final JarEntry entry = entries.nextElement();
            final String entryName = entry.getName();
            
            if (entryName.startsWith(packagePath) && entryName.endsWith(".class")) {
                final String className = entryName.replace('/', '.').substring(0, entryName.length() - 6);
                final Class<?> clazz = loadClass(className, classLoader);
                if (clazz != null && isValidAdapter(clazz)) {
                    adapterClasses.add(clazz);
                }
            }
        }
        
        jarFile.close();
        
    } catch (final Exception e) {
        System.err.println("Error scanning JAR " + jarUrl + ": " + e.getMessage());
    }
    
    return adapterClasses;
}
#+END_SRC

* Error Handling and Resilience

** Graceful Degradation Strategy
The application layer implements comprehensive error handling that allows the system to continue functioning even when some components fail:

- *Adapter Discovery Failures*: System continues with built-in adapters
- *Event Emission Failures*: Core functionality continues, events logged
- *Port Resolution Failures*: Clear error messages with system state preservation

** Initialization Safety
Multiple safety mechanisms ensure robust initialization:

#+BEGIN_SRC java
// State validation
if (!adaptersInitialized) {
    throw new IllegalStateException("Application not initialized. Call initialize() with Instrumentation first.");
}

// Exception isolation  
try {
    // Critical operations
} catch (final Exception e) {
    System.err.println("Failed to emit response events: " + e.getMessage());
    // Continue with degraded functionality
}
#+END_SRC

* Integration Points

** Domain Layer Integration
- Routes events to domain aggregates (~ByteHot.accept()~)
- Resolves domain ports through ~Ports.resolve()~
- Maintains domain purity by handling all infrastructure concerns

** Infrastructure Layer Integration
- Discovers and instantiates infrastructure adapters
- Manages adapter lifecycle and registration
- Provides fallback mechanisms for missing adapters

** External System Integration
- JVM Instrumentation API integration
- File system monitoring capabilities
- Event emission to external subscribers

* Testing Considerations

** Unit Testing Strategy
#+BEGIN_SRC java
@Test
void should_initialize_built_in_adapters() {
    // Given: Fresh application state
    final Instrumentation mockInstrumentation = mock(Instrumentation.class);
    
    // When: Initialization is called
    ByteHotApplication.initialize(mockInstrumentation);
    
    // Then: All built-in adapters should be registered
    assertThat(Ports.resolve(ConfigurationPort.class)).isNotNull();
    assertThat(Ports.resolve(FileWatcherPort.class)).isNotNull();
    assertThat(Ports.resolve(EventEmitterPort.class)).isNotNull();
}
#+END_SRC

** Integration Testing Approach
- Test with real JVM instrumentation
- Verify adapter discovery in various deployment scenarios
- Validate event routing end-to-end

* Configuration and Extensibility

** Adapter Package Configuration
The system scans these predefined packages for additional adapters:

#+BEGIN_SRC java
final String[] infraPackages = {
    "org.acmsl.bytehot.infrastructure",
    "org.acmsl.bytehot.adapters"
};
#+END_SRC

** Extension Points
- Custom adapters can be added by implementing the ~Adapter~ interface
- New infrastructure concerns can be addressed through additional ports
- Event handling can be extended through custom event emitter implementations

* Performance Considerations

** Initialization Optimization
- Double-checked locking minimizes synchronization overhead
- Lazy initialization reduces startup time
- Classpath scanning is performed only once during initialization

** Runtime Efficiency
- Port resolution is cached through the Ports infrastructure
- Event routing has minimal overhead
- Adapter discovery results are cached for the application lifetime

* Future Evolution

** Anticipated Enhancements
- Configuration-driven adapter discovery
- Plugin architecture for third-party adapters
- Hot-pluggable adapter replacement
- Metrics and monitoring integration

** Architectural Flexibility
The loose coupling between application and infrastructure layers enables:
- Easy replacement of infrastructure implementations
- Addition of new adapter types without application changes
- Testing with mock infrastructure implementations

* Related Documentation

- [[./Ports.org][Ports]]: Domain port resolution infrastructure
- [[./ByteHot.org][ByteHot]]: Core domain aggregate
- [[./infrastructure/ConfigurationAdapter.org][ConfigurationAdapter]]: Configuration infrastructure
- [[./infrastructure/FileWatcherAdapter.org][FileWatcherAdapter]]: File monitoring infrastructure
- [[../flows/adapter-discovery-flow.org][Adapter Discovery Flow]]: Complete discovery process documentation

* Invariants and Constraints

** Initialization Invariants
- Application must be initialized before processing events
- Instrumentation must be provided during initialization
- Built-in adapters must be successfully registered

** Runtime Constraints
- Adapter discovery failures should not prevent system startup
- Event emission failures should not interrupt core functionality
- Port resolution must always succeed for built-in adapters

The ByteHotApplication serves as the crucial orchestration point that transforms ByteHot from a collection of components into a cohesive, event-driven system capable of runtime bytecode manipulation.