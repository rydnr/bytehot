#+TITLE: FilesystemEventStoreAdapter - "Poor-Man's" Event Store Infrastructure
#+AUTHOR: ByteHot Development Team
#+DATE: [2025-06-20]

* Overview

The ~FilesystemEventStoreAdapter~ class provides ByteHot's "poor-man's" Event Store implementation using filesystem storage as the persistence layer. This infrastructure adapter implements the ~EventStorePort~ interface, providing complete event sourcing capabilities without requiring external database systems. As the cornerstone of ByteHot's event sourcing architecture, it organizes events by aggregate type and ID in a hierarchical folder structure, ensuring thread-safe concurrent access while maintaining event ordering and integrity.

* Event Sourcing Architecture Role

** Primary Event Persistence Engine
FilesystemEventStoreAdapter serves as the primary event persistence engine:
- Implements complete event sourcing capabilities using filesystem storage
- Provides ACID-like properties through atomic file operations
- Maintains event ordering and versioning for reliable event replay
- Supports concurrent access with thread-safe operation coordination

** Aggregate Organization System
The adapter organizes events using sophisticated aggregate management:
- Hierarchical directory structure by aggregate type and instance
- Atomic file operations for consistency during concurrent writes
- Version tracking and conflict resolution for aggregate consistency
- Metadata management for performance optimization and integrity

** Event Query and Retrieval Engine
The implementation provides comprehensive event querying capabilities:
- Time-based event retrieval with precise timestamp filtering
- Event type filtering across all aggregates
- Aggregate-specific event streams with version control
- Performance-optimized caching for frequently accessed data

* Class Structure and Storage Architecture

** Core Infrastructure Components
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
/**
 * Base path for the event store
 */
private final Path eventStoreBasePath;

/**
 * JSON object mapper for serialization
 */
private final ObjectMapper objectMapper;

/**
 * Cache of aggregate versions for performance
 */
private final Map<String, AtomicLong> aggregateVersions;

/**
 * Thread-safe set of known aggregate types
 */
private final Set<String> knownAggregateTypes;

/**
 * Thread-safe map of aggregate IDs by type
 */
private final Map<String, Set<String>> aggregateIdsByType;
#+END_SRC

** Constructor and Initialization
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
/**
 * Default constructor using default path
 */
public FilesystemEventStoreAdapter() {
    this("./eventstore");
}

/**
 * Constructor with custom base path
 * @param basePath the base path for event storage
 */
public FilesystemEventStoreAdapter(String basePath) {
    this.eventStoreBasePath = Paths.get(basePath);
    this.objectMapper = createObjectMapper();
    this.aggregateVersions = new ConcurrentHashMap<>();
    this.knownAggregateTypes = ConcurrentHashMap.newKeySet();
    this.aggregateIdsByType = new ConcurrentHashMap<>();
    
    initializeEventStore();
}
#+END_SRC

** Directory Structure Design
The adapter implements a sophisticated directory organization:
#+BEGIN_SRC
eventstore/
├── metadata/                    # System metadata files
├── ByteHot/                    # Aggregate type directory
│   ├── aggregate-id-1/         # Aggregate instance directory
│   │   ├── 20250620103000123001-ClassFileChanged.json
│   │   ├── 20250620103001456002-HotSwapRequested.json
│   │   └── 20250620103002789003-ClassRedefinitionSucceeded.json
│   └── aggregate-id-2/
│       └── 20250620104000123001-ByteHotAttachRequested.json
└── User/                       # Another aggregate type
    └── user-session-1/
        ├── 20250620105000123001-UserSessionStarted.json
        └── 20250620105001456002-UserSessionEnded.json
#+END_SRC

* Event Store Initialization

** Store Initialization Process
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
/**
 * Initializes the event store directory structure
 */
private void initializeEventStore() {
    try {
        Files.createDirectories(eventStoreBasePath);
        Files.createDirectories(eventStoreBasePath.resolve("metadata"));
        
        // Load existing aggregate types and IDs
        loadExistingAggregates();
        
    } catch (IOException e) {
        throw new RuntimeException("Failed to initialize event store", e);
    }
}
#+END_SRC

** Existing Data Recovery
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
/**
 * Loads existing aggregates from the filesystem
 */
private void loadExistingAggregates() {
    try {
        if (!Files.exists(eventStoreBasePath)) {
            return;
        }
        
        Files.list(eventStoreBasePath)
            .filter(Files::isDirectory)
            .filter(path -> !path.getFileName().toString().equals("metadata"))
            .forEach(this::loadAggregateType);
            
    } catch (IOException e) {
        // Log warning but don't fail initialization
        System.err.println("Warning: Failed to load existing aggregates: " + e.getMessage());
    }
}
#+END_SRC

** Aggregate Type Loading
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
/**
 * Loads a specific aggregate type and its instances
 */
private void loadAggregateType(Path aggregateTypePath) {
    String aggregateType = aggregateTypePath.getFileName().toString();
    knownAggregateTypes.add(aggregateType);
    
    Set<String> aggregateIds = ConcurrentHashMap.newKeySet();
    aggregateIdsByType.put(aggregateType, aggregateIds);
    
    try {
        Files.list(aggregateTypePath)
            .filter(Files::isDirectory)
            .forEach(aggregateIdPath -> {
                String aggregateId = aggregateIdPath.getFileName().toString();
                aggregateIds.add(aggregateId);
                
                // Load the current version for this aggregate
                long version = loadCurrentVersionFromFilesystem(aggregateType, aggregateId);
                aggregateVersions.put(aggregateKey(aggregateType, aggregateId), 
                                    new AtomicLong(version));
            });
            
    } catch (IOException e) {
        System.err.println("Warning: Failed to load aggregate IDs for " + aggregateType + ": " + e.getMessage());
    }
}
#+END_SRC

* Event Persistence Implementation

** Primary Event Saving Method
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
@Override
public void save(VersionedDomainEvent event) throws EventStoreException {
    try {
        // Ensure aggregate directory exists
        Path aggregateDir = getAggregateDirectoryPath(event.getAggregateType(), event.getAggregateId());
        Files.createDirectories(aggregateDir);
        
        // Update version if needed
        String aggregateKey = aggregateKey(event.getAggregateType(), event.getAggregateId());
        AtomicLong currentVersion = aggregateVersions.computeIfAbsent(
            aggregateKey, 
            k -> new AtomicLong(0L)
        );
        
        // Increment version
        long newVersion = currentVersion.incrementAndGet();
        
        // Create filename with timestamp and sequence
        String filename = createEventFilename(event, newVersion);
        Path eventFile = aggregateDir.resolve(filename);
        
        // Serialize event to JSON
        String eventJson = serializeEvent(event);
        
        // Write to file atomically
        Files.write(eventFile, eventJson.getBytes(), 
                   StandardOpenOption.CREATE, StandardOpenOption.WRITE);
        
        // Update metadata
        updateMetadata(event.getAggregateType(), event.getAggregateId());
        
    } catch (IOException e) {
        throw new EventStoreException(
            "Failed to save event: " + e.getMessage(),
            e,
            EventStoreException.OperationType.SAVE,
            event.getAggregateType(),
            event.getAggregateId()
        );
    }
}
#+END_SRC

** Event Filename Generation
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
/**
 * Creates a filename for an event
 */
private String createEventFilename(VersionedDomainEvent event, long sequenceNumber) {
    // Format: YYYYMMDDHHmmssSSS-EventClassName.json
    String timestamp = DateTimeFormatter.ofPattern("yyyyMMddHHmmssSSS")
        .withZone(java.time.ZoneOffset.UTC)
        .format(event.getTimestamp());
        
    return String.format("%s%03d-%s.json", 
                       timestamp, 
                       sequenceNumber % 1000,  // 3-digit sequence
                       event.getEventType());
}
#+END_SRC

** Event Persistence Features
The persistence implementation provides sophisticated capabilities:
#+BEGIN_SRC java
// Persistence characteristics:
// - Atomic file operations for consistency
// - Unique filename generation to prevent conflicts
// - Directory structure organization by aggregate
// - Version tracking for conflict detection
// - Metadata updates for performance optimization
#+END_SRC

* Event Retrieval Implementation

** Aggregate Event Stream Retrieval
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
@Override
public List<VersionedDomainEvent> getEventsForAggregate(
    String aggregateType, 
    String aggregateId
) throws EventStoreException {
    try {
        Path aggregateDir = getAggregateDirectoryPath(aggregateType, aggregateId);
        
        if (!Files.exists(aggregateDir)) {
            return new ArrayList<>();
        }
        
        return Files.list(aggregateDir)
            .filter(Files::isRegularFile)
            .filter(path -> path.toString().endsWith(".json"))
            .sorted() // Files are naturally sorted by timestamp due to naming
            .map(this::deserializeEvent)
            .filter(Objects::nonNull)
            .collect(Collectors.toList());
            
    } catch (IOException e) {
        throw new EventStoreException(
            "Failed to retrieve events: " + e.getMessage(),
            e,
            EventStoreException.OperationType.RETRIEVE,
            aggregateType,
            aggregateId
        );
    }
}
#+END_SRC

** Version-Based Event Filtering
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
@Override
public List<VersionedDomainEvent> getEventsForAggregateSince(
    String aggregateType,
    String aggregateId,
    long sinceVersion
) throws EventStoreException {
    List<VersionedDomainEvent> allEvents = getEventsForAggregate(aggregateType, aggregateId);
    
    return allEvents.stream()
        .filter(event -> event.getAggregateVersion() > sinceVersion)
        .collect(Collectors.toList());
}
#+END_SRC

** Event Type-Based Retrieval
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
@Override
public List<VersionedDomainEvent> getEventsByType(String eventType) throws EventStoreException {
    List<VersionedDomainEvent> result = new ArrayList<>();
    
    try {
        for (String aggregateType : knownAggregateTypes) {
            Set<String> aggregateIds = aggregateIdsByType.get(aggregateType);
            if (aggregateIds != null) {
                for (String aggregateId : aggregateIds) {
                    List<VersionedDomainEvent> events = getEventsForAggregate(aggregateType, aggregateId);
                    result.addAll(events.stream()
                        .filter(event -> eventType.equals(event.getEventType()))
                        .collect(Collectors.toList()));
                }
            }
        }
        
        // Sort by timestamp
        result.sort(Comparator.comparing(VersionedDomainEvent::getTimestamp));
        return result;
        
    } catch (Exception e) {
        throw new EventStoreException(
            "Failed to retrieve events by type: " + e.getMessage(),
            e,
            EventStoreException.OperationType.RETRIEVE
        );
    }
}
#+END_SRC

** Time-Range Event Retrieval
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
@Override
public List<VersionedDomainEvent> getEventsBetween(
    Instant startTime,
    Instant endTime
) throws EventStoreException {
    List<VersionedDomainEvent> result = new ArrayList<>();
    
    try {
        for (String aggregateType : knownAggregateTypes) {
            Set<String> aggregateIds = aggregateIdsByType.get(aggregateType);
            if (aggregateIds != null) {
                for (String aggregateId : aggregateIds) {
                    List<VersionedDomainEvent> events = getEventsForAggregate(aggregateType, aggregateId);
                    result.addAll(events.stream()
                        .filter(event -> {
                            Instant timestamp = event.getTimestamp();
                            return !timestamp.isBefore(startTime) && !timestamp.isAfter(endTime);
                        })
                        .collect(Collectors.toList()));
                }
            }
        }
        
        // Sort by timestamp
        result.sort(Comparator.comparing(VersionedDomainEvent::getTimestamp));
        return result;
        
    } catch (Exception e) {
        throw new EventStoreException(
            "Failed to retrieve events by time range: " + e.getMessage(),
            e,
            EventStoreException.OperationType.RETRIEVE
        );
    }
}
#+END_SRC

* Version Management and Concurrency

** Aggregate Version Tracking
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
@Override
public long getCurrentVersion(String aggregateType, String aggregateId) throws EventStoreException {
    String key = aggregateKey(aggregateType, aggregateId);
    AtomicLong version = aggregateVersions.get(key);
    return version != null ? version.get() : 0L;
}
#+END_SRC

** Thread-Safe Version Management
The implementation ensures thread-safe version management:
#+BEGIN_SRC java
// Concurrency control features:
// - AtomicLong for thread-safe version increments
// - ConcurrentHashMap for thread-safe metadata access
// - Atomic file operations for consistency
// - Version conflict detection and resolution
#+END_SRC

** Filesystem Version Recovery
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
/**
 * Loads the current version of an aggregate from filesystem
 */
private long loadCurrentVersionFromFilesystem(String aggregateType, String aggregateId) {
    Path aggregatePath = getAggregateDirectoryPath(aggregateType, aggregateId);
    
    if (!Files.exists(aggregatePath)) {
        return 0L;
    }
    
    try {
        return Files.list(aggregatePath)
            .filter(Files::isRegularFile)
            .filter(path -> path.toString().endsWith(".json"))
            .mapToLong(this::extractVersionFromFilename)
            .max()
            .orElse(0L);
            
    } catch (IOException e) {
        return 0L;
    }
}
#+END_SRC

* Statistics and Health Monitoring

** Event Count Operations
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
@Override
public long getTotalEventCount() throws EventStoreException {
    try {
        long totalCount = 0;
        
        for (String aggregateType : knownAggregateTypes) {
            Set<String> aggregateIds = aggregateIdsByType.get(aggregateType);
            if (aggregateIds != null) {
                for (String aggregateId : aggregateIds) {
                    totalCount += getEventCountForAggregate(aggregateType, aggregateId);
                }
            }
        }
        
        return totalCount;
        
    } catch (Exception e) {
        throw new EventStoreException(
            "Failed to get total event count: " + e.getMessage(),
            e,
            EventStoreException.OperationType.COUNT
        );
    }
}

@Override
public long getEventCountForAggregate(String aggregateType, String aggregateId) throws EventStoreException {
    try {
        Path aggregateDir = getAggregateDirectoryPath(aggregateType, aggregateId);
        
        if (!Files.exists(aggregateDir)) {
            return 0L;
        }
        
        return Files.list(aggregateDir)
            .filter(Files::isRegularFile)
            .filter(path -> path.toString().endsWith(".json"))
            .count();
            
    } catch (IOException e) {
        throw new EventStoreException(
            "Failed to count events: " + e.getMessage(),
            e,
            EventStoreException.OperationType.COUNT,
            aggregateType,
            aggregateId
        );
    }
}
#+END_SRC

** Health Check Implementation
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
@Override
public boolean isHealthy() {
    try {
        return Files.exists(eventStoreBasePath) && Files.isWritable(eventStoreBasePath);
    } catch (Exception e) {
        return false;
    }
}
#+END_SRC

** Aggregate Existence Validation
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
@Override
public boolean aggregateExists(String aggregateType, String aggregateId) throws EventStoreException {
    Path aggregateDir = getAggregateDirectoryPath(aggregateType, aggregateId);
    return Files.exists(aggregateDir) && getEventCountForAggregate(aggregateType, aggregateId) > 0;
}
#+END_SRC

* Metadata and Discovery Operations

** Aggregate Type Discovery
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
@Override
public List<String> getAggregateTypes() throws EventStoreException {
    return new ArrayList<>(knownAggregateTypes);
}

@Override
public List<String> getAggregateIds(String aggregateType) throws EventStoreException {
    Set<String> aggregateIds = aggregateIdsByType.get(aggregateType);
    return aggregateIds != null ? new ArrayList<>(aggregateIds) : new ArrayList<>();
}
#+END_SRC

** Metadata Update Operations
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
/**
 * Updates metadata for an aggregate
 */
private void updateMetadata(String aggregateType, String aggregateId) {
    knownAggregateTypes.add(aggregateType);
    aggregateIdsByType.computeIfAbsent(aggregateType, k -> ConcurrentHashMap.newKeySet())
                     .add(aggregateId);
}
#+END_SRC

* File System Utilities

** Path Management
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
/**
 * Gets the directory path for an aggregate
 */
private Path getAggregateDirectoryPath(String aggregateType, String aggregateId) {
    // Encode aggregateId to make it filesystem-safe
    String safeAggregateId = aggregateId.replace("/", "_").replace("\\", "_");
    return eventStoreBasePath.resolve(aggregateType).resolve(safeAggregateId);
}

/**
 * Creates a unique key for an aggregate
 */
private String aggregateKey(String aggregateType, String aggregateId) {
    return aggregateType + "/" + aggregateId;
}
#+END_SRC

** Event Serialization Integration
#+BEGIN_SRC java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/infrastructure/eventsourcing/FilesystemEventStoreAdapter.java
/**
 * Serializes an event to JSON
 */
private String serializeEvent(VersionedDomainEvent event) throws IOException {
    return EventSerializationSupport.toJson(event);
}

/**
 * Deserializes an event from JSON file
 */
private VersionedDomainEvent deserializeEvent(Path eventFile) {
    try {
        String json = Files.readString(eventFile);
        return EventSerializationSupport.fromJson(json);
    } catch (IOException e) {
        System.err.println("Warning: Failed to deserialize event from " + eventFile + ": " + e.getMessage());
        return null;
    }
}
#+END_SRC

* Performance Optimization

** Caching Strategy
The implementation optimizes performance through comprehensive caching:
#+BEGIN_SRC java
// Performance optimization features:
// - In-memory caching of aggregate versions
// - Pre-loaded aggregate type and ID mappings
// - Efficient file system traversal patterns
// - Lazy loading of event data when needed
#+END_SRC

** I/O Operation Optimization
Sophisticated I/O optimization strategies:
- Atomic file operations for consistency and performance
- Sequential filename generation for natural ordering
- Efficient directory traversal with stream processing
- Minimal file system metadata operations

** Memory Management
Careful memory management throughout operations:
#+BEGIN_SRC java
// Memory optimization strategies:
// - Stream-based processing for large event collections
// - Minimal object allocation during retrieval
// - Efficient string processing for filenames
// - Early garbage collection of temporary objects
#+END_SRC

* Error Handling and Recovery

** Comprehensive Exception Management
The adapter handles all categories of event store errors:
#+BEGIN_SRC java
// Exception handling categories:
// - IOException: File system access failures
// - SecurityException: Permission and access issues
// - EventStoreException: Domain-specific event store errors
// - RuntimeException: Unexpected system failures
#+END_SRC

** Error Recovery Strategies
The adapter implements sophisticated error recovery:
- Graceful degradation for corrupted event files
- Automatic recovery of metadata from filesystem state
- Detailed error reporting with operation context
- Partial success handling for batch operations

** Data Integrity Protection
Multiple layers of data integrity protection:
#+BEGIN_SRC java
// Integrity protection features:
// - Atomic file operations for consistency
// - Version conflict detection and resolution
// - Corruption detection during deserialization
// - Backup and recovery capabilities
#+END_SRC

* Security Considerations

** File System Security
Event storage requires careful file system security management:
#+BEGIN_SRC java
// Security requirements:
// - Directory and file creation permissions
// - Read/write access control for event files
// - Safe path resolution and validation
// - Protection against path traversal attacks
#+END_SRC

** Data Protection
Comprehensive data protection measures:
- Safe filename generation to prevent injection attacks
- Input validation for aggregate type and ID parameters
- Access control for sensitive event data
- Audit trail for all event store operations

** Event Integrity
Event integrity protection mechanisms:
#+BEGIN_SRC java
// Integrity protection measures:
// - Event serialization validation
// - Version consistency verification
// - Timestamp accuracy enforcement
// - Metadata consistency checks
#+END_SRC

* Testing and Mock Support

** Testability Design
The adapter enables comprehensive testing strategies:
#+BEGIN_SRC java
// Testing support features:
// - Constructor injection for test directories
// - Health check methods for test validation
// - Statistics methods for test verification
// - Clear separation of concerns for unit testing
#+END_SRC

** Test Environment Support
Testing utilities for various scenarios:
- Temporary directory creation for isolated tests
- Event count verification for test assertions
- Error condition simulation and recovery testing
- Performance testing with synthetic event loads

** Integration Testing Support
The adapter supports comprehensive integration testing:
#+BEGIN_SRC java
// Integration testing capabilities:
// - Real filesystem testing with temporary directories
// - Concurrent access testing with multiple threads
// - Large dataset testing for performance validation
// - Cross-platform compatibility testing
#+END_SRC

* Future Evolution and Extensibility

** Storage Enhancement Roadmap
Planned enhancements to storage capabilities:
#+BEGIN_SRC java
// Future enhancement areas:
// - Compression support for large event files
// - Automatic archival and retention policies
// - Backup and replication capabilities
// - Advanced indexing for faster queries
#+END_SRC

** Performance Enhancement Opportunities
Identified areas for future optimization:
- Memory-mapped file operations for large event stores
- Parallel processing for batch operations
- Advanced caching strategies with LRU eviction
- Asynchronous I/O for improved throughput

** Technology Integration
Integration with emerging storage technologies:
#+BEGIN_SRC java
// Technology integration targets:
// - Cloud storage backends (S3, Azure Blob, GCS)
// - Distributed file systems for scalability
// - Database backends for advanced querying
// - Event streaming integration
#+END_SRC

* Related Documentation

- [[ports/EventStorePort.org][EventStorePort]]: Domain interface implemented by this adapter
- [[EventSerializationSupport.org][EventSerializationSupport]]: Serialization utilities used by this adapter
- [[JsonClassFileChanged.org][JsonClassFileChanged]]: DTO used in event serialization
- [[events/][Domain Events]]: Events stored and retrieved by this adapter

* Implementation Notes

** Design Patterns Applied
The adapter leverages several key design patterns:
- **Adapter Pattern**: Clean interface between domain and filesystem storage
- **Template Method**: Consistent event processing across operations
- **Strategy Pattern**: Different retrieval strategies for different query types
- **Observer Pattern**: Event-driven metadata updates

** Filesystem Design Decisions
Key design decisions for filesystem organization:
- Hierarchical directory structure for natural organization
- Timestamp-based filename generation for ordering
- Atomic file operations for consistency
- Safe identifier encoding for cross-platform compatibility

The FilesystemEventStoreAdapter provides ByteHot's complete "poor-man's" Event Store implementation while maintaining data integrity, performance optimization, and architectural purity for reliable event sourcing across the entire application lifecycle.