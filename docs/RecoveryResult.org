#+TITLE: RecoveryResult - Outcome of Error Recovery Operations
#+AUTHOR: Claude Code
#+DATE: 2025-06-17

* Overview

The =RecoveryResult= class encapsulates the outcome and details of error recovery operations in ByteHot. It provides comprehensive information about recovery attempts, their success or failure, and metrics for monitoring and analysis of the error recovery system.

** Key Responsibilities
- Report the success or failure of recovery operations
- Provide detailed metrics about recovery attempts and outcomes
- Track recovery strategy effectiveness and performance
- Include error information for failed recovery attempts
- Support recovery operation analysis and strategy optimization

* Class Declaration and Core Structure

#+begin_src java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/RecoveryResult.java
/*
                        ByteHot

    Copyright (C) 2025-today  rydnr@acm-sl.org

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public v3
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Thanks to ACM S.L. for distributing this library under the GPLv3 license.
    Contact info: jose.sanleandro@acm-sl.com

 ******************************************************************************
 *
 * Filename: RecoveryResult.java
 *
 * Author: Claude Code
 *
 * Class name: RecoveryResult
 *
 * Responsibilities:
 *   - Report recovery operation outcomes and performance metrics
 *   - Track recovery strategy effectiveness
 *   - Support recovery system analysis and optimization
 *
 * Collaborators:
 *   - ErrorRecoveryManager: Creates RecoveryResult instances
 *   - RecoveryStrategy: Strategy used for recovery attempt
 *   - ErrorResult: Original error that triggered recovery
 */
package org.acmsl.bytehot.domain;

import lombok.Getter;

import java.time.Duration;
import java.time.Instant;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 * Represents the outcome of an error recovery operation
 * @author Claude Code
 * @since 2025-06-17
 */
@Getter
public class RecoveryResult {

    /**
     * Whether the recovery operation was successful
     */
    private final boolean success;

    /**
     * Strategy that was used for recovery
     */
    private final RecoveryStrategy strategy;

    /**
     * ID of the original error that triggered recovery
     */
    private final String originalErrorId;

    /**
     * Class name that was being recovered
     */
    private final String className;

    /**
     * Number of retry attempts made during recovery
     */
    private final int retryAttempts;

    /**
     * Duration of the recovery operation
     */
    private final Duration operationDuration;

    /**
     * Timestamp when recovery operation started
     */
    private final Instant startTime;

    /**
     * Timestamp when recovery operation completed
     */
    private final Instant endTime;

    /**
     * Error that caused recovery failure, if any
     */
    private final Throwable recoveryError;

    /**
     * List of actions taken during recovery
     */
    private final List<RecoveryAction> actionsTaken;

    /**
     * List of warnings encountered during recovery
     */
    private final List<String> warnings;

    /**
     * Additional details about the recovery operation
     */
    private final String details;

    /**
     * Whether manual intervention was required
     */
    private final boolean manualInterventionRequired;

    /**
     * Recovery statistics for analysis
     */
    private final RecoveryStatistics statistics;

    /**
     * Creates a new recovery result
     */
    private RecoveryResult(final boolean success, final RecoveryStrategy strategy, final String originalErrorId,
                          final String className, final int retryAttempts, final Duration operationDuration,
                          final Instant startTime, final Instant endTime, final Throwable recoveryError,
                          final List<RecoveryAction> actionsTaken, final List<String> warnings,
                          final String details, final boolean manualInterventionRequired,
                          final RecoveryStatistics statistics) {
        this.success = success;
        this.strategy = strategy;
        this.originalErrorId = originalErrorId;
        this.className = className;
        this.retryAttempts = retryAttempts;
        this.operationDuration = operationDuration;
        this.startTime = startTime;
        this.endTime = endTime;
        this.recoveryError = recoveryError;
        this.actionsTaken = new CopyOnWriteArrayList<>(actionsTaken);
        this.warnings = new CopyOnWriteArrayList<>(warnings);
        this.details = details;
        this.manualInterventionRequired = manualInterventionRequired;
        this.statistics = statistics;
    }

    /**
     * Creates a successful recovery result
     */
    public static RecoveryResult success(final RecoveryStrategy strategy, final String originalErrorId,
                                       final String className, final int retryAttempts,
                                       final Duration operationDuration, final Instant startTime, final Instant endTime,
                                       final List<RecoveryAction> actionsTaken, final List<String> warnings,
                                       final String details, final RecoveryStatistics statistics) {
        return new RecoveryResult(true, strategy, originalErrorId, className, retryAttempts,
                                operationDuration, startTime, endTime, null, actionsTaken, warnings,
                                details, false, statistics);
    }

    /**
     * Creates a failed recovery result
     */
    public static RecoveryResult failure(final RecoveryStrategy strategy, final String originalErrorId,
                                       final String className, final int retryAttempts,
                                       final Duration operationDuration, final Instant startTime, final Instant endTime,
                                       final Throwable recoveryError, final List<RecoveryAction> actionsTaken,
                                       final List<String> warnings, final String details,
                                       final boolean manualInterventionRequired, final RecoveryStatistics statistics) {
        return new RecoveryResult(false, strategy, originalErrorId, className, retryAttempts,
                                operationDuration, startTime, endTime, recoveryError, actionsTaken, warnings,
                                details, manualInterventionRequired, statistics);
    }

    /**
     * Returns whether the recovery had warnings
     */
    public boolean hasWarnings() {
        return !warnings.isEmpty();
    }

    /**
     * Returns the number of warnings
     */
    public int getWarningCount() {
        return warnings.size();
    }

    /**
     * Returns the number of actions taken during recovery
     */
    public int getActionCount() {
        return actionsTaken.size();
    }

    /**
     * Returns whether recovery required multiple attempts
     */
    public boolean requiredRetries() {
        return retryAttempts > 1;
    }

    /**
     * Returns whether recovery was completed within the given time threshold
     */
    public boolean isWithinTimeThreshold(final Duration threshold) {
        return operationDuration.compareTo(threshold) <= 0;
    }

    /**
     * Returns whether recovery exceeded the given time threshold
     */
    public boolean exceededTimeThreshold(final Duration threshold) {
        return operationDuration.compareTo(threshold) > 0;
    }

    /**
     * Returns the primary error message if recovery failed
     */
    public String getRecoveryErrorMessage() {
        return recoveryError != null ? recoveryError.getMessage() : null;
    }

    /**
     * Returns whether this recovery result indicates a critical failure
     */
    public boolean isCriticalFailure() {
        return !success && manualInterventionRequired;
    }

    /**
     * Returns the success rate for retry attempts
     */
    public double getRetrySuccessRate() {
        if (retryAttempts == 0) {
            return success ? 100.0 : 0.0;
        }
        return success ? 100.0 : (double) (retryAttempts - 1) / retryAttempts * 100.0;
    }

    /**
     * Returns a summary description of the recovery result
     */
    public String getSummary() {
        if (success) {
            if (retryAttempts > 1) {
                return String.format("Recovery successful after %d attempts using %s in %dms",
                                   retryAttempts, strategy.getDescription(), operationDuration.toMillis());
            } else {
                return String.format("Recovery successful using %s in %dms",
                                   strategy.getDescription(), operationDuration.toMillis());
            }
        } else {
            return String.format("Recovery failed using %s after %d attempts: %s",
                               strategy.getDescription(), retryAttempts,
                               recoveryError != null ? recoveryError.getMessage() : "Unknown error");
        }
    }

    /**
     * Returns whether the recovery strategy was effective
     */
    public boolean wasStrategyEffective() {
        return success && !exceededTimeThreshold(Duration.ofMinutes(5));
    }

    /**
     * Returns the average time per retry attempt
     */
    public Duration getAverageTimePerAttempt() {
        if (retryAttempts == 0) {
            return operationDuration;
        }
        return operationDuration.dividedBy(retryAttempts);
    }

    @Override
    public String toString() {
        return "RecoveryResult{" +
               "success=" + success +
               ", strategy=" + strategy +
               ", className='" + className + '\'' +
               ", retryAttempts=" + retryAttempts +
               ", duration=" + operationDuration.toMillis() + "ms" +
               ", manualInterventionRequired=" + manualInterventionRequired +
               '}';
    }
}
#+end_src

* Usage Examples

** Processing Recovery Results

#+end_src
// Handle recovery operation outcome
RecoveryResult result = errorRecoveryManager.recover(errorResult);

if (result.isSuccess()) {
    logger.info("Recovery completed: " + result.getSummary());
    
    // Check if recovery was efficient
    if (result.wasStrategyEffective()) {
        logger.info("Recovery strategy {} was effective", result.getStrategy());
        strategyMetrics.recordSuccess(result.getStrategy(), result.getOperationDuration());
    } else {
        logger.warn("Recovery succeeded but took longer than expected: {}ms", 
                   result.getOperationDuration().toMillis());
        strategyMetrics.recordSlowSuccess(result.getStrategy(), result.getOperationDuration());
    }
    
    // Log warnings if any
    if (result.hasWarnings()) {
        logger.warn("Recovery completed with {} warnings:", result.getWarningCount());
        result.getWarnings().forEach(warning -> logger.warn("  - " + warning));
    }
} else {
    logger.error("Recovery failed: " + result.getSummary());
    
    if (result.isCriticalFailure()) {
        logger.error("Manual intervention required for error: " + result.getOriginalErrorId());
        escalationManager.escalateToManual(result);
    } else {
        logger.info("Attempting alternative recovery strategy");
        attemptAlternativeRecovery(result);
    }
}
#+end_src

** Recovery Strategy Analysis

#+begin_src java
public void analyzeRecoveryStrategies(List<RecoveryResult> results) {
    Map<RecoveryStrategy, StrategyAnalysis> analysis = new EnumMap<>(RecoveryStrategy.class);
    
    for (RecoveryResult result : results) {
        RecoveryStrategy strategy = result.getStrategy();
        StrategyAnalysis strategyAnalysis = analysis.computeIfAbsent(strategy, 
            k -> new StrategyAnalysis());
        
        strategyAnalysis.addResult(result);
        
        // Track effectiveness metrics
        if (result.wasStrategyEffective()) {
            strategyAnalysis.incrementEffectiveCount();
        }
        
        // Track retry patterns
        if (result.requiredRetries()) {
            strategyAnalysis.recordRetryAttempts(result.getRetryAttempts());
        }
        
        // Track duration patterns
        strategyAnalysis.addDuration(result.getOperationDuration());
    }
    
    // Generate recommendations
    for (Map.Entry<RecoveryStrategy, StrategyAnalysis> entry : analysis.entrySet()) {
        RecoveryStrategy strategy = entry.getKey();
        StrategyAnalysis stats = entry.getValue();
        
        logger.info("Strategy {}: Success rate {:.1f}%, Avg duration {}ms, Effectiveness {:.1f}%",
                   strategy, stats.getSuccessRate(), stats.getAverageDuration().toMillis(),
                   stats.getEffectivenessRate());
        
        if (stats.getSuccessRate() < 80.0) {
            logger.warn("Strategy {} has low success rate, consider review", strategy);
        }
    }
}
#+end_src

** Performance Monitoring and Optimization

#+end_src
public void monitorRecoveryPerformance(RecoveryResult result) {
    // Record performance metrics
    performanceMetrics.recordRecoveryDuration(result.getOperationDuration());
    performanceMetrics.recordRetryCount(result.getRetryAttempts());
    performanceMetrics.recordStrategyUsage(result.getStrategy());
    
    // Check against performance thresholds
    Duration maxRecoveryTime = Duration.ofMinutes(2);
    if (result.exceededTimeThreshold(maxRecoveryTime)) {
        performanceAlerts.sendSlowRecoveryAlert(result);
    }
    
    // Analyze retry efficiency
    if (result.requiredRetries()) {
        Duration avgTimePerAttempt = result.getAverageTimePerAttempt();
        if (avgTimePerAttempt.toMillis() > 30000) { // 30 seconds per attempt
            performanceAlerts.sendInefficiencyAlert(result);
        }
    }
    
    // Update strategy performance profiles
    strategyProfiler.updateProfile(result.getStrategy(), result);
}
#+end_src

** Recovery Statistics and Reporting

#+begin_src java
public RecoveryReport generateRecoveryReport(List<RecoveryResult> results) {
    int totalRecoveries = results.size();
    int successfulRecoveries = 0;
    int manualInterventionCount = 0;
    Duration totalRecoveryTime = Duration.ZERO;
    Map<RecoveryStrategy, Integer> strategyUsage = new EnumMap<>(RecoveryStrategy.class);
    
    for (RecoveryResult result : results) {
        if (result.isSuccess()) {
            successfulRecoveries++;
        }
        
        if (result.isManualInterventionRequired()) {
            manualInterventionCount++;
        }
        
        totalRecoveryTime = totalRecoveryTime.plus(result.getOperationDuration());
        strategyUsage.merge(result.getStrategy(), 1, Integer::sum);
    }
    
    double successRate = (double) successfulRecoveries / totalRecoveries * 100.0;
    double manualInterventionRate = (double) manualInterventionCount / totalRecoveries * 100.0;
    Duration averageRecoveryTime = totalRecoveryTime.dividedBy(totalRecoveries);
    
    return new RecoveryReport(
        totalRecoveries,
        successRate,
        manualInterventionRate,
        averageRecoveryTime,
        strategyUsage
    );
}
#+end_src

* Architecture Notes

** Recovery Operation Tracking
- Comprehensive outcome reporting with success/failure details
- Performance metrics for monitoring and optimization
- Retry pattern analysis for strategy improvement
- Integration with escalation systems for failed recoveries

** Strategy Effectiveness Analysis
- Strategy performance tracking and comparison
- Retry pattern analysis for optimization opportunities
- Time threshold monitoring for performance awareness
- Support for strategy recommendation systems

** Operational Integration
- Clear integration with monitoring and alerting systems
- Support for manual intervention workflows
- Performance baseline establishment and tracking
- Recovery operation audit trail and analysis capabilities