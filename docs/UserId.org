#+TITLE: UserId - User Identifier Value Object
#+AUTHOR: Claude Code 
#+DATE: 2025-06-18

* Overview

The ~UserId~ class is a value object representing a unique user identifier in ByteHot's user management domain, featuring sophisticated auto-discovery capabilities and intelligent user identification.

* Class Responsibilities

** Primary Responsibilities
- Provide unique user identification across ByteHot operations
- Auto-discover user information from Git configuration and environment
- Generate human-readable display names from various identifier formats
- Support multiple user identification strategies (email, username, anonymous)

** Secondary Responsibilities
- Validate user identifier formats and constraints
- Extract display names intelligently from email addresses
- Provide factory methods for different identification scenarios
- Maintain immutability and value object semantics

* Value Object Characteristics

** Immutability
The UserId class is completely immutable:
- All fields are ~final~ and ~private~
- No mutating methods provided
- Thread-safe by design
- Supports use as map keys and in sets

** Equality Semantics
Value objects require proper equality:
- Equality based on value content, not identity
- Consistent ~hashCode()~ implementation via Lombok
- Comparable interface for ordering (if needed)

** Factory Methods
Multiple creation strategies supported:

#+begin_src java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/UserId.java
public static UserId anonymous() {
    return new UserId("anonymous-" + System.currentTimeMillis(), "Anonymous User");
}

public static UserId fromEmail(final String email) {
    return new UserId(email, extractDisplayNameFromEmail(email));
}

public static UserId fromGit() {
    // Auto-discover from Git configuration
    return discoverFromGitConfig();
}
#+end_src

* Auto-Discovery Capabilities

** Git Configuration Discovery
The most sophisticated discovery mechanism:

#+end_src
private static UserId discoverFromGitConfig() {
    try {
        final Process gitNameProcess = new ProcessBuilder("git", "config", "user.name").start();
        final Process gitEmailProcess = new ProcessBuilder("git", "config", "user.email").start();
        
        final String gitName = readProcessOutput(gitNameProcess).trim();
        final String gitEmail = readProcessOutput(gitEmailProcess).trim();
        
        if (!gitEmail.isEmpty()) {
            final String displayName = !gitName.isEmpty() ? gitName : extractDisplayNameFromEmail(gitEmail);
            return new UserId(gitEmail, displayName);
        }
    } catch (final IOException | InterruptedException e) {
        // Git not available, continue with fallback
    }
    
    return fromEnvironment();
}
#+end_src

** Environment Variable Discovery
Fallback identification strategy:

#+begin_src java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/UserId.java
private static UserId fromEnvironment() {
    final String[] envVariables = {"USER", "USERNAME", "LOGNAME"};
    
    for (final String envVar : envVariables) {
        final String username = System.getenv(envVar);
        if (username != null && !username.trim().isEmpty()) {
            return new UserId(username.trim(), formatDisplayName(username.trim()));
        }
    }
    
    return anonymous();
}
#+end_src

** Intelligent Display Name Extraction
Smart parsing of email addresses:

#+end_src
private static String extractDisplayNameFromEmail(final String email) {
    if (email == null || !email.contains("@")) {
        return email;
    }
    
    final String localPart = email.substring(0, email.indexOf("@"));
    
    // Handle common patterns: first.last, first_last, firstlast
    if (localPart.contains(".")) {
        return Arrays.stream(localPart.split("\\."))
                    .map(UserId::capitalize)
                    .collect(Collectors.joining(" "));
    } else if (localPart.contains("_")) {
        return Arrays.stream(localPart.split("_"))
                    .map(UserId::capitalize)
                    .collect(Collectors.joining(" "));
    } else {
        return capitalize(localPart);
    }
}
#+end_src

* Integration with User Management

** Aggregate Root Coordination
UserId serves as the key for User aggregate identification:

#+begin_src java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/UserId.java
// Used in User aggregate
public static DomainResponseEvent<UserRegistrationRequested> accept(final UserRegistrationRequested event) {
    final UserProfile profile = UserProfile.defaultProfile(event.getUserId());
    // ... rest of registration logic
}
#+end_src

** Event Metadata Integration
User identification propagates through all domain events:

#+end_src
// EventMetadata includes user context
final EventMetadata metadata = createMetadataWithUser(
    "user",
    userId.getValue(),
    previousEventId,
    currentVersion,
    userId.getValue()  // User ID for audit trail
);
#+end_src

* Validation and Security

** Input Validation
Robust validation of user identifiers:

#+begin_src java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/UserId.java
private static void validateUserId(final String value) {
    if (value == null || value.trim().isEmpty()) {
        throw new IllegalArgumentException("User ID cannot be null or empty");
    }
    
    if (value.length() > MAX_USER_ID_LENGTH) {
        throw new IllegalArgumentException("User ID too long: " + value.length());
    }
    
    // Additional validation rules can be added here
}
#+end_src

** Security Considerations
- No sensitive information stored in plain text
- Display names are derived, not stored separately
- Git commands executed safely with proper error handling
- Environment variables accessed through standard Java APIs

* Performance Optimizations

** Lazy Discovery
Auto-discovery only happens when needed:

#+end_src
public static UserId autoDiscover() {
    // Expensive discovery only when explicitly requested
    return discoverFromGitConfig();
}
#+end_src

** Caching Strategy
Discovery results can be cached for performance:
- Static factory methods enable caching at call sites
- Immutable objects are safe to cache indefinitely
- Discovery process can be optimized for repeated calls

** Memory Efficiency
- Minimal memory footprint with only essential fields
- String interning for common values (if beneficial)
- No unnecessary object references or collections

* Error Handling

** Graceful Degradation
Auto-discovery fails gracefully through fallback chain:
1. Git configuration discovery
2. Environment variable detection  
3. Anonymous user generation
4. Never fails completely

** Error Recovery
#+begin_src java :tangle ../bytehot/src/main/java/org/acmsl/bytehot/domain/UserId.java
private static UserId fromEnvironment() {
    try {
        // Primary environment detection
        return detectFromEnvironment();
    } catch (final Exception e) {
        // Log warning but continue with anonymous
        return anonymous();
    }
}
#+end_src

** Exception Safety
- All discovery methods handle exceptions internally
- No checked exceptions leak to callers
- Consistent fallback behavior across all scenarios

* Testing Strategy

** Unit Tests
Comprehensive testing of all factory methods:

#+end_src
@Test
void fromEmail_extractsDisplayNameCorrectly() {
    final UserId userId = UserId.fromEmail("john.doe@example.com");
    assertThat(userId.getValue()).isEqualTo("john.doe@example.com");
    assertThat(userId.getDisplayName()).isEqualTo("John Doe");
}

@Test
void fromGit_discoversFromConfiguration() {
    // Mock Git configuration availability
    final UserId userId = UserId.fromGit();
    assertThat(userId.getValue()).isNotEmpty();
    assertThat(userId.getDisplayName()).isNotEmpty();
}
#+end_src

** Integration Tests
Testing auto-discovery in realistic environments:
- Git repository with valid configuration
- Various environment variable scenarios
- Network-isolated environments
- Permission-restricted environments

** Edge Case Testing
Comprehensive edge case coverage:
- Invalid email formats
- Missing Git configuration
- Empty environment variables
- Special characters in usernames
- Very long identifiers

* Invariants

The UserId value object maintains several invariants:

** Value Invariants
- Value string is never null or empty after construction
- Display name is always derived from value if not provided
- Object equality is based on value content only

** Format Invariants  
- Email addresses must contain @ symbol for email-based identification
- Display names are properly formatted (capitalized, spaced)
- Anonymous IDs always have unique timestamp suffixes

** Discovery Invariants
- Auto-discovery always produces valid UserId instance
- Fallback chain ensures no discovery failure
- Git discovery respects system Git configuration

* Collaboration Patterns

** With User Aggregate
- Serves as aggregate identifier and lookup key
- Used in event reconstruction and state management
- Provides user context for all user operations

** With Domain Events
- Embedded in all user-related domain events
- Supports event correlation and audit trails
- Enables user-aware event processing

** With Infrastructure
- Git command execution through ProcessBuilder
- Environment variable access through System.getenv()
- File system independence for portability

* Future Enhancements

** Enhanced Auto-Discovery
- Integration with LDAP/Active Directory
- Support for SSH key-based identification
- OAuth/OIDC identity provider integration

** Advanced Validation
- Email format validation with comprehensive regex
- Username format enforcement for security
- Blacklist/whitelist support for enterprise environments

** Performance Improvements
- Caching of discovery results
- Async discovery for better responsiveness
- Batch discovery for multiple users

** Internationalization
- Support for international characters in names
- Locale-aware display name formatting
- Character encoding handling for global use

The UserId value object provides the foundation for user identification in ByteHot, combining simplicity with powerful auto-discovery capabilities while maintaining strict value object semantics and architectural boundaries.